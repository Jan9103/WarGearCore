/**
 * Copyright 2021 Jan9103 (@jan9103:matrix.org Jan9103.wargear@protonmail.com)
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software,
 * and to permit third-parties to whom the Software is furnished to do so, all
 * subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR
 * ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
package de.jan9103.wgc.advancedFight.mods;

import org.bukkit.Bukkit;
import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.World;
import org.bukkit.entity.TNTPrimed;

import de.jan9103.wargearcore.WGC;
import de.jan9103.wargearcore.api.fight.FightMod;
import de.jan9103.wargearcore.coordSys.BigArea;
import de.jan9103.wargearcore.fight.Fight;
import de.jan9103.wargearcore.worldedit.editors.async.AsyncSetO;

public class SpaceInvadersMod extends FightMod{
	private int shed=0,frame=0,spwn=0;
	private final int maxFrame,y,x,speed;
	private final int[]z;
	private final Material m=Material.POLISHED_ANDESITE;
	private final World w;
	private boolean on=false,direction=true;
	public SpaceInvadersMod(Fight fyte,String[]a)throws Exception{
		this(fyte,a.length>3?Integer.parseInt(a[3].toLowerCase()):100);}
	public SpaceInvadersMod(Fight fyte,int speed){
		super(fyte);
		this.speed=speed;
		w=fyte.area.w;
		maxFrame=fyte.area.redWg.xSize()-19;
		x=fyte.area.redWg.low.x;
		y=fyte.area.redWg.high.y+fyte.area.ausfahrm+4;
		int ind=0;
		for(int i=fyte.area.redWg.low.z+2;i<fyte.area.redWg.high.z-2;i+=8)
			ind++;
		for(int i=fyte.area.bluWg.high.z-2;i>fyte.area.bluWg.low.z-2;i-=8)
			ind++;
		z=new int[ind]; // alle 8b auf beiden seiten
		ind=0;
		for(int i=fyte.area.redWg.low.z+2;i<fyte.area.redWg.high.z-2;i+=8)
			z[ind++]=i;
		for(int i=fyte.area.bluWg.high.z-2;i>fyte.area.bluWg.low.z-2;i-=8)
			z[ind++]=i;
	}
	@Override public String desc(){return"Space Invaders";}
	@Override public void fightEnd(){
		stop();
		for(int i:z)
			new AsyncSetO(w,new BigArea(x,y,i,x+maxFrame+19,y+5,i),Material.AIR,false,null).aFromSync();
	}
	@Override public void unload(){stop();}
	@Override public void fightStart(){
		stop();on=true;
		shed=Bukkit.getScheduler().scheduleSyncRepeatingTask(WGC.wgc,()->frame(),speed,speed);
		for(int i:z){
			initSpawn(x+frame,i);
			initSpawn(x+frame+7,i);
			initSpawn(x+frame+14,i);
		}
	}
	private boolean dead(int x,int z){
		return(
			// y0
			w.getBlockAt(x+1,y,z).getType()!=m||
			w.getBlockAt(x+3,y,z).getType()!=m||
			// y1
			w.getBlockAt(x,y+1,z).getType()!=m||
			w.getBlockAt(x+1,y+1,z).getType()!=m||
			w.getBlockAt(x+2,y+1,z).getType()!=m||
			w.getBlockAt(x+3,y+1,z).getType()!=m||
			w.getBlockAt(x+4,y+1,z).getType()!=m||
			// y2
			w.getBlockAt(x,y+2,z).getType()!=m||
			w.getBlockAt(x+2,y+2,z).getType()!=m||
			w.getBlockAt(x+4,y+2,z).getType()!=m||
			// y3
			w.getBlockAt(x+1,y+3,z).getType()!=m||
			w.getBlockAt(x+2,y+3,z).getType()!=m||
			w.getBlockAt(x+3,y+3,z).getType()!=m||
			// y4
			w.getBlockAt(x,y+4,z).getType()!=m||
			w.getBlockAt(x+4,y+4,z).getType()!=m
		);
	}
	private void initSpawn(int x,int z){
		// y0
		w.getBlockAt(x+1,y,z).setType(m,false);
		w.getBlockAt(x+3,y,z).setType(m,false);
		// y1
		w.getBlockAt(x,y+1,z).setType(m,false);
		w.getBlockAt(x+1,y+1,z).setType(m,false);
		w.getBlockAt(x+2,y+1,z).setType(m,false);
		w.getBlockAt(x+3,y+1,z).setType(m,false);
		w.getBlockAt(x+4,y+1,z).setType(m,false);
		// y2
		w.getBlockAt(x,y+2,z).setType(m,false);
		w.getBlockAt(x+2,y+2,z).setType(m,false);
		w.getBlockAt(x+4,y+2,z).setType(m,false);
		// y3
		w.getBlockAt(x+1,y+3,z).setType(m,false);
		w.getBlockAt(x+2,y+3,z).setType(m,false);
		w.getBlockAt(x+3,y+3,z).setType(m,false);
		// y4
		w.getBlockAt(x,y+4,z).setType(m,false);
		w.getBlockAt(x+4,y+4,z).setType(m,false);
	}
	private void inc(int x,int z){
		if(dead(x,z))return;
		// y0
		w.getBlockAt(x+1,y,z).setType(Material.AIR,false);
		w.getBlockAt(x+2,y,z).setType(m,false);
		w.getBlockAt(x+3,y,z).setType(Material.AIR,false);
		w.getBlockAt(x+4,y,z).setType(m,false);
		// y1
		w.getBlockAt(x,y+1,z).setType(Material.AIR,false);
		w.getBlockAt(x+5,y+1,z).setType(m,false);
		// y2
		w.getBlockAt(x,y+2,z).setType(Material.AIR,false);
		w.getBlockAt(x+1,y+2,z).setType(m,false);
		w.getBlockAt(x+2,y+2,z).setType(Material.AIR,false);
		w.getBlockAt(x+3,y+2,z).setType(m,false);
		w.getBlockAt(x+4,y+2,z).setType(Material.AIR,false);
		w.getBlockAt(x+5,y+2,z).setType(m,false);
		// y3
		w.getBlockAt(x+1,y+3,z).setType(Material.AIR,false);
		w.getBlockAt(x+4,y+3,z).setType(m,false);
		// y4
		w.getBlockAt(x,y+4,z).setType(Material.AIR,false);
		w.getBlockAt(x+1,y+4,z).setType(m,false);
		w.getBlockAt(x+4,y+4,z).setType(Material.AIR,false);
		w.getBlockAt(x+5,y+4,z).setType(m,false);
	}
	private void dec(int x,int z){
		if(dead(x,z))return;
		// y0
		w.getBlockAt(x+2,y,z).setType(m,false);
		w.getBlockAt(x+3,y,z).setType(Material.AIR,false);
		w.getBlockAt(x+4,y,z).setType(m,false);
		w.getBlockAt(x+5,y,z).setType(Material.AIR,false);
		// y1
		w.getBlockAt(x-1,y+1,z).setType(m,false);
		w.getBlockAt(x+4,y+1,z).setType(Material.AIR,false);
		// y2
		w.getBlockAt(x-1,y+2,z).setType(m,false);
		w.getBlockAt(x,y+2,z).setType(Material.AIR,false);
		w.getBlockAt(x+1,y+2,z).setType(m,false);
		w.getBlockAt(x+2,y+2,z).setType(Material.AIR,false);
		w.getBlockAt(x+3,y+2,z).setType(m,false);
		w.getBlockAt(x+4,y+2,z).setType(Material.AIR,false);
		// y3
		w.getBlockAt(x,y+3,z).setType(m,false);
		w.getBlockAt(x+3,y+3,z).setType(Material.AIR,false);
		// y4
		w.getBlockAt(x-1,y+4,z).setType(m,false);
		w.getBlockAt(x,y+4,z).setType(Material.AIR,false);
		w.getBlockAt(x+3,y+4,z).setType(m,false);
		w.getBlockAt(x+4,y+4,z).setType(Material.AIR,false);
	}
	private void fireball(int x,int z){
	//	Fireball fb=(Fireball)w.spawnEntity(new Location(w,x+2,y-1,z),EntityType.FIREBALL);
	//	fb.setBounce(false);
	//	fb.setIsIncendiary(false);
	//	fb.setYield(4);
	//	fb.setVelocity(new Vector(0,-.3,0));
	//	fb.setDirection(new Vector(0,-1,0));
		if(!dead(x,z))
			((TNTPrimed)w.spawn(new Location(f.area.w,x+2,y,z),TNTPrimed.class)).setFuseTicks(80);
	}
	private void frame(){
		if(direction){
			for(int i:z){
				inc(x+frame,i);
				inc(x+frame+7,i);
				inc(x+frame+14,i);
			}
			if(++frame>=maxFrame)direction=false;
		}else{
			for(int i:z){
				dec(x+frame,i);
				dec(x+frame+7,i);
				dec(x+frame+14,i);
			}
			if(--frame<=0)direction=true;
		}
		if(spwn++>=10){
			for(int i:z){
				fireball(x+frame,i);
				fireball(x+frame+7,i);
				fireball(x+frame+14,i);
			}
			spwn=0;
		}
	}
	private void stop(){
		if(on)Bukkit.getScheduler().cancelTask(shed);
		on=false;
	}
	@Override public String cfg(){return"spaceinvader"+speed;}
	
}
