/**
 * Copyright 2021 Jan9103 (@jan9103:matrix.org Jan9103.wargear@protonmail.com)
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software,
 * and to permit third-parties to whom the Software is furnished to do so, all
 * subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR
 * ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
package de.jan9103.wgc.advancedFight.mods;

import java.util.ArrayList;
import java.util.Iterator;

import org.bukkit.Bukkit;
import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.Particle;
import org.bukkit.entity.EntityType;
import org.bukkit.entity.FallingBlock;
import org.bukkit.entity.Snowball;
import org.bukkit.event.Listener;
import org.bukkit.util.Vector;

import de.jan9103.wargearcore.api.fight.FightMod;
import de.jan9103.wargearcore.fight.Fight;
import de.jan9103.wgc.advancedFight.P;

public class IceStorm extends FightMod implements Listener{
	public IceStorm(Fight fyte,String[]a){
		super(fyte);
		maxBlocks=Integer.min(f.area.redWg.size()/1000, 10);
		maxBalls=Integer.min(maxBlocks/10, 1);
		y=f.area.redWg.high.y+f.area.ausfahrm+10;
	}
	private ArrayList<FallingBlock>blocks=new ArrayList<>();
	private float vel=1;
	private final int maxBlocks,maxBalls,y;
	private Vector dir=new Vector(0,1,0);
	@Override public String desc(){return"Eissturm";}
	@Override public String cfg(){return"icestorm";}
	@Override public void countdownStart(){
		// TODO: biome, weather, etc
	}
	@Override public void fightStart(){
		registerTmpListener(this);addShedule(Bukkit.getScheduler().scheduleSyncRepeatingTask(P.p,()->tick(),3,3));
	}
	private void tick(){
		f.allAliveUsers((u)->{
			Location l=u.getPlayer().getLocation();
			if(l.getWorld().getHighestBlockAt(l).getY()<=l.getY()-3)
				l.getWorld().spawnParticle(Particle.FIREWORKS_SPARK,l,30,8,5,8);
		});
		try{
			vel=Float.min(.8f,vel+((P.r.nextInt(100)*.05f)-.5f));
			dir=dir.add(rdmVelocity()).normalize();
			int z=P.r.nextInt(maxBlocks);
			for(int i=0;i<z;i++)
				f.area.w.spawnFallingBlock(P.rdm(f,y),
					Bukkit.createBlockData(P.r.nextBoolean()?Material.FROSTED_ICE:Material.SNOW_BLOCK));
			z=P.r.nextInt(maxBalls);
			for(int i=0;i<z;i++){
				Snowball sb=(Snowball)f.area.w.spawnEntity(P.rdm(f,y),EntityType.SNOWBALL);
				sb.setCustomName("Ice");
				sb.setCustomNameVisible(false);
				sb.setVelocity(rdmVelocity().add(dir).normalize().multiply(vel));
			}
			Iterator<FallingBlock>i=blocks.iterator();
			while(i.hasNext()){
				FallingBlock b=i.next();
				if(b.isDead())i.remove();
			//	else b.setVelocity(apply(b.getVelocity()));
			}
		}catch(Throwable t){t.printStackTrace();}
	}
	private Vector rdmVelocity(){
		return new Vector(P.r.nextInt(),-Math.abs(P.r.nextInt()),P.r.nextInt()).normalize();
	}
	@Override public void fightEnd(){
		for(FallingBlock i:blocks)i.remove();
		blocks.clear();
		stopAllShedules();
	}
}
