/**
 * Copyright 2021 Jan9103 (@jan9103:matrix.org Jan9103.wargear@protonmail.com)
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software,
 * and to permit third-parties to whom the Software is furnished to do so, all
 * subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR
 * ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
package de.jan9103.wgc.advancedFight.mods;

import org.bukkit.Bukkit;
import org.bukkit.Color;
import org.bukkit.FireworkEffect;
import org.bukkit.entity.EntityType;
import org.bukkit.entity.Firework;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.entity.FireworkExplodeEvent;
import org.bukkit.inventory.meta.FireworkMeta;

import de.jan9103.wargearcore.api.fight.FightMod;
import de.jan9103.wargearcore.coordSys.SmallArea;
import de.jan9103.wargearcore.fight.Fight;
import de.jan9103.wgc.advancedFight.P;

/**
 * random fireworks and some of them do block damage
 */
public class Silvester extends FightMod implements Listener{
	public Silvester(Fight fyte,String[]a){super(fyte);}
	@Override public String desc(){return"Silvester Mod";}
	@Override public String cfg(){return"silvester";}
	@Override public void fightStart(){
		registerTmpListener(this);
		addShedule(Bukkit.getScheduler().scheduleSyncRepeatingTask(P.p,()->{
			SmallArea sa=f.area.area;
			Firework fw=(Firework)f.area.w.spawnEntity(f.area.w.getHighestBlockAt(
					sa.low.x+P.r.nextInt(Math.abs(sa.high.x-sa.low.x)),
					sa.low.z+P.r.nextInt(Math.abs(sa.high.z-sa.low.z))
					).getLocation(),EntityType.FIREWORK);
			FireworkMeta fm=fw.getFireworkMeta();
			fm.addEffect(FireworkEffect.builder()
				.with(FireworkEffect.Type.values()[P.r.nextInt(FireworkEffect.Type.values().length)-1])
				.withColor(Color.fromRGB(P.r.nextInt()))
				.withTrail()
				.withFade(Color.fromRGB(P.r.nextInt())).build());
			fw.setFireworkMeta(fm);
			fw.setGlowing(P.r.nextInt(10)==10);
			fw.setShotAtAngle(true);
			fw.setRotation(P.r.nextFloat(),P.r.nextFloat());
		},1,20));
	}
	@Override public void fightEnd(){stopAllShedules();}
	@EventHandler public void a(FireworkExplodeEvent e){
		if(P.r.nextBoolean())
			f.area.w.createExplosion(e.getEntity().getLocation(),4,P.r.nextBoolean());
	}
}
