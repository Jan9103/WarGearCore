/*
 * Copyright 2021 Jan9103 (@jan9103:matrix.org Jan9103.wargear@protonmail.com)
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software,
 * and to permit third-parties to whom the Software is furnished to do so, all
 * subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR
 * ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
package de.jan9103.wargearcore.worldedit.cmds;

import org.bukkit.Material;
import org.bukkit.entity.Player;

import de.jan9103.wargearcore.User;
import de.jan9103.wargearcore.WGC;
import de.jan9103.wargearcore.chat.Msg;
import de.jan9103.wargearcore.cmds.UserOnlyCmd;
import de.jan9103.wargearcore.util.ArrayList2;
import de.jan9103.wargearcore.util.BlockIds;

public abstract class WorldEditCmd extends UserOnlyCmd {
	@Override
	public void exe(String[] a,User u,Player p){
		if(!u.canUseWE()){
			new Msg(u,WGC._PREFIX_2_Edit).b("You currently cant use Worldedit - maybe another big operation is still active. please wait a bit.").a(p);
			return;
		}
		exec(a,u,p);
	}

	public abstract void exec(String[] args,User u,Player p);

	public static Material parseM(String in){
		for(final Material m:Material.values())
			if(m.toString().equals(in)) return m;

		try{return BlockIds.iTM(Integer.parseInt(in));}catch(NumberFormatException e){}
		return null;
	}

	public Material[] parseIn(String in){
		final String[]            ms =in.split(",");
		final ArrayList2<Material>out=new ArrayList2<>();
		Material m;

		for(String s:ms){
			s=s.toUpperCase();
			switch(s){
			case "TECH":
				out.a(Material.REDSTONE_WIRE,Material.REDSTONE_BLOCK,Material.REDSTONE_TORCH,Material.REDSTONE_WALL_TORCH,
				      Material.OBSERVER,Material.COMPARATOR,Material.REPEATER,
				      Material.STICKY_PISTON,Material.PISTON,Material.PISTON_HEAD,
				      Material.JUKEBOX,Material.NOTE_BLOCK);
				continue;

			case "SIGN":
				out.a(Material.OAK_SIGN,Material.OAK_WALL_SIGN,
				      Material.BIRCH_SIGN,Material.BIRCH_WALL_SIGN,
				      Material.DARK_OAK_SIGN,Material.DARK_OAK_WALL_SIGN,
				      Material.ACACIA_SIGN,Material.ACACIA_WALL_SIGN,
				      Material.JUNGLE_SIGN,Material.JUNGLE_WALL_SIGN,
				      Material.SPRUCE_SIGN,Material.SPRUCE_WALL_SIGN);
				continue;

			case "END":
			case "121": out.add(Material.END_STONE); continue;
			}
			m=parseM(s);
			if(m!=null)
				if(m.isBlock())
					out.add(m);
		}
		if(out.isEmpty()) return null;

		final Material[] o=new Material[out.size()];

		for(int i=0; i<o.length; i++) o[i]=out.get(i);
		return o;
	}
}
