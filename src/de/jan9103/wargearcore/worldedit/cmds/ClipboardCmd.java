/*
 * Copyright 2021 Jan9103 (@jan9103:matrix.org Jan9103.wargear@protonmail.com)
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software,
 * and to permit third-parties to whom the Software is furnished to do so, all
 * subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR
 * ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
package de.jan9103.wargearcore.worldedit.cmds;

import java.util.ArrayList;
import java.util.List;

import org.bukkit.Bukkit;
import org.bukkit.Material;
import org.bukkit.command.Command;
import org.bukkit.command.CommandSender;
import org.bukkit.command.TabCompleter;
import org.bukkit.entity.Player;

import de.jan9103.wargearcore.User;
import de.jan9103.wargearcore.WGC;
import de.jan9103.wargearcore.chat.Msg;
import de.jan9103.wargearcore.coordSys.BigCoord;
import de.jan9103.wargearcore.worldedit.clip.Clipboard;
import de.jan9103.wargearcore.worldedit.clip.ClipboardBlock;
import de.jan9103.wargearcore.worldedit.clip.SignClipBlock;
import de.jan9103.wargearcore.worldedit.clip.WaterlogBlock;

public class ClipboardCmd extends WorldEditCmd implements TabCompleter {
	@Override public void exec(String[] a,User u,Player p){
		Bukkit.getScheduler().runTaskAsynchronously(WGC.wgc,(Runnable)()->{
			final Clipboard c=u.cbv2.getAndWait();
			if(c==null){
				new Msg(u,WGC._PREFIX_2_Edit).b("No Clipbboard..").a(p); return;
			}
			if(a.length<1){
				Msg.missArg(u,"Edit",p);
				return;
			}
			switch(a[0].toLowerCase()){
			case "drain":
				u.setCanUseWE(false);
				for(final ClipboardBlock[][] z:c.clip)
					for(final ClipboardBlock[] y:z)
						for(ClipboardBlock b:y){
							if(b instanceof WaterlogBlock){
								b=new WaterlogBlock(b.getD()); continue;
							}
							if(b instanceof SignClipBlock){
								final SignClipBlock w=(SignClipBlock)b; b=new SignClipBlock(b.getM(),b.getD(),w.getTxt(),w.waterlogged()); continue;
							}
							switch(b.getM()){
							case WATER:
							case KELP:
							case KELP_PLANT:
							case SEAGRASS:
							case TALL_SEAGRASS: b=null;

							default:
							}
						}
				new Msg(u,WGC._PREFIX_2_Edit).a("Drained clipboard.");
				u.setCanUseWE(true);
				return;

			case "size":
				new Msg(u,WGC._PREFIX_2_Edit).a("Cb-Size: "+c.xSize()+" "+c.ySize()+" "+c.zSize()+".");
				return;

			case "os0":
				c.cv=new BigCoord(0,0,0);
				return;

//				case"d2":
//					Bukkit.getScheduler().runTaskAsynchronously(WGC.wgc,(Runnable)()->{
//						final D2 d2=new D2(u,c);
//						if(!d2.b()){
//							p.sendMessage("failed.");
//							return;
//						}
//						u.cbv2.set(d2.c);
//						p.sendMessage("done");
//					});
//					return;
			case "unload":
				Bukkit.getScheduler().runTask(WGC.wgc,(Runnable)()->u.cbv2.unload());
				return;

			case "mask": {
				if(a.length<2){
					Msg.missArg(u,"Edit",p); return;
				}
				Material[] m=this.parseIn(a[1]);
				if(m==null){
					Msg.missArg(u,"Edit",p); return;
				}
				c.mask(m);
				new Msg(u,WGC._PREFIX_2_Edit).a("Masked.").a(p);
				return;
			}

			case "unmask": {
				if(a.length<2){
					Msg.missArg(u,"Edit",p); return;
				}
				Material[] m=this.parseIn(a[1]);
				if(m==null){
					Msg.missArg(u,"Edit",p); return;
				}
				c.unMask(m[0]);
				new Msg(u,WGC._PREFIX_2_Edit).a("unMasked.").a(p);
				return;
			}

			case "invmask": {
				if(a.length<2){
					Msg.missArg(u,"Edit",p); return;
				}
				Material[] m=this.parseIn(a[1]);
				if(m==null){
					Msg.missArg(u,"Edit",p); return;
				}
				c.inverseMask(m[0]);
				new Msg(u,WGC._PREFIX_2_Edit).a("inverseMasked.").a(p);
				return;
			}
			}
		});
	}

	@Override public List<String>onTabComplete(CommandSender arg0,Command arg1,String arg2,String[] a){
		ArrayList<String>l=new ArrayList<>();

		switch(a[0].toLowerCase()){
		case "":
			l.add("drain");
			l.add("size");
			l.add("unload");
			l.add("mask");
			l.add("unmask");
			l.add("invmask");
		}
		return l;
	}
}
