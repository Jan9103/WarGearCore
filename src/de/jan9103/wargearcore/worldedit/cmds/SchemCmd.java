/*
 * Copyright 2021 Jan9103 (@jan9103:matrix.org Jan9103.wargear@protonmail.com)
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software,
 * and to permit third-parties to whom the Software is furnished to do so, all
 * subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR
 * ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
package de.jan9103.wargearcore.worldedit.cmds;

import static de.jan9103.wargearcore.chat.Msg.RUN;

import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.regex.Pattern;

import de.jan9103.wargearcore.worldedit.schem.SV2iz;
import org.bukkit.Bukkit;
import org.bukkit.block.Block;
import org.bukkit.entity.Player;

import de.jan9103.wargearcore.User;
import de.jan9103.wargearcore.WGC;
import de.jan9103.wargearcore.chat.Msg;
import de.jan9103.wargearcore.cmds.AsyncUserCmd;
import de.jan9103.wargearcore.coordSys.BigCoord;
import de.jan9103.wargearcore.util.FileWriter;
import de.jan9103.wargearcore.worldedit.clip.Clipboard;
import de.jan9103.wargearcore.worldedit.editors.async.AsyncPaste4b;
import de.jan9103.wargearcore.worldedit.schem.SV2;
import de.jan9103.wargearcore.worldedit.schem.SV2i;
import de.jan9103.wargearcore.worldedit.schem.SchemFormat;

/*
 * File System:
 * schem
 *  S  --> SYSTEM
 *  P  --> Public (enthaelt nur links (name.slnk -> content: filelocation))
 *  [UUID]
 *   [schemtyp]
 *    [name].[schemformat]
 */
public class SchemCmd extends AsyncUserCmd {
	private final String[] a; private final User u; private final Player p;
	public SchemCmd(String[] a1,User u1,Player p1){
		a=a1; u=u1; p=p1;
	}

	@Override public Runnable get(String[] a,User u,Player p){
		return new SchemCmd(a,u,p);
	}

	public SchemCmd(){
		a=null; u=null; p=null;
	}

	private String format="jsv2iz";
	private String klasse="schem";
	private String name  ="";
	private boolean dta;
	@Override public void run(){
		if(a.length<1){
			Msg.missArg(u,"Edit",p); return;
		}
		switch(a[0].toLowerCase()){
		case "save":
		case "s": {
			String  klasse="schem";
			boolean ovr   =false;
			if(a.length<2){
				Msg.missArg(u,"Edit",p); return;
			}
			boolean pub=false;
			if(a.length>2)
				for(int i=2; i<a.length; i++)
					switch(a[i].toLowerCase()){
					case "-f":
					case "-format":
						if(a.length<++i){
							Msg.missArg(u,"Edit",p); return;
						}
						format=a[++i]; continue;

					case "-o":
					case "-override": ovr=true; continue;

					case "-t":
					case "-typ":
						if(a.length<++i){
							Msg.missArg(u,"Edit",p); return;
						}
						klasse=a[++i]; continue;

					case "-public":
					case "-communism":
					case "-common":
					case "-pub":
					case "-c": pub=true; continue;

					default: new Msg(u,WGC._PREFIX_2_Edit).b("Unknown Argument").a(p); return;
					}
			SchemFormat sf;
			name=a[1];
			int           z;
			final Pattern ptn=Pattern.compile("[~#@*+%{}<>\\[\\]|'\\^§!,]");
			if((z=name.indexOf('/'))>0){
				klasse=name.substring(0,z-1); name=name.substring(z);
				if(ptn.matcher(klasse).find()){
					new Msg(u,WGC._PREFIX_2_Edit).b("Illegal schem class.").a(p); return;
				}
			}
			if((z=name.indexOf('.'))>0){
				format=name.substring(z+1); name=name.substring(0,z);
				if(ptn.matcher(format).find()){
					new Msg(u,WGC._PREFIX_2_Edit).b("Illegal schem name.").a(p); return;
				}
			}
			if(ptn.matcher(name).find()||name.length()<1){
				new Msg(u,WGC._PREFIX_2_Edit).b("Illegal schem format.").a(p); return;
			}
			switch(format.toLowerCase()){
			case "jsv2iz": name+=".jsv2iz"; sf=new SV2iz(); break;

			case "jsv2i":
			case "sv2i": sf=new SV2i(); name+=".jsv2i"; break;

			case "jsv2":
			case "sv2": sf=new SV2(); name+=".jsv2"; break;

			default: new Msg(u,WGC._PREFIX_2_Edit).b("Unknown schem format.").a(p); return;
			}

			final File f=new File(WGC.dataFolder+"/schem/"+p.getUniqueId().toString()+"/"+klasse+"/"+name);
			if(f.exists()){
				if(!ovr){
					new Msg(u,WGC._PREFIX_2_Edit).b("Schem already exists").a(p); return;
				}
			}
			else{
				new File(WGC.dataFolder+"/schem/"+p.getUniqueId().toString()+"/"+klasse+"/").mkdirs();
				try{f.createNewFile();}catch(final IOException e){new Msg(u,WGC._PREFIX_2_Edit).e("File creation failed").a(p); Bukkit.getLogger().log(Level.SEVERE,"UNABLE TO CREATE FILE AT: "+f.getAbsolutePath()); return;}
			}

			sf.save(f,u.cbv2.getAndWait().dupe());
			new Msg(u,WGC._PREFIX_2_Edit).a("Schem saved.").a(p);
			if(pub) setC(f,true);
			return;
		}

		case "load":
		case "l": {
			boolean pub  =false,       //force pub schem..
				store=true;        //save to clipboard
			Block bp     =null;
			if(a.length<2){
				Msg.missArg(u,"Edit",p); return;
			}
			//TODO parse args
			//  if paste=true: set bp to loc
			if(a.length>2)
				for(int i=2; i<a.length; i++)
					switch(a[i].toLowerCase()){
					case "-p":
					case "-paste": bp=p.getLocation().getBlock(); continue;

					case "-po":
					case "-pasteonly": bp=p.getLocation().getBlock(); store=false; continue;

					case "-public":
					case "-communism":
					case "-common":
					case "-pub":
					case "-c": pub=true; continue;

					default: new Msg(u,WGC._PREFIX_2_Edit).b("Unknown Argument").a(p); return;
					}
			File f=null;
			if(!pub)
				if((f=parsePrivSchem(a[1]))==null){
					if(dta){
						new Msg(u,WGC._PREFIX_2_Edit).b("Too many search results - use /(schem search () or the full name").a(p); return;
					}
					new Msg(u,WGC._PREFIX_2_Edit).b("Schem not found.").a(p); return;
				}
			if(f==null)
				if((f=parsePubSchem(a[1]))==null){
					if(dta){
						new Msg(u,WGC._PREFIX_2_Edit).b("Too many results - use /(schem search () or the full name").a(p); return;
					}
					new Msg(u,WGC._PREFIX_2_Edit).b("Schem not found.").a(p); return;
				}
			final Clipboard cb=SchemFormat.parseAndLoad(f);
			if(cb==null){
				new Msg(u,WGC._PREFIX_2_Edit).e("Unable to load Schem.").a(p); return;
			}
			if(store){
				u.cbv2.sheduleSet(cb);
				new Msg(u,WGC._PREFIX_2_Edit).a("Schem loaded.").a(p);
			}
			if(bp==null) return;

			new AsyncPaste4b(bp.getWorld(),new BigCoord(bp),u,cb).run();
			return;
		}

		case "list":
		case "li":
		case "dir": {
			//TODO pub folder...
			//TODO schemformat filter
			//TODO schemtyp filter
			//TODO cache (?)
			return;
		}

		case "del": {
			//TODO wenn in mehr als 1 klasse existent fragen nach klasse/schemname
			//TODO wenn in mehr als 1 schemformat danach fragen
			//TODO pub folder beachten
			return;
		}

		case "search":
		case "se": {
			//TODO pub folder...
			//TODO schemformat filter
			//TODO schemtyp filter
			//TODO cache (?)
			String name  =a[1];
			String klasse=null;
			String format=null;
			int    z;
			if((z=name.indexOf('/'))>0){
				klasse=name.substring(0,z); name=name.substring(z);
			}
			if((z=name.indexOf('.'))>0){
				format=name.substring(z+1); name=name.substring(0,z);
			}
			z=0;
			final Msg jm=new Msg(u).a("######## Search Results #######");
			if(klasse==null){
				File f=new File(WGC.dataFolder+"/schem/P/");
				if(f.exists())
					for(final File d:f.listFiles()){
						if(d.isFile()) continue;
						for(final File i:d.listFiles()){
							if(i.isDirectory()) continue;
							String nm=i.getName(),ed="";
							if((z=nm.indexOf('.'))>0){
								ed=nm.substring(z+1); nm=nm.substring(0,z).toLowerCase();
							}
							if(!nm.contains(name)) continue;
							if(format!=null&&format!=ed) continue;
							jm.aC("\n§0[§3"+d.getName()+"§0]§2 (C)§2"+nm,RUN,"/(schem l "+d.getName()+"/"+i.getName()+" -c","load");
						}
					}
				//TODO priv
				f=new File(WGC.dataFolder+"/schem/"+p.getUniqueId().toString()+"/");
				if(f.exists())
					for(final File d:f.listFiles()){
						if(d.isFile()) continue;
						for(final File i:d.listFiles()){
							if(i.isDirectory()) continue;
							String nm=i.getName(),ed="";
							if((z=nm.indexOf('.'))>0){
								ed=nm.substring(0,z-1).toLowerCase(); nm=nm.substring(z);
							}
							if(!nm.contains(name)) continue;
							if(format!=null&&format!=ed) continue;
							jm.aC("\n§0[§3"+d.getName()+"§0] §1"+nm,RUN,"/(schem l "+d.getName()+"/"+i.getName()+" -c","load");
						}
					}
				jm.a(p);
				return;
			}
			//TODO w class
			return;
		}

		case "setc":
		case "setcommon": {
			if(a.length<3){
				Msg.missArg(u,"Edit",p); return;
			}
			File f;
			if((f=parsePrivSchem(a[1]))==null){
				new Msg(u,WGC._PREFIX_2_Edit).b("Schem not found").a(p); return;
			}
			if(a[2].equalsIgnoreCase("true")) new Msg(u,WGC._PREFIX_2_Edit).a("Schem is now public.").a(p);
			else new Msg(u,WGC._PREFIX_2_Edit).a("Schem is now private.").a(p);
			//TODO set f public
			f.exists();
			return;
		}
		}
	}

	/*@SuppressWarnings("unused")
	 * private File parsePubSchem(String in){
	 *      String name=in;
	 *      String klasse="";
	 *      String format="";
	 *      int z;
	 *      if((z=name.indexOf('/'))>0){klasse=name.substring(0,z-1);name=name.substring(z);}
	 *      if((z=name.indexOf('.'))>0){format=name.substring(0,z-1);name=name.substring(z);}
	 *      z=0;
	 *      int absergs=0;
	 *      File out=null;
	 *      if(klasse==""){
	 *              File f=new File(WGC.dataFolder+"/"+p.getUniqueId().toString()+"/");
	 *              if(!f.exists())return null;
	 *              for(File d:f.listFiles()){
	 *                      if(d.isFile())continue;
	 *                      for(File i:d.listFiles()){
	 *                              if(i.isDirectory())continue;
	 *                              if(i.getName()==name+"."+format){out=i;absergs++;klasse=d.getName();continue;}
	 *                              if(absergs==0)if(i.getName().startsWith(name)){z++;out=i;klasse=d.getName();}
	 *                      }
	 *              }
	 *      }else{
	 *              File f=new File(WGC.dataFolder+"/"+p.getUniqueId().toString()+"/");
	 *              if(!f.exists())return null;
	 *              for(File i:f.listFiles()){
	 *                      if(i.isDirectory())continue;
	 *                      if(i.getName()==name+"."+format){out=i;absergs++;continue;}
	 *                      if(absergs==0)if(i.getName().startsWith(name)){z++;out=i;}
	 *              }
	 *      }
	 *      if(absergs==1)return out;
	 *      if(absergs==0&&z==1)return out;
	 *      return null;
	 * }*/
	/**
	 * uses priv vars
	 * @param in whatever the typed
	 * @return
	 */
	private File parsePubSchem(String in){
		dta   =false;
		name  =in;
		klasse=null;
		format="";
		int z;

		if((z=name.indexOf('/'))>0){
			klasse=name.substring(0,z); name=name.substring(z);
		}
		if((z=name.indexOf('.'))>0){
			format=name.substring(z+1); name=name.substring(0,z);
		}
		z=0;
		int  absergs=0;
		File out    =null;

		if(klasse==null){
			final File f=new File(WGC.dataFolder+"/schem/P/");
			if(!f.exists()) return null;

			for(final File d:f.listFiles()){
				if(d.isFile()) continue;
				for(final File i:d.listFiles()){
					if(i.isDirectory()) continue;
					if(i.getName()==name+"."+format){
						out=i; absergs++; continue;
					}
					if(absergs==0) if(i.getName().startsWith(name)){
							z++; out=i;
						}
				}
			}
		}
		else{
			final File f=new File(WGC.dataFolder+"/schem/P/"+klasse+"/");
			if(!f.exists()) return null;

			for(final File i:f.listFiles()){
				if(i.isDirectory()) continue;
				if(i.getName()==name+"."+format){
					out=i; absergs++; continue;
				}
				if(absergs==0) if(i.getName().startsWith(name)){
						z++; out=i;
					}
			}
		}
		if(absergs==1) return out;

		if(absergs==0&&z==1) return out;

		if(z+absergs>1) dta=true;
		return null;
	}

	/**
	 * uses priv vars
	 * @param in whatever the typed
	 * @return
	 */
	private File parsePrivSchem(String in){
		dta   =false;
		name  =in;
		klasse=null;
		format="";
		int z;

		if((z=name.indexOf('/'))>0){
			klasse=name.substring(0,z); name=name.substring(z);
		}
		if((z=name.indexOf('.'))>0){
			format=name.substring(z+1); name=name.substring(0,z);
		}
		z=0;
		int  absergs=0;
		File out    =null;

		if(klasse==null){
			final File f=new File(WGC.dataFolder+"/schem/"+p.getUniqueId().toString()+"/");
			if(!f.exists()) return null;

			for(final File d:f.listFiles()){
				if(d.isFile()) continue;
				for(final File i:d.listFiles()){
					if(i.isDirectory()) continue;
					if(i.getName()==name+"."+format){
						out=i; absergs++; continue;
					}
					if(absergs==0) if(i.getName().startsWith(name)){
							z++; out=i;
						}
				}
			}
		}
		else{
			final File f=new File(WGC.dataFolder+"/schem/"+p.getUniqueId().toString()+"/"+klasse+"/");
			if(!f.exists()) return null;

			for(final File i:f.listFiles()){
				if(i.isDirectory()) continue;
				if(i.getName()==name+"."+format){
					out=i; absergs++; continue;
				}
				if(absergs==0) if(i.getName().startsWith(name)){
						z++; out=i;
					}
			}
		}
		if(absergs==1) return out;

		if(absergs==0&&z==1) return out;

		if(z+absergs>1) dta=true;
		return null;
	}

	/**
	 * takes infos from private vars !
	 * @return new state
	 */
	private boolean setC(File f,boolean c){
		final String fp=f.getPath();

		f=new File(WGC.dataFolder+"/schem/P/"+klasse+"/"+a[1]+".lnk");
		if(c){
			if(f.exists()){
				try{if(FileWriter.readStrV2(f)==fp) return true; }catch(final IOException e){}
				new Msg(u,WGC._PREFIX_2_Edit).b("An public schematic with this name already exist - please rename your schem and try again.").a(p);
				return false;
			}
			try{
				if(!f.exists()) f.createNewFile();
				FileWriter.writeStrV2(f,fp);
				return true;
			}catch(final IOException e){}
			return false;
		}
		else{
			if(!f.exists()) return false;

			try{if(FileWriter.readStrV2(f)==fp) f.delete(); }catch(final IOException e){}
			return false;
		}
	}
}
