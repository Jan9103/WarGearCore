/*
 * Copyright 2021 Jan9103 (@jan9103:matrix.org Jan9103.wargear@protonmail.com)
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software,
 * and to permit third-parties to whom the Software is furnished to do so, all
 * subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR
 * ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
package de.jan9103.wargearcore.worldedit.clip;

import org.bukkit.Material;
import org.bukkit.block.Block;
import org.bukkit.block.Sign;
import org.bukkit.block.data.BlockData;

public class SignClipBlock extends ClipboardBlock {
	private static final long serialVersionUID=-357254077963245812L;
	private final BlockData d;
	private final String[] txt;
	public SignClipBlock(BlockData data,String[] text){
		d  =data;
		txt=text;
	}

	public SignClipBlock(Material mat,BlockData data,String[] text){
		d  =data;
		txt=text;
	}

	public SignClipBlock(Material mat,BlockData data,String[] text,boolean water){
		d=data; txt=text;
	}

	public SignClipBlock(Block b){
		final Sign s=(Sign)b.getState();

		d  =s.getBlockData();
		txt=s.getLines();
	}

	@Override public void blockPaste(Block b){
		b.setBlockData(d,false);
		final Sign s=(Sign)b.getState();

		for(int i=0; i<txt.length; i++) s.setLine(i,txt[i]);
		b.getState().update(false,false);
	}

	public String[] getTxt(){
		return txt;
	}

	@Override public Material getM(){
		return d.getMaterial();
	}

	@Override public BlockData getD(){
		return d;
	}

	public ClipBlockWD unSign(){
		return new ClipBlockWD(d);
	}

	public ClipBlockND delData(){
		return new ClipBlockND(d.getMaterial());
	}

	@Override public ClipboardBlock copy(){
		return new SignClipBlock(d,txt);
	}

	@Override public boolean compare(ClipboardBlock b){
		if(!(b instanceof SignClipBlock)) return false;

		if(b.getD().matches(d)) return false;

		final SignClipBlock a=(SignClipBlock)b;

		if(a.txt.length!=txt.length) return false;

		for(int i=0; i<txt.length; i++)
			if(a.txt[i]!=txt[i]) return false;

		return true;
	}
}
