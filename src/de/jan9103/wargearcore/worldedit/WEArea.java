/*
 * Copyright 2021 Jan9103 (@jan9103:matrix.org Jan9103.wargear@protonmail.com)
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software,
 * and to permit third-parties to whom the Software is furnished to do so, all
 * subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR
 * ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
package de.jan9103.wargearcore.worldedit;

import org.bukkit.Location;
import org.bukkit.World;
import org.bukkit.block.Block;
import org.bukkit.block.BlockFace;

import de.jan9103.wargearcore.coordSys.BigArea;
import de.jan9103.wargearcore.coordSys.BigCoord;

public class WEArea {
	public BigCoord a,b;
	public World w;
	public WEArea(){
	}

	public WEArea(BigArea d,World e){
		a=d.high;
		b=d.low;
		w=e;
	}

	public boolean isset(){
		return a!=null&&b!=null&&w!=null;
	}

	public void expand(BlockFace f,int i){
		switch(f){
		case DOWN:
			if(a.y<b.y) a=new BigCoord(a.x,Integer.max(w.getMinHeight(),a.y-i),a.z);
			else b=new BigCoord(b.x,Integer.max(w.getMinHeight(),b.y-i),b.z);
			return;

		case EAST:
			if(a.x>b.x) a=new BigCoord(a.x+1,a.y,a.z);
			else b=new BigCoord(b.x+1,b.y,b.z);
			return;

		case NORTH:
			if(a.z<b.z) a=new BigCoord(a.x,a.y,a.z-i);
			else b=new BigCoord(b.x,b.y,b.z-i);
			return;

		case SOUTH:
			if(a.z>b.z) a=new BigCoord(a.x,a.y,a.z+i);
			else b=new BigCoord(b.x,b.y,b.z+i);
			return;

		case UP:
			if(a.y>b.y) a=new BigCoord(a.x,Integer.min(w.getMaxHeight(),a.y+i),a.z);
			else b=new BigCoord(b.x,Integer.min(w.getMaxHeight(),b.y+i),b.z);
			return;

		case WEST:
			if(a.x<b.x) a=new BigCoord(a.x-i,a.y,a.z);
			else b=new BigCoord(b.x-i,b.y,b.z);
			return;

		default:
			return;
		}
	}

	public int size(){
		return Math.abs((a.x-b.x)*(a.y-b.y)*(a.z-b.z));
	}

	public void setA(Location l){
		w=l.getWorld();
		if(l.getBlockY()>w.getMaxHeight())
			a=new BigCoord(l.getBlockX(),w.getMaxHeight(),l.getBlockZ());
		else if(l.getBlockY()<w.getMinHeight())
			a=new BigCoord(l.getBlockX(),w.getMinHeight(),l.getBlockZ());
		else
			a=new BigCoord(l.getBlockX(),l.getBlockY(),l.getBlockZ());
	}

	public void setB(Location l){
		w=l.getWorld();
		if(l.getBlockY()>w.getMaxHeight())
			b=new BigCoord(l.getBlockX(),w.getMaxHeight(),l.getBlockZ());
		else if(l.getBlockY()<w.getMinHeight())
			b=new BigCoord(l.getBlockX(),w.getMinHeight(),l.getBlockZ());
		else
			b=new BigCoord(l.getBlockX(),l.getBlockY(),l.getBlockZ());
	}

	public void setA(Block b){
		w=b.getWorld();
		if(b.getY()>w.getMaxHeight())
			a=new BigCoord(b.getX(),w.getMaxHeight(),b.getZ());
		else if(b.getY()<w.getMinHeight())
			a=new BigCoord(b.getX(),w.getMinHeight(),b.getZ());
		else
			a=new BigCoord(b.getX(),b.getY(),b.getZ());
	}

	public void setB(Block block){
		w=block.getWorld();
		if(block.getY()>w.getMaxHeight())
			b=new BigCoord(block.getX(),w.getMaxHeight(),block.getZ());
		else if(block.getY()<w.getMinHeight())
			b=new BigCoord(block.getX(),w.getMinHeight(),block.getZ());
		else
			b=new BigCoord(block.getX(),block.getY(),block.getZ());
	}

	public BigArea toBigArea(){
		return new BigArea(a,b);
	}
}
