/*
 * Copyright 2021 Jan9103 (@jan9103:matrix.org Jan9103.wargear@protonmail.com)
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software,
 * and to permit third-parties to whom the Software is furnished to do so, all
 * subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR
 * ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
package de.jan9103.wargearcore.worldedit.editors;

import org.bukkit.Material;
import org.bukkit.World;
import org.bukkit.block.BlockFace;

import de.jan9103.wargearcore.coordSys.BigArea;
import de.jan9103.wargearcore.worldedit.editors.async.AsyncSetO;

public class TestblockCreator {
	public static AsyncMultiEditor a(World w,BigArea a,BlockFace dir,WeSender s,Material[] hull,Material tk,Material hMid,Material slab,Material tk_slab){
		final AsyncMultiEditor e=new AsyncMultiEditor(s);

		e.a(new AsyncSetO(w,a.cutTb(),Material.END_STONE,false,e))
		.a(new AsyncSetO(w,a.cutOutter().upperPart(),slab,false,e));
		WallCreator.add(e,w,a,hull,false);
		WallCreator.add(e,w,a.midEbene(),Material.RED_WOOL,false);
		switch(dir){
		case EAST:
			if(a.xSize()<4) break;
			e.a(new AsyncSetO(w,a.xCutHigh(Integer.min(a.xSize()/4,10)).cutUpperY().cutOuterZ(),tk,false,e));
			e.a(new AsyncSetO(w,a.xCutHigh(Integer.min(a.xSize()/4,10)).toSmall().toBigArea(a.high.y).cutOuterZ(),tk_slab,false,e));
			break;

		case NORTH:
			if(a.zSize()<4) break;
			e.a(new AsyncSetO(w,a.zCutLow(Integer.min(a.zSize()/4,10)).cutUpperY().cutOuterX(),tk,false,e));
			e.a(new AsyncSetO(w,a.zCutLow(Integer.min(a.zSize()/4,10)).toSmall().toBigArea(a.high.y).cutOuterX(),tk_slab,false,e));
			break;

		case WEST:
			if(a.xSize()<4) break;
			e.a(new AsyncSetO(w,a.xCutLow(Integer.min(a.xSize()/4,10)).cutUpperY().cutOuterZ(),tk,false,e));
			e.a(new AsyncSetO(w,a.xCutLow(Integer.min(a.xSize()/4,10)).toSmall().toBigArea(a.high.y).cutOuterZ(),tk_slab,false,e));
			break;

		default:
			if(a.zSize()<4) break;
			e.a(new AsyncSetO(w,a.zCutHigh(Integer.min(a.zSize()/4,10)).cutUpperY().cutOuterX(),tk,false,e));
			e.a(new AsyncSetO(w,a.zCutHigh(Integer.min(a.zSize()/4,10)).toSmall().toBigArea(a.high.y).cutOuterX(),tk_slab,false,e));
			break;
		}
		return e;
	}

	public static AsyncMultiEditor a(World w,BigArea a,BlockFace dir,WeSender s){
		return a(w,a,dir,s,new Material[] {Material.GREEN_WOOL,Material.LIME_WOOL},Material.IRON_BLOCK,Material.RED_WOOL,Material.SMOOTH_STONE_SLAB,Material.BRICK_SLAB);
	}

	public TestblockCreator(World w,BigArea a,BlockFace dir,WeSender s){
		a(w,a,dir,s).exe();
	}
}
