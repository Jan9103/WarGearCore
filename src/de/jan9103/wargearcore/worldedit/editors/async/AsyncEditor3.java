/*
 * Copyright 2021 Jan9103 (@jan9103:matrix.org Jan9103.wargear@protonmail.com)
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software,
 * and to permit third-parties to whom the Software is furnished to do so, all
 * subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR
 * ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
package de.jan9103.wargearcore.worldedit.editors.async;

import org.bukkit.Bukkit;
import org.bukkit.Chunk;
import org.bukkit.World;

import de.jan9103.wargearcore.WGC;
import de.jan9103.wargearcore.coordSys.BigArea;
import de.jan9103.wargearcore.util.TPS;
import de.jan9103.wargearcore.worldedit.ChunkLoader;
import de.jan9103.wargearcore.worldedit.editors.StackWeAction;
import de.jan9103.wargearcore.worldedit.editors.Undo;
import de.jan9103.wargearcore.worldedit.editors.WeSender;

public abstract class AsyncEditor3 extends StackWeAction implements Runnable {
	public abstract void exe(int xl,int xh,int yl,int yh,int zl,int zh);

	protected int xl,xh,yl,yh,zl,zh;
	public final World w;
	public final boolean u;
	@Override public void a(){
		if(b()) Bukkit.getScheduler().runTaskLater(WGC.wgc,this,1);
	}

	@Override public void cancel(){
		goon=false;
	}

	public AsyncEditor3(World we,BigArea ar,boolean upd,WeSender se){
		super(se);
		u   =upd; w=we;
		xl  =ar.low.x; xh=ar.high.x; yl=ar.low.y; yh=ar.high.y; zl=ar.low.z; zh=ar.high.z;
		x   =xl; z=zl; y=yl;
		cxl =xl; czl=zl; cxh=Integer.min(xh,x+15); czh=Integer.min(zh,z+15);
		chun=w.getChunkAt(x>>4,z>>4);
	}

	public boolean b(){
		return true;
	}

	@Override public void run(){
		if(TPS.tps<5&&goon){
			Bukkit.getScheduler().runTaskLater(WGC.wgc,this,3); return;
		}
		final Long stop=System.nanoTime()+(/*TPS.nO+(TPS.d0>>1)*/ 35000000+TPS.d0>>1);//50000000 = 1tick

		//TPS.nt();//TODO calc tick end
		while(System.nanoTime()<stop&&goon){
			ChunkLoader.add(chun);
			exe(cxl,cxh,y,Integer.min(yh,y+15),czl,czh);
			if((y+=16)>yh){
				ChunkLoader.rem(chun);
				if((z+=16)>zh){
					if((x+=16)>xh){
						done(); return;
					}
					z  =zl; cxl=x;
					cxh=Integer.min(xh,x+15);
				}
				czl =z; czh=Integer.min(zh,z+15); y=yl;
				chun=w.getChunkAt(x>>4,z>>4);
			}
		}
		if(!goon){
			cancelled(); return;
		}
		Bukkit.getScheduler().runTaskLater(WGC.wgc,this,1);
	}

	protected int x,z,y,cxl,cxh,czl,czh;
	private boolean goon=true;
	protected Chunk chun=null;
	@Override public void prepUndo(Undo i){
		i.sA(xl,xh,yl,yh,zl,zh,w);
	}

	@Override public int[] area(){
		return new int[] {xl,xh,yl,yh,zl,zh};
	}
}
