/*
 * Copyright 2021 Jan9103 (@jan9103:matrix.org Jan9103.wargear@protonmail.com)
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software,
 * and to permit third-parties to whom the Software is furnished to do so, all
 * subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR
 * ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
package de.jan9103.wargearcore.worldedit.schem;

import de.jan9103.wargearcore.User;
import de.jan9103.wargearcore.WGC;

import java.io.File;
import java.util.ArrayList;

public class SchemFileFinder {
	public static void userSearch(User u,String search,ArrayList<File>o){
		String name  =search;
		String klasse=null;
		String format=null;
		int    z;

		if((z=name.indexOf('/'))>0){
			klasse=name.substring(0,z); name=name.substring(z);
		}
		if((z=name.indexOf('.'))>0){
			format=name.substring(z+1); name=name.substring(0,z);
		}
		multiPrivSearch(u,name,klasse,format,o);
		multiPubSearch(name,klasse,format,o);
	}

	public static File userMatch(User u,String search){
		String name  =search;
		String klasse=null;
		String format=null;
		int    z;

		if((z=name.indexOf('/'))>0){
			klasse=name.substring(0,z); name=name.substring(z);
		}
		if((z=name.indexOf('.'))>0){
			format=name.substring(z+1); name=name.substring(0,z);
		}
		File f=exactPrivMatch(u,name,klasse,format);

		if(f!=null) return f;

		f=exactPubMatch(name,klasse,format);
		if(f!=null) return f;

		ArrayList<File>o=new ArrayList<>();

		multiPrivSearch(u,name,klasse,format,o);
		if(o.size()==1) return o.get(1);

		if(o.size()==0){
			multiPubSearch(name,klasse,format,o);
			if(o.size()==1) return o.get(0);
		}
		return null;
	}

	public static File exactPrivMatch(User u,String name,String klasse,String format){
		return exactMatchInFolder(new File(WGC.dataFolder+"/schem/"+u.uuid.toString()+"/"),name,klasse,format);
	}

	public static File exactPubMatch(String name,String klasse,String format){
		return exactMatchInFolder(new File(WGC.dataFolder+"/schem/P/"),name,klasse,format);
	}

	public static File exactMatchInFolder(File folder,String name,String klasse,String format){
		if(klasse==null){
			if(folder.exists())
				for(final File d: folder.listFiles())
					if(d.isDirectory())
						return exactMatchInDir(d,name,format);
		}
		else{
			folder=new File(folder+"/"+klasse);
			if(folder.exists()&&folder.isDirectory())
				return exactMatchInDir(folder,name,format);
		}
		return null;
	}

	public static File exactMatchInDir(File d,String name,String format){
		int z;

		for(final File i: d.listFiles()){
			if(i.isDirectory()) continue;
			String nm=i.getName(),ed="";
			if((z=nm.indexOf('.'))>0){
				ed=nm.substring(0,z-1).toLowerCase();
				nm=nm.substring(z);
			}
			if(!name.equalsIgnoreCase(nm)) continue;
			if(format!=null&&!format.equalsIgnoreCase(ed)) continue;
			return i;
		}
		return null;
	}

	public static void multiPrivSearch(User u,String name,String klasse,String format,ArrayList<File>out){
		multiSearchInFolder(new File(WGC.dataFolder+"/schem/"+u.uuid.toString()+"/"),name,klasse,format,out);
	}

	public static void multiPubSearch(String name,String klasse,String format,ArrayList<File>out){
		multiSearchInFolder(new File(WGC.dataFolder+"/schem/P/"),name,klasse,format,out);
	}

	public static void multiSearchInFolder(File folder,String name,String klasse,String format,ArrayList<File>out){
		if(klasse==null){
			if(folder.exists())
				for(final File d: folder.listFiles())
					if(d.isDirectory())
						matchInDir(d,name,format,out);
		}
		else{
			folder=new File(folder+"/"+klasse);
			if(folder.exists()&&folder.isDirectory())
				matchInDir(folder,name,format,out);
		}
	}

	private static void matchInDir(File d,String name,String format,ArrayList<File>out){
		int z;

		for(final File i: d.listFiles()){
			if(i.isDirectory()) continue;
			String nm=i.getName(),ed="";
			if((z=nm.indexOf('.'))>0){
				ed=nm.substring(0,z-1).toLowerCase();
				nm=nm.substring(z);
			}
			if(!nm.contains(name)) continue;
			if(format!=null&&!format.equalsIgnoreCase(ed)) continue;
			out.add(i);
		}
	}
}
