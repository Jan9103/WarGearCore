/*
 * Copyright 2021 Jan9103 (@jan9103:matrix.org Jan9103.wargear@protonmail.com)
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software,
 * and to permit third-parties to whom the Software is furnished to do so, all
 * subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR
 * ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
package de.jan9103.wargearcore.cmds;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import org.bukkit.Bukkit;
import org.bukkit.command.Command;
import org.bukkit.command.CommandSender;
import org.bukkit.command.TabExecutor;
import org.bukkit.entity.Player;

import de.jan9103.wargearcore.C;
import de.jan9103.wargearcore.LogHandler;
import de.jan9103.wargearcore.User;
import de.jan9103.wargearcore.UserManager;
import de.jan9103.wargearcore.WGC;
import de.jan9103.wargearcore.chat.Msg;
import de.jan9103.wargearcore.util.Encryption;
import de.jan9103.wargearcore.util.WGCAuth;

public class WGCAuthCmd extends UserOnlyCmd implements TabExecutor {
	@Override public void exe(String[] a,User u,Player p){
		if(a.length<1) return;

		switch(a[0].toLowerCase()){
		case "setpw": {
			new Msg(u,WGC._PREFIX_2_Defence).b("Now your password is in the server-log ._.").a(p);
			return;
		}
		}
	}

	@Override public List<String>onTabComplete(final CommandSender s,Command arg1,String arg2,String[] a){
		if(!(s instanceof Player)) return null;

		String           i=WGCAuth.locked.get(s);
		ArrayList<String>o=new ArrayList<>();

		if(i!=null){
			if(a.length==2){
				try{
					String in=Encryption.crypt(((Player)s).getUniqueId().toString(),a[0],true);
					if(in.equalsIgnoreCase(i)){
						WGCAuth.locked.remove(s);
						o.add("_Login Success");
						o.add("strg+a -> del");
						final User u=UserManager.getUser((Player)s);
						new Msg(u,WGC._PREFIX_2_Defence).a("Login success!").d().a("DO NOT RUN THE COMMAND").d().a("otherwise itll show up in the server log").a((Player)s);
						((Player)s).setFallDistance(0);
						((Player)s).setNoDamageTicks(100);
						((Player)s).teleport(u.back);
						Bukkit.getScheduler().runTaskAsynchronously(WGC.wgc,()->{
							final File f=new File(WGC.dataFolder+"/user/"+u.uuid.toString()+".usr");
							if(!f.exists()) try{f.createNewFile();}catch(final IOException e){LogHandler.handleException(e);}
							final C c      =new C(f);
							List<String>ips=c.gjsl("ips");
							if(!ips.contains(((Player)s).getAddress().getAddress().getHostAddress())){
								ips.add(((Player)s).getAddress().getAddress().getHostAddress());
								c.sjsl("ips",ips);
								try{c.save();}catch(final IOException e){LogHandler.handleException(e);}
							}
						});
					}
				}catch(Exception e){o.add("Test failed..");}
			}
			else if(a[0].isEmpty()) o.add("(Password)");
			return o;
		}
		switch(a[0].toLowerCase()){
		case "setpw": {
			if(a.length!=4) break;
			if(a[3].length()>1) break;
			final User u=UserManager.getUser((Player)s);
			if(u.cda>=System.currentTimeMillis()){
				o.add("Password set"); break;
			}
			if(!a[1].equalsIgnoreCase(a[2])){
				new Msg(u,WGC._PREFIX_2_Defence).b("Passwords dont match..").a((Player)s);
				o.add("dosnt match..");
				return o;
			}
			u.cda=System.currentTimeMillis()+10000;
			new Msg(u,WGC._PREFIX_2_Defence).a("Password setting..").d().a("DO NOT RUN THE COMMAND").d().a("otherwise itll show up in the server log").a((Player)s);
			Bukkit.getScheduler().runTaskAsynchronously(WGC.wgc,()->{
					final File f=new File(WGC.dataFolder+"/user/"+u.uuid.toString()+".usr");
					if(!f.exists()) try{f.createNewFile();}catch(final IOException e1){LogHandler.handleException(e1);}
					String encr;
					try{
						encr=Encryption.crypt(u.uuid.toString(),a[2],true);
					}catch(Exception e2){
						LogHandler.handleException(e2);
						new Msg(u,WGC._PREFIX_2_Defence).e("ERROR: failed to encrypt your password.. - Password not saved!").a((Player)s);
						return;
					}
					final C c=new C(f);
					c.s("authpw",encr);
					try{c.save();
					    new Msg(u,WGC._PREFIX_2_Defence).a("new Password saved.").d().a("please write it down somewhere to avoid forgetting it.").a((Player)s);}catch(IOException e1){LogHandler.handleException(e1); new Msg(u,WGC._PREFIX_2_Defence).e("Unable to save Config");}
				});
			break;
		}

		case "": o.add("setpw"); break;
		}
		return o;
	}
}
