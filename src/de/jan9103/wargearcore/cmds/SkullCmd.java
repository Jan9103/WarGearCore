/*
 * Copyright 2021 Jan9103 (@jan9103:matrix.org Jan9103.wargear@protonmail.com)
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software,
 * and to permit third-parties to whom the Software is furnished to do so, all
 * subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR
 * ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
package de.jan9103.wargearcore.cmds;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.UUID;

import org.bukkit.Material;
import org.bukkit.entity.Player;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.SkullMeta;

import com.mojang.authlib.GameProfile;
import com.mojang.authlib.properties.Property;

import de.jan9103.wargearcore.LogHandler;
import de.jan9103.wargearcore.User;
import de.jan9103.wargearcore.chat.Msg;
import de.jan9103.wargearcore.util.UUIDconv;

public class SkullCmd extends AsyncUserCmd {
	private final String[] a; private final User u; private final Player p;
	public SkullCmd(String[] a1,User u1,Player p1){
		a=a1; u=u1; p=p1;
	}

	@Override public Runnable get(String[] a,User u,Player p){
		return new SkullCmd(a,u,p);
	}

	public SkullCmd(){
		a=null; u=null; p=null;
	}

	@Override public void run(){
		//TODO perm
		UUID id;

		if(a.length<1) id=p.getUniqueId();
		else id=UUIDconv.id(a[0]);
		if(id==null){
			new Msg(u).b("Invalid target.").a(p); return;
		}
		final GameProfile profile=new GameProfile(id,a[0]);
		final ItemStack   s      =new ItemStack(Material.PLAYER_HEAD,1);
		final SkullMeta   m      =(SkullMeta)s.getItemMeta();

		m.setDisplayName(a[0]+"'s skull");
		try {
			final Method mtd=m.getClass().getDeclaredMethod("setProfile",GameProfile.class);
			mtd.setAccessible(true);
			mtd.invoke(m,profile);
		} catch(IllegalAccessException|InvocationTargetException|NoSuchMethodException ex){new Msg(u).b("Invalid target.").a(p); return;}
		s.setItemMeta(m);
		p.getInventory().addItem(s);
		new Msg(u).a("Skull recieved.").a(p);
	}

	/**
	 * @author _Tango
	 * https://bukkit.org/threads/set-player-head-to-a-texture.485477/
	 */
	public ItemStack getCustomSkull(String url){
		final ItemStack head=new ItemStack(Material.PLAYER_HEAD);

		if(url.isEmpty()) return head;

		final SkullMeta   skullMeta=(SkullMeta)head.getItemMeta();
		final GameProfile profile  =new GameProfile(UUID.randomUUID(),null);

		profile.getProperties().put("textures",new Property("textures",url));
		try{
			final Method mtd=skullMeta.getClass().getDeclaredMethod("setProfile",GameProfile.class);
			mtd.setAccessible(true);
			mtd.invoke(skullMeta,profile);
		}catch(IllegalAccessException|InvocationTargetException|NoSuchMethodException ex){LogHandler.handleException(ex);}
		head.setItemMeta(skullMeta);
		return head;
	}
}
