/*
 * Copyright 2021 Jan9103 (@jan9103:matrix.org Jan9103.wargear@protonmail.com)
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software,
 * and to permit third-parties to whom the Software is furnished to do so, all
 * subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR
 * ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
package de.jan9103.wargearcore.cmds;

import java.util.HashSet;

import org.bukkit.Sound;
import org.bukkit.entity.Player;

import de.jan9103.wargearcore.SoundKategory;
import de.jan9103.wargearcore.User;
import de.jan9103.wargearcore.chat.Msg;

public class TimerCmd extends UserOnlyCmd {
	public static HashSet<Timer>t=new HashSet<>();
	@Override public void exe(String[] a,User u,Player p){
		if(a.length<1){
			Msg.missArg(u,"Core",p); return;
		}
		Timer e=null;

		for(final Timer i:t){
			if(i.u!=u) continue; e=i; break;
		}
		switch(a[0].toLowerCase()){
		case "start":
			if(e!=null){
				new Msg(u).b("Timer is alreaddy running.").a(p); return;
			}
			if(a.length<2){
				Msg.missArg(u,"Core",p); return;
			}
			final int m=Integer.parseInt(a[1]);
			if(m<1){
				new Msg(u).b("Invalid argument.").a(p); return;
			}
			new Timer(u,m);
			new Msg(u).a("Timer started ("+m+"min).").a(p);
			return;

		case "stop":
			if(e==null){
				new Msg(u).b("There's no timer.").a(p); return;
			}
			e.stopped=true;
			if(e.isAlive()) e.interrupt();
			t.remove(e);
			return;

		default: new Msg(u).b("Only start and stop exist..").a(p); return;
		}
	}

	public class Timer extends Thread {
		public final User u;
		public boolean stopped=false;
		private int min;
		public Timer(User user,int mins){
			t.add(this);
			min=mins;
			u  =user;
			if(mins<1){
				stopped=true; return;
			}
			start();
		}

		@Override public void run(){
			try{
				Thread.sleep(min*60000);
				if(stopped) return;

				stopped=true;
				new Msg(u).c("Timer ended.").a(u);
				u.playSound(SoundKategory.TIMER,Sound.ENTITY_ENDER_DRAGON_GROWL,30);
				TimerCmd.t.remove(this);
			}catch(final InterruptedException e){new Msg(u).a("Timer cancelled.").a(u);}
		}
	}
}
