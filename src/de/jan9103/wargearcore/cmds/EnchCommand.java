/*
 * Copyright 2021 Jan9103 (@jan9103:matrix.org Jan9103.wargear@protonmail.com)
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software,
 * and to permit third-parties to whom the Software is furnished to do so, all
 * subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR
 * ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
package de.jan9103.wargearcore.cmds;

import org.bukkit.Material;
import org.bukkit.enchantments.Enchantment;
import org.bukkit.entity.Player;
import org.bukkit.inventory.ItemStack;

import de.jan9103.wargearcore.User;
import de.jan9103.wargearcore.chat.Msg;

public class EnchCommand extends UserOnlyCmd {
	@Override public void exe(final String[] c,User u,Player p){
		if(c.length<2){
			new Msg(u).b("Syntax: /ench [enchantment] [level]").a(p); return;
		}
		final Enchantment k=parseEnchantment(c[0]);

		if(k==null){
			new Msg(u).b("Unknown Enchantment '"+c[0]+"'.").a(p); return;
		}
		final int lv=Integer.parseInt(c[1]);

		if(lv<1){
			new Msg(u).b("Please enter a Valid Level").a(p); return;
		}
		final ItemStack item=p.getInventory().getItemInMainHand();

		if(item==null||item.getType()==Material.AIR){
			new Msg(u).b("Please select a valid Item in your Inventory").a(p); return;
		}
		item.addUnsafeEnchantment(k,lv);
		p.getInventory().setItemInMainHand(item);
		//p.playSound(p.getLocation(),Sound.BLOCK_ANVIL_USE,Global.itemSound,1);
		new Msg(u).a("added enchantment '").c(k.getKey().toString()).a("' level ").c(lv+"").a(" to ").c(item.getType().toString()).a(".").a(p);
	}

	public static Enchantment parseEnchantment(final String a){
		switch(a.replace(" ","").toLowerCase()){
		case "power": return Enchantment.ARROW_DAMAGE;

		case "flame": return Enchantment.ARROW_FIRE;

		case "infinity": return Enchantment.ARROW_INFINITE;

		case "punch": return Enchantment.ARROW_KNOCKBACK;

		case "binding": return Enchantment.BINDING_CURSE;

		case "channeling": return Enchantment.CHANNELING;

		case "sharpness": return Enchantment.DAMAGE_ALL;

		case "baneofarthropods": return Enchantment.DAMAGE_ARTHROPODS;

		case "smite": return Enchantment.DAMAGE_UNDEAD;

		case "depthstrider": return Enchantment.DEPTH_STRIDER;

		case "efficency": return Enchantment.DIG_SPEED;

		case "unbreaking": return Enchantment.DURABILITY;

		case "fireaspect": return Enchantment.FIRE_ASPECT;

		case "frostwalker": return Enchantment.FROST_WALKER;

		case "impaling": return Enchantment.IMPALING;

		case "knockback": return Enchantment.KNOCKBACK;

		case "fortune": return Enchantment.LOOT_BONUS_BLOCKS;

		case "looting": return Enchantment.LOOT_BONUS_MOBS;

		case "loyalty": return Enchantment.LOYALTY;

		case "luckofthesea": return Enchantment.LUCK;

		case "lure": return Enchantment.LURE;

		case "mending": return Enchantment.MENDING;

		case "multishot": return Enchantment.MULTISHOT;

		case "respiration": return Enchantment.OXYGEN;

		case "piercing": return Enchantment.PIERCING;

		case "protection": return Enchantment.PROTECTION_ENVIRONMENTAL;

		case "blastprotection": return Enchantment.PROTECTION_EXPLOSIONS;

		case "featherfalling": return Enchantment.PROTECTION_FALL;

		case "fireprotection": return Enchantment.PROTECTION_FIRE;

		case "projectileprotection": return Enchantment.PROTECTION_PROJECTILE;

		case "quickcharge": return Enchantment.QUICK_CHARGE;

		case "riptide": return Enchantment.RIPTIDE;

		case "silktouch": return Enchantment.SILK_TOUCH;

		case "sweepingedge": return Enchantment.SWEEPING_EDGE;

		case "thorns": return Enchantment.THORNS;

		case "vanishing": return Enchantment.VANISHING_CURSE;

		case "aquaaffinity": return Enchantment.WATER_WORKER;

		default: return null;
		}
	}
}
