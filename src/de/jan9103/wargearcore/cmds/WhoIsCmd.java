/*
 * Copyright 2021 Jan9103 (@jan9103:matrix.org Jan9103.wargear@protonmail.com)
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software,
 * and to permit third-parties to whom the Software is furnished to do so, all
 * subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR
 * ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
package de.jan9103.wargearcore.cmds;

import java.awt.image.BufferedImage;
import java.io.IOException;
import java.net.InetSocketAddress;
import java.net.URL;
import java.util.Date;

import javax.imageio.ImageIO;

import de.jan9103.java.utils.Curl;
import org.bukkit.OfflinePlayer;
import org.bukkit.entity.Player;
import de.jan9103.java.utils.json.*;

import de.jan9103.wargearcore.LogHandler;
import de.jan9103.wargearcore.User;
import de.jan9103.wargearcore.WGC;
import de.jan9103.wargearcore.chat.Msg;
import de.jan9103.wargearcore.util.ColorConverter;
import de.jan9103.wargearcore.util.UUIDconv;

public class WhoIsCmd extends AsyncUserCmd {
	private final String[] a; private final User u; private final Player p;
	public WhoIsCmd(String[] a1,User u1,Player p1){
		a=a1; u=u1; p=p1;
	}

	@Override public Runnable get(String[] a,User u,Player p){
		return new WhoIsCmd(a,u,p);
	}

	public WhoIsCmd(){
		a=null; u=null; p=null;
	}

	@Override public void run(){//TODO LSTR
		if(a.length<1){
			new Msg(u).b("Missing argument.").a(p); return;
		}
		final String id=UUIDconv.idS(a[0]);

		if(id==null){
			new Msg(u).b("Invalid target.").a(p); return;
		}
		boolean b=p.hasPermission("wgc.admin");
		Msg     m=new Msg(u).a("User-Info:").d().a("UUID: "+id).d().a("Names:");

		try {
			//final Scanner s=new Scanner(new URL("https://api.mojang.com/user/profiles/"+id.toString()+"/names").openStream(), "UTF-8");
			//final String js=s.useDelimiter("\\A").next();
			//s.close();
			final String js=Curl.getHttps("https://api.mojang.com/user/profiles/"+id.toString()+"/names");
			if(js.isEmpty()){
				new Msg(u).b("Invalid target.").a(p); return;
			}
			final JsonArray jsa=(JsonArray)new JsonDecoder(js).json;
			for(final Json o:jsa)
				if(o instanceof JsonDict){
					JsonDict i=(JsonDict)o;
					m.d().a(" - "+((JsonValue)i.get("name")).asStr());
					if(i.containsKey("changedToAt")){
						final Long l=((JsonValue)i.get("changedToAt")).asLong();
						if(l!=null)
							m.a(" since "+WGC.sdf.format(new Date(l))); // out+= ..
					}
				}
			final User t=parseTarget(a[0]);
			if(t!=null){ // TODO permission based
				final Player tp=t.getPlayer();
				if(tp!=null&&b){
					final InetSocketAddress adr=p.getAddress();
					m.d().a("Ip: "+ipToString(adr.getAddress().getAddress())+":"+adr.getPort())
					.d().a("Ip-Loopback: "+adr.getAddress().isLoopbackAddress())
					.d().a("Ip-Multicast: "+adr.getAddress().isMulticastAddress());
					try{
						Object entityPlayer=p.getClass().getMethod("getHandle").invoke(p);
						m.d().a("Spigot-Ping: "+((int)entityPlayer.getClass().getField("ping").get(entityPlayer)));
					}catch(Exception e){m.d().a("Ping: ?");}
					final OfflinePlayer op=tp;
					m.d().a("First Join: "+WGC.sdfMS.format(new Date(op.getFirstPlayed())))
					.d().a("Last Join: "+WGC.sdfMS.format(new Date(op.getLastPlayed())))
					.d().a("Op: "+op.isOp())
					.d().a("Gamemode: "+tp.getGameMode().toString())
					.d().a("World: "+tp.getLocation().getWorld().getName());
				}
				if(t.curAr!=null) m.d().a("Area: "+t.curAr.name);
				if(b) m.d().a("Godmode: "+t.isGod());
			}
			try{BufferedImage bi=ImageIO.read(new URL("https://crafatar.com/avatars/"+id+"?size=8&default=MHF_Steve&overlay"));
			    m.a("\n"+ColorConverter.get(bi));}catch(IOException e){}
			m.a(p);
			return;
		} catch(final Exception e){LogHandler.handleException(e);}
		p.sendMessage("Failed");
	}

	private String ipToString(byte[] a){
		StringBuilder o=new StringBuilder();

		for(byte i:a){
			if(o.length()>0) o.append('.');
			o.append((int)i);
		}
		return o.toString();
	}
}
