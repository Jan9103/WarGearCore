/*
 * Copyright 2021 Jan9103 (@jan9103:matrix.org Jan9103.wargear@protonmail.com)
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software,
 * and to permit third-parties to whom the Software is furnished to do so, all
 * subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR
 * ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
package de.jan9103.wargearcore.cmds;

import java.awt.image.BufferedImage;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.net.InetAddress;
import java.net.URL;
import java.util.Base64;
import java.util.EnumSet;

import javax.imageio.ImageIO;

import org.bukkit.Bukkit;
import org.bukkit.Material;
import org.bukkit.WeatherType;
import org.bukkit.command.Command;
import org.bukkit.command.CommandExecutor;
import org.bukkit.command.CommandSender;
import org.bukkit.craftbukkit.v1_15_R1.entity.CraftPlayer;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.util.CachedServerIcon;
import org.bukkit.util.Vector;
import org.bukkit.event.server.ServerListPingEvent;
import org.bukkit.event.entity.EntityToggleGlideEvent;
import org.bukkit.event.player.PlayerToggleSneakEvent;

import de.jan9103.wargearcore.LogHandler;
import de.jan9103.wargearcore.User;
import de.jan9103.wargearcore.UserManager;
import de.jan9103.wargearcore.WGC;
import de.jan9103.wargearcore.area.WgArea;
import de.jan9103.wargearcore.fight.Fight;
import de.jan9103.wargearcore.fight.modifier.RisingMod;
import de.jan9103.wargearcore.listener.JoinListener;
import de.jan9103.wargearcore.util.BlockIds;
import de.jan9103.wargearcore.util.ColorConverter;
import de.jan9103.wargearcore.util.Flag;
import de.jan9103.wargearcore.util.Parser;
import net.minecraft.server.v1_15_R1.ChatComponentText;
import net.minecraft.server.v1_15_R1.ChatModifier;
import net.minecraft.server.v1_15_R1.IChatBaseComponent;
import net.minecraft.server.v1_15_R1.PacketPlayOutChat;
import net.minecraft.server.v1_15_R1.IChatBaseComponent.ChatSerializer;
import net.minecraft.server.v1_15_R1.PacketPlayOutPosition;

@SuppressWarnings("unused")
public class DebugCmd implements CommandExecutor,Listener {
	private static CachedServerIcon csi;
	@EventHandler public void a(PlayerToggleSneakEvent e){
		if(!e.getPlayer().isGliding()) return;

		if(e.isSneaking()) e.getPlayer().setVelocity(e.getPlayer().getVelocity().add(e.getPlayer().getEyeLocation().getDirection()));
	}

	@EventHandler public void a(EntityToggleGlideEvent e){
		if(!(e.getEntity() instanceof Player)) return;

		if(!e.isGliding()) return;

		Player p=(Player)e.getEntity();

		p.setVelocity(p.getEyeLocation().getDirection().multiply(2));
	}

	public DebugCmd(){
		WGC.d=true; csi=Bukkit.getServerIcon();
	}

	@Override public boolean onCommand(CommandSender s,Command arg1,String arg2,String[] a){
		if(!(s instanceof Player)){
			s.sendMessage("�6[WarGearCore] �ePlayer-only command.");
			return true;
		}
		final Player p=(Player)s;

		WgArea.inside(p.getLocation());
		final User u=UserManager.getUser(p);

		if(a.length<1) return true;



		switch(a[0].toLowerCase()){
		case "listusers":
			for(User i:UserManager.loadedUsers()) s.sendMessage(i.getName());
			return true;

		case "csi":
			if(a.length<2) return false;

			try{
				switch(a[1]){
				case "skull":
					csi=Bukkit.loadServerIcon(new File("W:/mc/texture/Faitful32-1.15.2-r1/assets/minecraft/textures/painting/skull_and_roses.png")); break;

				case "match":
					csi=Bukkit.loadServerIcon(new File("W:/mc/texture/Faitful32-1.15.2-r1/assets/minecraft/textures/painting/match.png")); break;

				default: p.sendMessage("unknown");
				}
			}catch(IOException e2){
				// TODO Auto-generated catch block
				e2.printStackTrace();
			}catch(IllegalArgumentException e){
				// TODO Auto-generated catch block
				e.printStackTrace();
			}catch(Exception e){
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			return true;

		case "forcekick": {
			PacketPlayOutPosition pkg=new PacketPlayOutPosition(p.getLocation().getX(),(double)Integer.MAX_VALUE,p.getLocation().getZ(),0,0,EnumSet.allOf(PacketPlayOutPosition.EnumPlayerTeleportFlags.class),1);
			((CraftPlayer)p).getHandle().playerConnection.sendPacket(pkg);
			return true;
		}

		case "ip": {
			InetAddress ia   =p.getAddress().getAddress();
			String      build="";
			for(byte i:ia.getAddress()) build+="."+i;
			build=build.substring(1);
			p.sendMessage("String: "+ia.toString()+"\nCanHN: "+ia.getCanonicalHostName()+"\nbuild"+build);
		}

		case "a": ((CraftPlayer)p).getHandle().weather=WeatherType.DOWNFALL; return true;

		case "error": try{throw new ArrayIndexOutOfBoundsException();}catch(ArrayIndexOutOfBoundsException e){LogHandler.handleException(e);}

		case "icon":
			try{
				Bukkit.loadServerIcon(new File(System.getProperty("user.home")+"/Downloads/server-icon.png"));
				s.sendMessage(Bukkit.getUpdateFolderFile().getAbsolutePath());
			}catch(IllegalArgumentException e1){
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}catch(Exception e1){
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			return true;

		case "chat":
			ChatComponentText icbc=new ChatComponentText("test");
			ChatModifier      cm  =new ChatModifier();
			icbc.setChatModifier(cm);
			return true;

		case "flag": {if(a.length<2) return false;

			      String i=new Flag(Integer.parseInt(a[1]),u.ct,u.pre16).print();
			      System.out.println(i);
			      final IChatBaseComponent comp=ChatSerializer.a(i);
			      final PacketPlayOutChat  chat=new PacketPlayOutChat(comp);
			      ((CraftPlayer)p).getHandle().playerConnection.sendPacket(chat);
			      return true;}

		case "join": JoinListener.senJoinInfo(p,u); return true;

		//		case"emoji":s.sendMessage("\u2588�2\u2588");return true;
		case "imgme": {      //TODO test
			try{BufferedImage bi=ImageIO.read(new URL("https://crafatar.com/avatars/"+/*p.getUniqueId().toString()*/ a[1]+"?size=8&default=MHF_Steve&overlay"));
			    s.sendMessage(ColorConverter.get(bi));}catch(IOException e){e.printStackTrace();}
			return true;
		}

		case "tmp": {
			String o="";
			for(final Material i:Material.values()){
				final int num=BlockIds.mTI(i);
				if(num==0) continue;
				o+="\ncase"+(num<0?"":" ")+num+":return Material."+i.toString()+";";
			}
			final File f=new File(WGC.dataFolder+"/tmp.txt");
			try{
				if(!f.exists()) f.createNewFile();
				final BufferedWriter fos=new BufferedWriter(new FileWriter(f));
				fos.write(o);
				fos.flush();
				fos.close();
			}catch(final IOException e){LogHandler.handleException(e);}
			return true;
		}

		case "tmp2": {
			Bukkit.getScheduler().runTaskAsynchronously(WGC.wgc,(Runnable)()->{
					String o="";
					for(int i=-1000069; i<500; i++){
						final Material m=BlockIds.iTM(i);
						if(m==Material.AIR) continue;
						o+="\ncase "+m.toString()+":return"+(i<0?"":" ")+i+";";
					}
					final File f=new File(WGC.dataFolder+"/tmp.txt");
					try{
						if(!f.exists()) f.createNewFile();
						final BufferedWriter fos=new BufferedWriter(new FileWriter(f));
						fos.write(o);
						fos.flush();
						fos.close();
					}catch(final IOException e){LogHandler.handleException(e);}
				});
			return true;
		}

		case "risingwater": {
			if(u.curAr==null) return false;

			new RisingMod(u.curAr.fight,20,Material.WATER).fightStart();
			return true;
		}

		case "cskull": {
			if(a.length<2) return false;

			p.getInventory().addItem(new SkullCmd().getCustomSkull(a[1]));
			return true;
		}

		case "cs2": {
			if(a.length<2) return false;

			final String s4=new String(Base64.getEncoder().encode(("{'textures':{'SKIN':{'url':'"+a[1]+"'}}}").getBytes()));
			p.getInventory().addItem(new SkullCmd().getCustomSkull(s4));
			return true;
		}

		case "fight":
			if(u.curAr==null) return false;

			final Fight f=new Fight(u.curAr);
			f.red.add(u);
			f.countdownLength=10;
			Bukkit.getScheduler().runTaskLater(WGC.wgc,(Runnable)()->f.start(),200);
			Bukkit.getScheduler().runTaskLater(WGC.wgc,(Runnable)()->f.end(),600);
			return true;

		case "dir":
			final Vector dir=p.getEyeLocation().getDirection();
			p.sendMessage("Dir: x:"+Double.toString(dir.getX())+" y:"+Double.toString(dir.getY())+" z:"+Double.toString(dir.getZ()));
			p.sendMessage("Geschatzt: "+Parser.smallDir(dir).toString());
			return true;

		case "online":
//				UserManager.add(new User(p));
			return true;

		default:
			return false;
		}
	}
}
