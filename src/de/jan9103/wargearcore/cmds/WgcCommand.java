/*
 * Copyright 2021 Jan9103 (@jan9103:matrix.org Jan9103.wargear@protonmail.com)
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software,
 * and to permit third-parties to whom the Software is furnished to do so, all
 * subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR
 * ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
package de.jan9103.wargearcore.cmds;

import java.io.File;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.EnumSet;
import java.util.List;

import org.bukkit.Bukkit;
import org.bukkit.command.Command;
import org.bukkit.command.CommandExecutor;
import org.bukkit.command.CommandSender;
import org.bukkit.command.ConsoleCommandSender;
import org.bukkit.command.RemoteConsoleCommandSender;
import org.bukkit.command.TabCompleter;
import org.bukkit.craftbukkit.v1_20_R3.entity.CraftPlayer;
import org.bukkit.entity.Player;

import de.jan9103.wargearcore.C;
import de.jan9103.wargearcore.User;
import de.jan9103.wargearcore.UserManager;
import de.jan9103.wargearcore.WGC;
import de.jan9103.wargearcore.chat.Msg;
import de.jan9103.wargearcore.internal_test.Test;
import de.jan9103.wargearcore.internal_test.WgcInternalTests;
import net.minecraft.network.protocol.game.PacketPlayOutPosition;

public class WgcCommand implements CommandExecutor,TabCompleter {
	@Override public boolean onCommand(CommandSender s,Command a1,String a2,String[] a){
		boolean    root=(s instanceof ConsoleCommandSender)||(s instanceof RemoteConsoleCommandSender);
		final User u   =(s instanceof Player)?UserManager.getUser((Player)s):null;

		if(u!=null)
			if(u.root) root=true;
		if(a.length<1){
			if(u!=null){
				new Msg(u).a("WarGearCore "+WGC.wgc.getDescription().getVersion()+" by Jan9103").a((Player)s);
				return true;
			}
			else return msg(u,s,"Missing command argument..",true);
		}
		switch(a[0].toLowerCase()){
		case "debug":
			for(User i:UserManager.loadedUsers()) s.sendMessage(i.getName());
			return true;

		case "runtests":
			if(!root) return msg(u,s,"Missing Permission.",true);

			runTests(s,u);
			return msg(u,s,"Running tests in background..",false);

		case "defence":
			if(a.length<2) return msg(u,s,"Missing command argument..",true);

			switch(a[1].toLowerCase()){
			case "ips": {
				if(u==null) return msg(u,s,"You are not a User..",true);

				Bukkit.getScheduler().runTaskAsynchronously(WGC.wgc,()->{
						final File f=new File(WGC.dataFolder+"/user/"+((Player)s).getUniqueId().toString()+".usr");
						if(!f.exists()){
							msg(u,s,"Unable to load userconfig?!",true); return;
						}
						final C c     =new C(f);
						List<String>sl=c.gsl("ips");
						Msg m         =new Msg(u).a("Ips used by your account:");
						for(String i:sl) m.d().a(" - "+i);
						m.a((Player)s);
					});
				return true;
			}

			default: return false;
			}

		case "setprofilepicture":
			if(u==null) return msg(u,s,"You cant set a profilepicture here..",true);

			if(a.length<2) return msg(u,s,"Missing Argument: URL",true);

			if(a[1].isEmpty()) return msg(u,s,"Missing Argument: URL",true);

			try{new URL(a[1]);}catch(MalformedURLException e){return msg(u,s,"Invalid URL..",true);}
			u.profilePic=a[1];
			return msg(u,s,"Picture set.",true);

		case "reload":
			if(!root) return msg(u,s,"Missing Permission.",true);

			WGC.wgcreload();
			return msg(u,s,"Reloading WGC-Configs..",false);
		}
		return false;
	}

	private void runTests(final CommandSender s,final User u){
		new Thread(){
			@Override public void run(){
				Test.LINE_WIDTH=30;
				WgcInternalTests t=new WgcInternalTests();

				msg(u,s,"Test-Results:\n"+t.output+"\n\n("+t.fails+"f :: "+t.success+"s)",false);
			}
		}.start();
	}

	private boolean msg(User u,CommandSender s,String m,boolean error){
		if(u!=null){
			if(error) new Msg(u).b(m).a((Player)s);
			else new Msg(u).a(m).a((Player)s);
		}
		else s.sendMessage("[WGC] "+m);
		return true;
	}

	@Override public List<String>onTabComplete(CommandSender s,Command arg1,String arg2,String[] a){
		ArrayList<String>o=new ArrayList<>();

		switch(a[0].toLowerCase()){
		case "defence": o.add("ips"); break;

		case "setprofilepicture": o.add("<url>"); break;

		case "":
			o.add("defence");
			if((s instanceof ConsoleCommandSender)||(s instanceof RemoteConsoleCommandSender)){
				o.add("runtests");
				o.add("reload");
			}
			else
				o.add("setProfilePicture");
		}
		return o;
	}
}
