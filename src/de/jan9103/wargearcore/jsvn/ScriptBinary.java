/*
 * Copyright 2021 Jan9103 (@jan9103:matrix.org Jan9103.wargear@protonmail.com)
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software,
 * and to permit third-parties to whom the Software is furnished to do so, all
 * subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR
 * ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
package de.jan9103.wargearcore.jsvn;

import java.util.ArrayList;

import org.bukkit.Bukkit;
import org.bukkit.block.Block;
import org.bukkit.entity.Player;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.BookMeta;
import org.bukkit.util.RayTraceResult;

import de.jan9103.wargearcore.User;
import de.jan9103.wargearcore.UserManager;
import de.jan9103.wargearcore.WGC;

public class ScriptBinary {
	public static void run(ItemStack is,Player p){
		final User u=UserManager.getUser(p);

		if(u==null) return;

		final ScriptBinary sb=u.books.get(is);

		if(sb!=null){
			sb.run(p,u); return;
		}
		Bukkit.getScheduler().runTaskAsynchronously(WGC.wgc,(Runnable)()->{
			try{
				final ScriptBinary sb2=new ScriptBinary(new BookParser((BookMeta)is.getItemMeta()));
				u.books.put(is,sb2);
				Bukkit.getScheduler().runTask(WGC.wgc,(Runnable)()->sb2.run(p,u));
			}catch(final ParseException e){p.sendMessage("[WGC-Script] Unable to load Book: "+e.get());}
		});
	}

	// -------------------------------------------------------------------
	private final Cmd[] lns;
	private final ScriptType st;
	public ScriptBinary(BookParser bp)throws ParseException {
		String l=bp.nextLine();

		if(l==null) throw new ParseException("Book empty.");
		switch(l.toUpperCase()){
		case "BRUSHS": st=ScriptType.BRUSH; break;

		case "WGEDIT": st=ScriptType.WGE; break;

		case "SIMPLE": st=ScriptType.BASIC; break;

		default: throw new ParseException("Unknown script type.");
		}
		final ArrayList<Cmd>al=new ArrayList<>();

		while((l=bp.nextLine())!=null){ // while !finishd
			switch(l.charAt(0)){
			case '#': continue;

			case '/': al.add(new RunCmd(l)); continue;
			}
			final String[] split=l.split(" ");
			switch(split[0].toLowerCase()){
			case "wge": {
				if(split.length<2) throw new ParseException("Invalid WGE (missing command)");
				switch(split[1].toLowerCase()){
				case "copy": al.add(WGECmd.COPY); continue;

				case "paste": al.add(WGECmd.PASTE); continue;

				case "posa": al.add(WGECmd.POSA); continue;

				case "posb": al.add(WGECmd.POSB); continue;

				case "rep": al.add(new WgeRepCmd(split));
				}
				continue;
			}

			case "set":
				try{al.add(new SetCmd(l));}catch(final Exception e){throw new ParseException("Set Command Invalid "+e.getMessage());} continue;
			}
		}
		lns=new Cmd[al.size()];
		for(int i=0; i<lns.length; i++) lns[i]=al.get(i);
	}

	public void run(Player p,Block l,User u){
		final VarSet vs=new VarSet();

		for(final Cmd ln:lns)
			ln.run(u,p,l,vs);
	}

	public void run(Player p,User u){
		Block l;

		if(st==ScriptType.BRUSH){
			final RayTraceResult rtr=p.rayTraceBlocks(60);
			if(rtr==null){
				p.sendMessage("[WGC-Script] Unable to locate Block.."); return;
			}
			l=rtr.getHitBlock();
			if(l==null){
				p.sendMessage("[WGC-Script] Unable to locate Block.."); return;
			}
		}
		else l=p.getLocation().getBlock();
		run(p,l,u);
	}
}
