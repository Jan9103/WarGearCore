/*
 * Copyright 2021 Jan9103 (@jan9103:matrix.org Jan9103.wargear@protonmail.com)
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software,
 * and to permit third-parties to whom the Software is furnished to do so, all
 * subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR
 * ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
package de.jan9103.wargearcore.jsvn;

import java.util.Random;

public class IntCalc {
	private String e;
	private char[] c;
	private int sum=0,i;
	private final VarSet vs;
	public IntCalc(String a,VarSet v){
		e=a; c=a.toCharArray(); vs=v;
	}

	public int calc(){
		while((i=e.indexOf('('))!=-1){
			int       a=1;
			final int b=i;
			while(a>0&&++i<c.length)
				switch(c[i]){
				case '(': a++; continue;

				case ')': a--;
				}
			a=new IntCalc(e.substring(b+1,i),vs).calc();
			e=e.substring(0,b)+a+e.substring(i+1);
			c=e.toCharArray();
		}
		i  =0;
		sum=b();
		while(i<c.length){
			try{
				switch(c[i++]){
				case '+':
					sum+=b();
					continue;

				case '-':
					sum-=Integer.max(b(),1);
					continue;

				case '/':
					sum/=b();
					continue;

				case '*':
					sum*=b();
					continue;

				case '%':
					sum%=b();
					continue;
				}
			}catch(final ArrayIndexOutOfBoundsException e){}
		}
		return sum;
	}

	private int a(){
		int z=i;

		while(++z<c.length&&a(c[z]));
		System.out.println("P "+e.substring(i,z));
		final int k=Integer.parseInt(e.substring(i,z));

		i=z;
		return k;
	}

	private int b()throws ArrayIndexOutOfBoundsException {
		try{switch(c[i]){
		    case '0':
		    case '1':
		    case '2':
		    case '3':
		    case '4':
		    case '5':
		    case '6':
		    case '7':
		    case '8':
		    case '9': return a();

		    case '.':
			    switch(c[++i]){
			    case 'i': {
				    final byte b=Byte.parseByte(c[++i]+"");
				    return vs.gI(b);
			    }

			    case 'r': {
				    ++i;
				    final int a=b();
				    if(a<1) return 0;

				    return new Random().nextInt(a);
			    }
			    }
		    }
		}catch(final NumberFormatException e){}
		return 0;
	}

	private boolean a(char i){
		switch(i){
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9': return true;

		default: return false;
		}
	}
}
