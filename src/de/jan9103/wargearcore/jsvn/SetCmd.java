/*
 * Copyright 2021 Jan9103 (@jan9103:matrix.org Jan9103.wargear@protonmail.com)
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software,
 * and to permit third-parties to whom the Software is furnished to do so, all
 * subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR
 * ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
package de.jan9103.wargearcore.jsvn;

import org.bukkit.Bukkit;
import org.bukkit.Material;
import org.bukkit.block.Block;
import org.bukkit.block.TileState;
import org.bukkit.craftbukkit.v1_15_R1.CraftWorld;
import org.bukkit.entity.Player;

import de.jan9103.wargearcore.User;
import de.jan9103.wargearcore.UserManager;
import de.jan9103.wargearcore.WGC;
import de.jan9103.wargearcore.area.WgArea;
import de.jan9103.wargearcore.chat.Msg;
import de.jan9103.wargearcore.worldedit.cmds.WorldEditCmd;
import net.minecraft.server.v1_15_R1.BlockPosition;

public class SetCmd extends Cmd {
	private final VarType c;
	private final byte d;
	private final String e;
	public SetCmd(VarType a,byte b,String to){
		c=a; d=b; e=to;
	}

	public SetCmd(String b)throws Exception {
		final String a=b.toLowerCase();

		// set .i1=..
		switch(a.charAt(4)){
		case 'i': c=VarType.INT; b=a.replaceAll("\\s+",""); break;

		case 'm': c=VarType.MAT; b=a.replaceAll("\\s+",""); break;

		case 'p': c=VarType.PLAYER; b=a.replaceAll("\\s+",""); break;

		case 'b': c=VarType.BLOCK; break;

		case 's': c=VarType.STR; break;

		case 'a': c=VarType.AREA; b=a.replaceAll("\\s+",""); break;

		default: throw new Exception();
		}
		d=Byte.parseByte(a.substring(5,6));
		e=b.substring(b.indexOf('=')+1);
	}

	@Override public void run(User u,Player p,Block b,VarSet v){
		switch(c){
		case INT: {
			v.sI(d,new IntCalc(e,v).calc());
			System.out.println(v.gI(d));
			return;
		}

		case MAT: {
			final Material f=WorldEditCmd.parseM(e);
			if(f==null) new Msg(u,WGC._PREFIX_2_Script).b("Invalid Material in set command.").a(p);
			else v.sM(d,f);
			return;
		}

		case AREA: {
			String c=e;
			if(e.length()>=3)
				if(e.charAt(0)=='.')
					switch(Character.toLowerCase(e.charAt(1))){
					case 'p': {
						final Player a=v.gP(a(e.charAt(2)));
						if(a==null){
							v.sA(d,null); return;
						}
						v.sA(d,UserManager.getUser(a).curAr);
						return;
					}

					case 'b': {
						final Block a=v.gB(a(e.charAt(2)));
						if(a==null){
							v.sA(d,null); return;
						}
						v.sA(d,WgArea.inside(a));
						return;
					}

					case 's':
						c=v.gS(a(e.charAt(2)));

					default:
					}
			if(c==null) c="";
			v.sA(d,WgArea.get(c));
			return;
		}

		case BLOCK: {
			final String[] a=e.split(" ");
			switch(a.length){
			case 1: {               //m
				if(a[0].length()<3){
					v.sB(d,null); return;
				}
				if(a[0].charAt(0)!='.'){
					v.sB(d,null); return;
				}
				switch(Character.toLowerCase(a[0].charAt(1))){
				case 'b': {
					v.sB(d,v.gB(a(a[0].charAt(2))));
					return;
				}

				case 'm': {
					final Block c=v.gB(d);
					if(c==null) return;

					final Material f=v.gM(a(a[0].charAt(2)));
					if(c.getState() instanceof TileState) ((CraftWorld)c.getWorld()).getHandle().removeTileEntity(new BlockPosition(c.getX(),c.getY(),c.getZ()));
					c.setType(f,false);
				}
				}
				return;
			}

			case 3: {               //i i i
				try{
					int x=0,y=0,z=0;
					if(a[0].length()<1);
					else if(a[0].charAt(0)=='.'){
						if(a[0].length()>=3) switch(Character.toLowerCase(a[0].charAt(1))){
							case 'b': {
								final Block c=v.gB(a(a[0].charAt(2)));
								if(c!=null) x=c.getX();
								break;
							}

							case 'i':
								x=v.gI(a(a[0].charAt(2)));
							}
					}
					else
						x=a(a[0]);
					if(a[1].length()<1);
					else if(a[1].charAt(0)=='.'){
						if(a[1].length()>=3) switch(Character.toLowerCase(a[1].charAt(1))){
							case 'b': {
								final Block c=v.gB(a(a[1].charAt(2)));
								if(c!=null) y=c.getY();
								break;
							}

							case 'i':
								y=v.gI(a(a[1].charAt(2)));
							}
					}
					else
						y=a(a[1]);
					if(a[2].length()<1);
					else if(a[2].charAt(0)=='.'){
						if(a[2].length()>=3) switch(Character.toLowerCase(a[2].charAt(1))){
							case 'b': {
								final Block c=v.gB(a(a[2].charAt(2)));
								if(c!=null) z=c.getZ();
								break;
							}

							case 'i':
								z=v.gI(a(a[2].charAt(2)));
							}
					}
					else
						z=a(a[2]);
					v.sB(d,p.getWorld().getBlockAt(x,y,z));
				}catch(final NumberFormatException e){}
				return;
			}

			case 4: {               //b i i i
				int x=0,y=0,z=0;
				if(a[0].length()<3){
					v.sB(d,null); return;
				}
				if(a[0].charAt(0)!='.'){
					v.sB(d,null); return;
				}
				Block f;
				switch(Character.toLowerCase(a[0].charAt(1))){
				case 'b': f=v.gB(a(a[0].charAt(2))); break;

				case 'p': {final Player g=v.gP(a(a[0].charAt(2))); if(g==null){
						   v.sB(d,null); return;
					   }
					   f=g.getLocation().getBlock(); break;}

				default: v.sB(d,null); return;
				}
				if(f==null){
					v.sB(d,null); return;
				}
				if(a[1].length()<1);
				else if(a[1].charAt(0)=='.'){
					if(a[1].length()>=3) switch(Character.toLowerCase(a[1].charAt(1))){
						case 'b': {
							final Block c=v.gB(a(a[1].charAt(2)));
							if(c!=null) x=c.getX();
							break;
						}

						case 'i':
							x=v.gI(a(a[1].charAt(2)));
						}
				}
				else
					x=a(a[1]);
				if(a[2].length()<1);
				else if(a[2].charAt(0)=='.'){
					if(a[2].length()>=3) switch(Character.toLowerCase(a[2].charAt(1))){
						case 'b': {
							final Block c=v.gB(a(a[2].charAt(2)));
							if(c!=null) y=c.getY();
							break;
						}

						case 'i':
							y=v.gI(a(a[2].charAt(2)));
						}
				}
				else
					y=a(a[2]);
				if(a[3].length()<1);
				else if(a[3].charAt(0)=='.'){
					if(a[3].length()>=3) switch(Character.toLowerCase(a[3].charAt(1))){
						case 'b': {
							final Block c=v.gB(a(a[3].charAt(2)));
							if(c!=null) z=c.getZ();
							break;
						}

						case 'i':
							z=v.gI(a(a[3].charAt(2)));
						}
				}
				else
					z=a(a[4]);
				v.sB(d,f.getRelative(x,y,z));
			}
			}
			return;
		}

		case PLAYER: {
			String c=e;
			if(e.length()>=3)
				if(e.charAt(0)=='.')
					switch(Character.toLowerCase(e.charAt(1))){
					case 'p': v.sP(d,v.gP(a(e.charAt(2)))); return;

					case 's':
						c=v.gS(a(e.charAt(2)));
						return;

					case 'b':
						Player player=v.gP(d);
						Block  block =v.gB(a(e.charAt(2)));
						if(player!=null&&block!=null) player.teleport(block.getLocation());
						return;

					default:
						return;
					}
			if(c==null) c="";
			v.sP(d,Bukkit.getPlayer(c));
			return;
		}

		case STR: v.sS(d,v.a(e)); return;

		case TRUTH: {
			String c=e;
			if(e.length()>=3)
				if(e.charAt(0)=='.')
					switch(Character.toLowerCase(e.charAt(1))){
					case 't': v.sT(d,v.gT(a(e.charAt(2)))); return;

					case 's': c=v.gS(a(e.charAt(2)));

					case 'i': v.sT(d,v.gI(a(e.charAt(2)))==1); return;
					}
			if(c==null) c="";
			v.sT(d,c.equalsIgnoreCase("true"));
			return;
		}

		default:
			System.out.println("UNKNOWN VarType");
		}
	}

	private Byte a(char a){
		try{return Byte.parseByte(a+"");}catch(final NumberFormatException e){return 0;}
	}

	private int a(String a){
		try{return Integer.parseInt(a);}catch(final NumberFormatException e){return 0;}
	}
}
