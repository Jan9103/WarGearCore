/*
 * Copyright 2021 Jan9103 (@jan9103:matrix.org Jan9103.wargear@protonmail.com)
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software,
 * and to permit third-parties to whom the Software is furnished to do so, all
 * subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR
 * ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
package de.jan9103.wargearcore.area;

import java.io.File;
import java.io.IOException;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;

import de.jan9103.wargearcore.worldedit.schem.SV2iz;
import org.bukkit.Bukkit;
import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.Sound;
import org.bukkit.World;
import org.bukkit.block.Block;
import org.bukkit.configuration.file.YamlConfiguration;
import org.bukkit.entity.TNTPrimed;
import org.bukkit.event.entity.EntityExplodeEvent;
import org.bukkit.scoreboard.DisplaySlot;
import org.bukkit.scoreboard.Objective;
import org.bukkit.scoreboard.Scoreboard;

import de.jan9103.wargearcore.C;
import de.jan9103.wargearcore.LogHandler;
import de.jan9103.wargearcore.SoundKategory;
import de.jan9103.wargearcore.User;
import de.jan9103.wargearcore.UserManager;
import de.jan9103.wargearcore.WGC;
import de.jan9103.wargearcore.api.fight.FightMod;
import de.jan9103.wargearcore.area.tb.TB;
import de.jan9103.wargearcore.area.tb.TB2;
import de.jan9103.wargearcore.chat.BcMsg;
import de.jan9103.wargearcore.coordSys.BigArea;
import de.jan9103.wargearcore.coordSys.BigCoord;
import de.jan9103.wargearcore.coordSys.SmallArea;
import de.jan9103.wargearcore.fight.Fight;
import de.jan9103.wargearcore.fight.FightState;
import de.jan9103.wargearcore.tracer.Trace;
import de.jan9103.wargearcore.worldedit.ChunkLoader;
import de.jan9103.wargearcore.worldedit.WEArea;
import de.jan9103.wargearcore.worldedit.clip.Clipboard;
import de.jan9103.wargearcore.worldedit.editors.AsyncMultiEditor;
import de.jan9103.wargearcore.worldedit.editors.SyncDrainer;
import de.jan9103.wargearcore.worldedit.editors.WallCreator;
import de.jan9103.wargearcore.worldedit.editors.WeSender;
import de.jan9103.wargearcore.worldedit.editors.async.AsyncSetO;
import de.jan9103.wargearcore.worldedit.schem.SV2i;

public class WgArea {
	//-------------static-Stuff-------------------------------------
	/**
	 * called on shutdown to handle the saving, etc
	 */
	public static void disable(){
		if(areas==null) return;

		if(areas.size()<1) return;

		for(final WgArea a:areas) a.stop();
		areas.clear();
	}

	/** a list of loaded areas */
	public static HashSet<WgArea>areas=new HashSet<>();
	/** get the area which surrounds a location (or null) */
	public static WgArea inside(Location l){
		for(final WgArea a:areas) if(a.ii(l)) return a; return null;
	}

	/** get the area which surrounds a location (or null) */
	public static WgArea inside(Block l){
		for(final WgArea a:areas) if(a.ii2(l)) return a; return null;
	}

	/** get the area which surrounds a location (or null) */
	public static WgArea get(String name){
		for(final WgArea a:areas) if(a.name.equalsIgnoreCase(name)) return a; return null;
	}

	/** Texts used for the scoreboard text - do not change live! */
	public static String _sb_freeze="§6Freeze: ",_sb_tnt="§6Tnt: ",_sb_prot="§6Prot: ",_sb_bu_status="§6Auto-Bu: ",
			     _sb_last_bu="§6Last BU: §a",_sb_wr="§6WaterR: ",_sb_trace="§6Trace: ",
			     _sb_on="§aon",_sb_off="§4off",_sb_prefix_arena="";
	//------------------Class---------------------------------------
	public ATheme.THM thm=ATheme.THM.GRAY;
	public final Fight fight;
	public final Scoreboard sb=Bukkit.getServer().getScoreboardManager().getNewScoreboard();
	/** a 2d outline of the area */
	public final SmallArea area;
	public final BigArea bluWg,redWg;
	/** area, which dosn't need any 'dont blow the arena up' checks */
	public final BigArea noScan;
	public final int ausfahrm,ausfm_front,bodenY;
	public BigCoord redSpawn,bluSpawn;
	public final BigCoord mid;
	public final World w;
	public final String name;
	private boolean boom,freeze=false,ticketed=false;
	public boolean autobu;
	public final Trace trace;
	public boolean tracing=false;
	public boolean bluProt=true,waterremover=true,restrictedAccess=false;
	private Long lastProtWarn=0L;
	public TB tb=new TB2();
	public final Objective info;//scoreboard
	public int wr_min_y=0,last_bu=-1;
	private long last_bu_hash=0,nextActualBu=0;
	/**
	 * create a BackUp.
	 * @param f: output file
	 * @param auto: will only run if autoBu is turned on
	 * @param min: time in minutes
	 */
	public void backUp(final File f,final boolean auto,int min){
		if(auto){
			if(!autobu) return;

			bc(new BcMsg(WGC._PREFIX_2_Area).a("Auto-Back-Up."));
		}
		if(autobu){
			sb.resetScores(_sb_last_bu+last_bu);
			last_bu=min;
			info.getScore(_sb_last_bu+last_bu).setScore(3);
		}
		f.mkdir();
		final Clipboard cb  =new Clipboard(new WEArea(bluWg,w),mid.block(w));
		long            hash=cb.hash();

		if(auto&&hash==last_bu_hash&&nextActualBu<System.currentTimeMillis()) return;

		last_bu_hash=hash;
		nextActualBu=System.currentTimeMillis()+600000L;
		final SV2i i=new SV2i();

		Bukkit.getScheduler().runTaskAsynchronously(WGC.wgc,()->i.save(new File(f+"/"+name+".jsv2i"),cb));
	}

	/** get a 2d-area collection, which includes the area, but not the WGs */
	public SmallArea[] notWg2dMask(){
		final SmallArea[] o=new SmallArea[5];

		o[0]=new SmallArea(redWg.low.x,redWg.low.z-1,bluWg.high.x,bluWg.high.z+1);                     //zwischen wgs
		o[1]=new SmallArea(redWg.low.x,redWg.high.z+1,redWg.high.x,area.high.z);                       //z-low (-edge)
		o[2]=new SmallArea(bluWg.high.x,bluWg.low.z-1,bluWg.low.x,area.low.z);                         //z-high (-edge)
		o[3]=new SmallArea(area.low.x,area.low.z,area.low.x+bluWg.low.x-area.low.x-1,area.high.z);     //x-low (+edge)
		o[4]=new SmallArea(area.high.x,area.high.z,area.high.x+bluWg.high.x-area.high.x+1,area.low.z); //x-high (+edge)
		return o;
	}

	/** forceload on */
	public void ticketOn(){
		if(ticketed) return;

		for(int x=area.low.x-area.low.x%16-16; x<=area.high.x; x+=16)
			for(int z=area.low.z-area.low.z%16-16; z<=area.high.z; z+=16)
				ChunkLoader.add(w.getChunkAt(x>>4,z>>4));
		ticketed=true;
	}

	/** forceload off */
	public void ticketOff(){
		if(!ticketed) return;

		for(int x=area.low.x-area.low.x%16-16; x<=area.high.x; x+=16)
			for(int z=area.low.z-area.low.z%16-16; z<=area.high.z; z+=16)
				ChunkLoader.rem(w.getChunkAt(x>>4,z>>4));
		ticketed=false;
	}

	/** Broadcast */
	public void bc(BcMsg m){
		for(final User i:UserManager.loadedUsers()) if(i.curAr==this) m.a(i);
	}

	/** Broadcast a Sound */
	public void bcSound(SoundKategory k,Sound s,float pitch){
		for(final User i:UserManager.loadedUsers()) if(i.curAr==this) i.playSound(k,s,pitch);
	}

	/** is inside? */
	public boolean ii(Location l){
		if(l.getWorld()!=w) return false; return area.inside(l.getBlockX(),l.getBlockZ());
	}

	/** save the area */
	private void stop(){
		saveCfg();
		stopTrace();
		trace.shutdown();
		ticketOff();
		for(final User u:UserManager.loadedUsers()){
			if(u.curAr!=this) continue;
			u.curAr=null;
			u.getPlayer().setScoreboard(WGC.sb);
		}
	}

	/**
	 * @param wgX max x-Size of Wgs
	 * @param wgY max y-Size of Wgs
	 * @param wgZ max z-Size of Wgs
	 * @param afm max ausfahr-distance of Wgs
	 * @param zus extra area around stuff
	 * @param loc spectator-spawn-point / mid
	 * @param w world
	 */
	public WgArea(int wgX,int wgY,int wgZ,int afm,int zus,BigCoord loc,World w,String na,int afmf,int entf)throws AreaCollisionException {
		name  =na;
		mid   =loc;
		this.w=w;
		final int wgZn=Math.floorDiv(wgX,2);
		int       wgZp=wgZn;

		ausfahrm   =afm;
		ausfm_front=afmf;
		bodenY     =mid.y-1;
		final int z=afm+zus;

		if(wgZn<<1!=wgX) wgZp++;
		int halfEntf=entf>>1;

		area    =new SmallArea(mid.offset(z+wgZp-1,0,halfEntf+z+wgZ-1),mid.offset(-z-wgZn,0,-halfEntf-wgZ-z));
		bluWg   =new BigArea(mid.offset(-wgZn,0,halfEntf),mid.offset(wgZp-1,1-wgY,halfEntf-1+wgZ));
		redWg   =new BigArea(mid.offset(-wgZn,0,-halfEntf-1),mid.offset(wgZp-1,1-wgY,-halfEntf-wgZ));
		redSpawn=mid.offset(0,0,halfEntf-1);
		bluSpawn=mid.offset(0,0,-halfEntf);
		info    =sb.registerNewObjective("a","dummy",name);
		info.setDisplaySlot(DisplaySlot.SIDEBAR);
		for(final WgArea a:areas){
			if(a.w!=w) continue;
			if(a.area.inside(area.low.x,area.low.z)) throw new AreaCollisionException();
			if(a.area.inside(area.high.x,area.low.z)) throw new AreaCollisionException();
			if(a.area.inside(area.low.x,area.high.z)) throw new AreaCollisionException();
			if(a.area.inside(area.high.x,area.high.z)) throw new AreaCollisionException();
		}
		noScan=new BigArea(area.low.x+7,bodenY+7,area.low.z+7,area.high.x-7,Integer.MAX_VALUE,area.high.z-7);
		areas.add(this);
		trace =new Trace(w,this);
		autobu=bluWg.size()<130000;
		fight =new Fight(this);
		setup();
	}

	public void freeze(){
		if(freeze) return;

		freeze=true;
		bc(new BcMsg(WGC._PREFIX_2_Area).a("Freeze activated."));
		sb.resetScores(_sb_freeze+_sb_off);
		info.getScore(_sb_freeze+_sb_on).setScore(8);
		bcSound(SoundKategory.AREA_STATE_CHANGE,Sound.BLOCK_FIRE_EXTINGUISH,0.5f);
	}

	public void thaw(){
		if(!freeze) return;

		freeze=false;
		bc(new BcMsg(WGC._PREFIX_2_Area).a("Freeze deactivated."));
		sb.resetScores(_sb_freeze+_sb_on);
		info.getScore(_sb_freeze+_sb_off).setScore(8);
		bcSound(SoundKategory.AREA_STATE_CHANGE,Sound.ENTITY_BLAZE_SHOOT,0.7f);
	}

	public boolean isFrozen(){
		return freeze;
	}

	public void prot(){
		if(!boom) return;

		boom=false;
		bc(new BcMsg(WGC._PREFIX_2_Area).a("Tnt deactivated."));
		sb.resetScores(_sb_tnt+_sb_on);
		info.getScore(_sb_tnt+_sb_off).setScore(9);
		bcSound(SoundKategory.AREA_STATE_CHANGE,Sound.ITEM_ARMOR_EQUIP_TURTLE,1f);
	}

	public void unprot(){
		if(boom) return;

		boom=true;
		bc(new BcMsg(WGC._PREFIX_2_Area).a("Tnt activated."));
		sb.resetScores(_sb_tnt+_sb_off);
		info.getScore(_sb_tnt+_sb_on).setScore(9);
		bcSound(SoundKategory.AREA_STATE_CHANGE,Sound.ENTITY_ITEM_BREAK,0f);
	}

	public boolean isntProt(){
		return boom;
	}

	public void startTrace(){
		if(tracing) return;

		tracing=true;
		trace.start();
		bc(new BcMsg(WGC._PREFIX_2_Area).a("Trace activated."));
		sb.resetScores(_sb_trace+_sb_off);
		info.getScore(_sb_trace+_sb_on).setScore(7);
	}

	public void stopTrace(){
		if(!tracing) return;

		trace.stop();
		tracing=false;
		bc(new BcMsg(WGC._PREFIX_2_Area).a("Trace deactivated."));
		sb.resetScores(_sb_trace+_sb_on);
		info.getScore(_sb_trace+_sb_off).setScore(7);
	}

	public void bluProtOn(){
		if(!WGC.advancedScoreboard) return;

		if(bluProt) return;

		bluProt=true;
		bc(new BcMsg(WGC._PREFIX_2_Area).a("Protection activated."));
		sb.resetScores(_sb_prot+_sb_off);
		info.getScore(_sb_prot+_sb_on).setScore(6);
		bcSound(SoundKategory.AREA_STATE_CHANGE,Sound.ITEM_ARMOR_EQUIP_LEATHER,0.7f);
	}

	public void bluProtOff(){
		if(!WGC.advancedScoreboard) return;

		if(!bluProt) return;

		backUp(new File(WGC.dataFolder+"/backup/"+System.currentTimeMillis()+"/"),true,WGC.mins());
		bluProt=false;
		bc(new BcMsg(WGC._PREFIX_2_Area).a("Protection deactivated."));
		sb.resetScores(_sb_prot+_sb_on);
		info.getScore(_sb_prot+_sb_off).setScore(6);
		bcSound(SoundKategory.AREA_STATE_CHANGE,Sound.BLOCK_WOOL_BREAK,0.2f);
	}

	public WgArea(BigCoord m,SmallArea ar,BigArea rw,BigArea bw,World wo,BigCoord rs,BigCoord bs,int am,String n,int y,boolean t,boolean f,boolean p,int afmf,boolean wr,boolean abu,boolean ra)throws Exception {
		mid        =m; redWg=rw; bluWg=bw; w=wo; redSpawn=rs; bluSpawn=bs; ausfahrm=am; name=n; bodenY=y; area=ar; boom=t; freeze=f;
		ausfm_front=afmf; restrictedAccess=ra;
		autobu     =abu;
		info       =sb.registerNewObjective("a","dummy",name);
		info.setDisplaySlot(DisplaySlot.SIDEBAR);
		waterremover=wr;
		for(final WgArea a:areas){
			if(a.w!=w) continue;
			if(a.area.inside(area.low.x,area.low.z)) throw new Exception();
			if(a.area.inside(area.high.x,area.low.z)) throw new Exception();
			if(a.area.inside(area.low.x,area.high.z)) throw new Exception();
			if(a.area.inside(area.high.x,area.high.z)) throw new Exception();
		}
		areas.add(this);
		bluProt=p;
		noScan =new BigArea(area.low.x+7,bodenY+7,area.low.z+7,area.high.x-7,Integer.MAX_VALUE,area.high.z-7);
		trace  =new Trace(w,this);
		fight  =new Fight(this);
		setup();
	}

	public static WgArea load(String name)throws Exception {
		final File f=new File(WGC.dataFolder+"/areas/"+C.encodeFileName(name)+".area");

		if(!f.exists()) throw new Exception("Area file not found");
		final YamlConfiguration y=YamlConfiguration.loadConfiguration(f);
		final World             w=Bukkit.getWorld(y.getString("w"));

		if(w==null) return null;

		final BigCoord  m =new BigCoord(y.getInt("m.x"),y.getInt("m.y"),y.getInt("m.z"));
		final SmallArea a =new SmallArea(y.getInt("l.x"),y.getInt("l.z"),y.getInt("h.x"),y.getInt("h.z"));
		final BigCoord  rs=new BigCoord(y.getInt("rs.x"),y.getInt("rs.y"),y.getInt("rs.z"));
		final BigCoord  bs=new BigCoord(y.getInt("bs.x"),y.getInt("bs.y"),y.getInt("bs.z"));
		final BigArea   rW=new BigArea(y.getInt("r.l.x"),y.getInt("r.l.y"),y.getInt("r.l.z"),y.getInt("r.h.x"),y.getInt("r.h.y"),y.getInt("r.h.z"));
		final BigArea   bW=new BigArea(y.getInt("b.l.x"),y.getInt("b.l.y"),y.getInt("b.l.z"),y.getInt("b.h.x"),y.getInt("b.h.y"),y.getInt("b.h.z"));
		final WgArea    ar=new WgArea(m,a,rW,bW,w,rs,bs,y.getInt("a",0),name,y.getInt("y"),y.getBoolean("t",false),y.getBoolean("f",false),y.getBoolean("r.prot",true),y.getInt("afmf",12),y.getBoolean("wr",false),y.getBoolean("autobu",true),y.getBoolean("restricted",false));

		if(y.contains("tbt")) ar.tb=TB.l(new C(y));
		return ar;
	}

	public void handleExplosion(EntityExplodeEvent e){
		if(tracing) trace.boom((TNTPrimed)e.getEntity(),e.getLocation());
		if(!boom){
			e.blockList().clear(); return;
		}
		if(bluProt&&e.getLocation().getBlockZ()<mid.z){
			if(System.currentTimeMillis()>lastProtWarn&&!e.blockList().isEmpty()){
				lastProtWarn=System.currentTimeMillis()+15000;
				bc(new BcMsg(WGC._PREFIX_2_Area).c("Exploion in build area has been cancelled."));
			}
			e.blockList().clear();
			if(tracing) trace.boom((TNTPrimed)e.getEntity(),e.getLocation());
			return;
		}
		if(!noScan.isInside(e.getLocation().getBlock()))
			for(final Iterator<Block>it=e.blockList().iterator(); it.hasNext();){
				final Block b=it.next();
				if(b.getY()<=bodenY||!area.inside(b.getX(),b.getZ())) it.remove();
			}
		if(waterremover) Bukkit.getScheduler().scheduleSyncDelayedTask(WGC.wgc,new WaterShed(e.blockList()),20);
	}

	/** Waterremover */
	private class WaterShed implements Runnable {
		private final List<Block>a;
		public WaterShed(List<Block>al){
			a=al;
		}

		@Override public void run(){
			base : for(final Block i : a) if(i.getY()>=wr_min_y){
					if(i.getType()!=Material.WATER) continue;
					if(fight!=null)
						if(fight.state!=FightState.WAITING)
							for(FightMod fm:fight.activeMods)
								if(fm.preWaterRemoval(i)) continue base;
					new SyncDrainer(i,200);
				}
			if(fight!=null)
				if(fight.state!=FightState.WAITING)
					//TECH KO
					if(fight.tko){
						if(!redWg.contains(Material.WATER,w)){
							fight.bc("Blue has won (TechKo)");
							fight.end();
						}
						else if(!bluWg.contains(Material.WATER,w)){
							fight.bc("Red has won (TechKo)");
							fight.end();
						}
					}

		}
	}
	private void setup(){
		updateSb();
	}

	public void updateSb(){
		for(final String i:sb.getEntries()) sb.resetScores(i);
		info.getScore(_sb_tnt+(boom?_sb_on:_sb_off)).setScore(9);
		info.getScore(_sb_freeze+(freeze?_sb_on:_sb_off)).setScore(8);
		if(trace==null) info.getScore(_sb_trace+_sb_off).setScore(7);
		else info.getScore(_sb_trace+(trace.on()?_sb_on:_sb_off)).setScore(7);
		if(WGC.advancedScoreboard){
			info.getScore(_sb_prot+(bluProt?_sb_on:_sb_off)).setScore(6);
			info.getScore(_sb_wr+(waterremover?_sb_on:_sb_off)).setScore(5);
			info.getScore(_sb_bu_status+(autobu?_sb_on:_sb_off)).setScore(4);
		}
		if(autobu) info.getScore(_sb_last_bu+last_bu).setScore(3);
	}

	public void genBoden(WeSender s){
		final AsyncMultiEditor e=new AsyncMultiEditor(s);

		// mass boden
		e.a(new AsyncSetO(w,new BigArea(area.low.x+1,bodenY,area.low.z+1,area.high.x-1,bodenY,mid.z-1),ATheme.get(thm,ThemeMat.OWN_ARENA,false),false,e))
		.a(new AsyncSetO(w,new BigArea(area.low.x+1,bodenY,mid.z+1,area.high.x-1,bodenY,area.high.z-1),ATheme.get(thm,ThemeMat.OWN_ARENA,true),false,e));
		// wg outline
		WallCreator.add(e,w,bluWg.toSmall().toBigArea(bodenY),ATheme.get(thm,ThemeMat.OWN_LIGHT,false),false);
		WallCreator.add(e,w,redWg.toSmall().toBigArea(bodenY),ATheme.get(thm,ThemeMat.OWN_LIGHT,true),false);
		// ausfahrmasze
		WallCreator.add(e,w,new BigArea(bluWg.low.x-ausfahrm,bodenY,bluWg.low.z-ausfahrm,bluWg.high.x+ausfahrm,bodenY,bluWg.high.z+ausfm_front),ATheme.get(thm,ThemeMat.OWN_DARK,false),false);
		WallCreator.add(e,w,new BigArea(redWg.low.x-ausfahrm,bodenY,redWg.low.z-ausfm_front,redWg.high.x+ausfahrm,bodenY,redWg.high.z+ausfahrm),ATheme.get(thm,ThemeMat.OWN_DARK,true),false);
		// areana outline
		final Material ahl=ATheme.get(thm,ThemeMat.ARENA_HIGHLIGHT,false);

		WallCreator.add(e,w,area.toBigArea(bodenY),ahl,false);
		// mittel-linien
		e.a(new AsyncSetO(w,new BigArea(redWg.xSize()%2==0?mid.x-1:mid.x,bodenY,area.high.z-1,mid.x,bodenY,area.low.z+1),ahl,false,e));
		e.a(new AsyncSetO(w,new BigArea(area.low.x+1,bodenY,mid.z,area.high.x-1,bodenY,mid.z+1),ahl,false,e));
		e.exe();
	}

	public void saveCfg(){
		final File f=new File(WGC.dataFolder+"/areas/"+C.encodeFileName(name)+".area");

		if(!f.exists()) try{if(!f.getParentFile().exists()) f.getParentFile().mkdirs(); f.createNewFile();}catch(final IOException e){LogHandler.handleException(e); return;}
		final YamlConfiguration y=new YamlConfiguration();

		y.set("w",w.getName());
		y.set("t",boom);
		y.set("f",freeze);
		y.set("a",ausfahrm);
		y.set("y",bodenY);
		y.set("l.x",area.low.x);
		y.set("h.x",area.high.x);
		y.set("l.z",area.low.z);
		y.set("h.z",area.high.z);
		y.set("m.x",mid.x);
		y.set("m.y",mid.y);
		y.set("m.z",mid.z);
		y.set("rs.x",redSpawn.x);
		y.set("rs.y",redSpawn.y);
		y.set("rs.z",redSpawn.z);
		y.set("bs.x",bluSpawn.x);
		y.set("bs.y",bluSpawn.y);
		y.set("bs.z",bluSpawn.z);
		y.set("r.l.x",redWg.low.x);
		y.set("r.l.y",redWg.low.y);
		y.set("r.l.z",redWg.low.z);
		y.set("r.h.x",redWg.high.x);
		y.set("r.h.y",redWg.high.y);
		y.set("r.h.z",redWg.high.z);
		y.set("b.l.x",bluWg.low.x);
		y.set("b.l.y",bluWg.low.y);
		y.set("b.l.z",bluWg.low.z);
		y.set("b.h.x",bluWg.high.x);
		y.set("b.h.y",bluWg.high.y);
		y.set("b.h.z",bluWg.high.z);
		y.set("r.prot",bluProt);
		y.set("afmf",ausfm_front);
		y.set("wr",waterremover);
		y.set("autobu",autobu);
		y.set("restricted",restrictedAccess);
		tb.s(new C(y));
		try{y.save(f);}catch(final IOException e){LogHandler.handleException(e);}
	}

	public boolean ii2(Block l){
		if(l.getWorld()!=w) return false; return area.inside(l.getX(),l.getZ());
	}
}
