/*
 * Copyright 2021 Jan9103 (@jan9103:matrix.org Jan9103.wargear@protonmail.com)
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software,
 * and to permit third-parties to whom the Software is furnished to do so, all
 * subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR
 * ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
package de.jan9103.wargearcore.area.tb;

import java.io.File;
import java.util.ArrayList;
import java.util.List;

import org.bukkit.Bukkit;

import de.jan9103.wargearcore.C;
import de.jan9103.wargearcore.WGC;
import de.jan9103.wargearcore.area.TbCmd;
import de.jan9103.wargearcore.area.WgArea;
import de.jan9103.wargearcore.area.tb.s.Shield;
import de.jan9103.wargearcore.chat.BcMsg;
import de.jan9103.wargearcore.worldedit.WEArea;
import de.jan9103.wargearcore.worldedit.clip.Clipboard;
import de.jan9103.wargearcore.worldedit.editors.AsyncMultiEditor;
import de.jan9103.wargearcore.worldedit.editors.WeSender;
import de.jan9103.wargearcore.worldedit.editors.async.AsyncPaste4b;
import de.jan9103.wargearcore.worldedit.schem.SV2i;
import de.jan9103.wargearcore.worldedit.schem.SchemFormat;

/**
 * schematic based testblock design
 */
public class SchemTb extends TB {
	private final String schem;
	public SchemTb(WgArea a){
		schem=a.name+".jsv2i";
		final Clipboard cb=new Clipboard(new WEArea(a.redWg,a.w),a.mid.block(a.w));
		final SV2i      i =new SV2i();

		Bukkit.getScheduler().runTaskAsynchronously(WGC.wgc,()->i.save(new File(WGC.dataFolder+"/schem/Tb/"+schem),cb));
	}

	public SchemTb(String sche,WgArea a){
		schem=sche+".jsv2i";
		final File f=new File(WGC.dataFolder+"/schem/Tb/"+schem);

		if(!f.exists()){
			final Clipboard cb=new Clipboard(new WEArea(a.redWg,a.w),a.mid.block(a.w));
			final SV2i      i =new SV2i();
			Bukkit.getScheduler().runTaskAsynchronously(WGC.wgc,()->i.save(new File(WGC.dataFolder+"/schem/Tb/"+schem),cb));
		}
	}

	public SchemTb(C c){
		schem=c.gs("tb.s","tb.jsv2i");
		List<String>sl=c.gsl("shields");

		for(String i:sl){
			String[] ta=i.split(" ");
			String[] na=new String[ta.length+1];
			na[0]="";
			System.arraycopy(ta,0,na,1,ta.length);
			Shield ts=TbCmd.pS(na,null,null);
			if(ts!=null) s.add(ts);
		}
	}

	@Override public void p(WgArea ar,WeSender s){
		final File f=new File(WGC.dataFolder+"/schem/Tb/"+schem);

		if(!f.exists()){
			ar.bc(new BcMsg(WGC._PREFIX_2_Area).b("Testblock-Schematic "+schem+" does not exist.")); return;
		}
		Bukkit.getScheduler().runTaskAsynchronously(WGC.wgc,()->{
			final AsyncMultiEditor e=new AsyncMultiEditor(s);
			Clipboard cb            =SchemFormat.parseAndLoad(f);
			e.a(new AsyncPaste4b(ar.w,ar.mid,e,cb));
			addShields(ar,e);
			e.run();
		});
	}

	@Override public void s(C c){
		c.s("tb.t",3);
		c.s("tb.s",schem);
		ArrayList<String>sds=new ArrayList<>();

		for(Shield i:s) sds.add(i.toString());
		c.s("shields",sds);
	}

	@Override
	public AsyncMultiEditor pLater(WgArea ar,WeSender s){
		final File f=new File(WGC.dataFolder+"/schem/Tb/"+schem);

		if(!f.exists()){
			ar.bc(new BcMsg(WGC._PREFIX_2_Area).b("Testblock-Schematic "+schem+" does not exist.")); return new AsyncMultiEditor(s);
		}
		final AsyncMultiEditor e=new AsyncMultiEditor(s);
		Clipboard cb            =SchemFormat.parseAndLoad(f);

		e.a(new AsyncPaste4b(ar.w,ar.mid,e,cb));
		addShields(ar,e);
		return e;
	}
}
