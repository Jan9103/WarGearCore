/*
 * Copyright 2021 Jan9103 (@jan9103:matrix.org Jan9103.wargear@protonmail.com)
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software,
 * and to permit third-parties to whom the Software is furnished to do so, all
 * subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR
 * ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
package de.jan9103.wargearcore.area;

import java.io.File;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.function.BiConsumer;

import org.bukkit.Bukkit;
import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.World;
import org.bukkit.command.Command;
import org.bukkit.command.CommandSender;
import org.bukkit.command.TabExecutor;
import org.bukkit.entity.Player;
import org.bukkit.event.inventory.InventoryClickEvent;
import org.bukkit.event.inventory.InventoryType.SlotType;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.PlayerInventory;

import de.jan9103.wargearcore.C;
import de.jan9103.wargearcore.User;
import de.jan9103.wargearcore.UserManager;
import de.jan9103.wargearcore.WGC;
import de.jan9103.wargearcore.chat.BcMsg;
import de.jan9103.wargearcore.chat.ChatColor;
import de.jan9103.wargearcore.chat.Co;
import de.jan9103.wargearcore.chat.Msg;
import de.jan9103.wargearcore.cmds.UserOnlyCmd;
import de.jan9103.wargearcore.coordSys.BigCoord;
import de.jan9103.wargearcore.util.TPS;
import de.jan9103.wargearcore.util.gui.InvClickMenu;
import de.jan9103.wargearcore.util.gui.InvClickMenu.InvClickMenuBuilder;
import de.jan9103.wargearcore.worldedit.clip.Clipboard;
import de.jan9103.wargearcore.worldedit.editors.AsyncMultiEditor;
import de.jan9103.wargearcore.worldedit.editors.async.AsyncAir;
import de.jan9103.wargearcore.worldedit.schem.SV2i;

public class AreaCmd extends UserOnlyCmd implements TabExecutor {
	public static final Comparator<WgArea>areaComparator=new Comparator<WgArea>(){
		public int compare(WgArea a,WgArea b){
			return a.name.compareToIgnoreCase(b.name);
		}
	};
	@Override public void exe(String[] a,User u,Player p){
		if(a.length<1){
			gui(u); return;
		}
		final WgArea w=WgArea.inside(u.eyeLoc());

		switch(a[0].toLowerCase()){
		case "theme": {
			if(w==null){
				new Msg(u,WGC._PREFIX_2_Area).b("You have to be inside an area.").a(p); return;
			}
			if(w.restrictedAccess&&!p.hasPermission("wgc.wga.unrestricted")){
				new Msg(u,WGC._PREFIX_2_Area).b("Missing Permission for this area").a(p); return;
			}
			if(a.length<2){
				new Msg(u,WGC._PREFIX_2_Area).a("Themes:").d().aC("Gray",Msg.RUN,"/a theme gray","apply")
				.d().aC("Light (sandstone based)",Msg.RUN,"/a theme light","apply")
				.d().aC("WT (smooth stone based)",Msg.RUN,"/a theme wt","apply")
				.d().aC("CS",Msg.RUN,"/a theme cs","apply")
				.d().aC("Winter (snow & ice)",Msg.RUN,"/a theme winter","apply")
				.d().aC("Worlds (red=nether blu=grassland)",Msg.RUN,"/a theme worlds","apply")
				.d().aC("DPR",Msg.RUN,"/a theme dpr")
				.a(p);
				return;
			}
			switch(a[1].toLowerCase()){
			case "gray": w.thm=ATheme.THM.GRAY; break;

			case "light": w.thm=ATheme.THM.SANDSTONE; break;

			case "wt": w.thm=ATheme.THM.WT; break;

			case "cs": w.thm=ATheme.THM.CONSTRUCT; break;

			case "winter": w.thm=ATheme.THM.WINTER; break;

			case "worlds": w.thm=ATheme.THM.WORLDS; break;

			case "dpr": w.thm=ATheme.THM.DPR; break;

			default: p.sendMessage("Unknown Theme.."); return;
			}
			w.bc(new BcMsg(WGC._PREFIX_2_Area).a("Theme changed to ").c(a[1].toUpperCase()).a("."));
			return;
		}

		case "restrict": {
			if(!p.hasPermission("wgc.wga.admin")){
				new Msg(u,WGC._PREFIX_2_Area).b("Missing permission.").a(p); return;
			}
			if(w==null){
				new Msg(u,WGC._PREFIX_2_Area).b("You have to be inside an area.").a(p); return;
			}
			w.restrictedAccess=true;
			new Msg(u,WGC._PREFIX_2_Area).a("Access is now restricted").a(p);
			return;
		}

		case "unrestrict": {
			if(!p.hasPermission("wgc.wga.admin")){
				new Msg(u,WGC._PREFIX_2_Area).b("Missing permission.").a(p); return;
			}
			if(w==null){
				new Msg(u,WGC._PREFIX_2_Area).b("You have to be inside an area.").a(p); return;
			}
			w.restrictedAccess=false;
			new Msg(u,WGC._PREFIX_2_Area).a("Access is no longer restricted").a(p);
			return;
		}

		case "list":
		case "l": {
			final File f=new File(WGC.dataFolder+"/areas");
			final Msg  m=new Msg(u).d("######### ").a("Areas: ").d("############");
			for(final File i:f.listFiles()){
				if(!i.isFile()) continue;
				if(!i.getName().endsWith(".area")) continue;
				final String nm=C.decodeFileName(i.getName().substring(0,i.getName().length()-5));
				if(WgArea.get(nm)!=null)
					m.d().aC(" - "+nm+" (loaded)",Msg.RUN,"/a tp "+nm,"TP");
				else
					m.d().aC(" - "+nm,Msg.RUN,"/a load "+nm,"load");
			}
			m.d("\n############################").a(p);
			return;
		}

		case "redSpawn":
			if(!p.hasPermission("wgc.wga.admin")){
				new Msg(u,WGC._PREFIX_2_Area).b("Missing permission.").a(p); return;
			}
			if(u.curAr==null){
				new Msg(u,WGC._PREFIX_2_Area).b("You have to be inside an area.").a(p); return;
			}
			u.curAr.redSpawn=new BigCoord(p.getLocation());
			new Msg(u,WGC._PREFIX_2_Area).a("Red spawn set.").a(p);
			return;

		case "bluSpawn":
		case "blueSpawn":
			if(!p.hasPermission("wgc.wga.admin")){
				new Msg(u,WGC._PREFIX_2_Area).b("Missing permission.").a(p); return;
			}
			if(u.curAr==null){
				new Msg(u,WGC._PREFIX_2_Area).b("You have to be inside an area.").a(p); return;
			}
			u.curAr.bluSpawn=new BigCoord(p.getLocation());
			new Msg(u,WGC._PREFIX_2_Area).a("Blu spawn set.").a(p);
			return;

		case "create":
			if(!p.hasPermission("wgc.wga.admin")){
				new Msg(u,WGC._PREFIX_2_Area).b("Missing permission.").a(p); return;
			}
			try{
				switch(a.length){
				case 3:
					if(new File(WGC.dataFolder+"/areas/"+a[2]+".area").exists()){
						new Msg(u,WGC._PREFIX_2_Area).b("Name already in use").a(p); return;
					}
					if(WgArea.get(a[2])!=null){
						new Msg(u,WGC._PREFIX_2_Area).b("Name already in use.").a(p); return;
					}
					WgArea wga;
					switch(a[1].toUpperCase()){
					case "MWG":
						wga=new WgArea(37,26,22,7,5,u.loc(),u.eyeLoc().getWorld(),a[2],7,50);
						break;

					case "WG":
						wga=new WgArea(67,41,47,20,5,u.loc(),u.eyeLoc().getWorld(),a[2],12,50);
						break;

					case "T1":
						wga=new WgArea(23,23,23,8,5,u.loc(),u.eyeLoc().getWorld(),a[2],8,50);
						break;

					case "T2":
						wga=new WgArea(45,32,35,12,5,u.loc(),u.eyeLoc().getWorld(),a[2],12,50);
						break;

					case "T3":
						wga=new WgArea(67,41,47,16,5,u.loc(),u.eyeLoc().getWorld(),a[2],12,50);
						break;

					case "MICRO":
						wga=new WgArea(7,7,7,12,5,u.loc(),u.eyeLoc().getWorld(),a[2],12,50);
						break;

					default:
						new Msg(u,WGC._PREFIX_2_Area).b("Unknown ruleset.").a(p);
						return;
					}
					if(WgArea.areas.contains(wga))
						new Msg(u,WGC._PREFIX_2_Area).a("Craeted.").a(p);
					else
						new Msg(u,WGC._PREFIX_2_Area).b("The area collides with another already created area.").a(p);
					return;

				case 9:
					try{final int xS=Integer.parseInt(a[1]),yS=Integer.parseInt(a[2]),zS=Integer.parseInt(a[3]),aS=Integer.parseInt(a[4]),afS=Integer.parseInt(a[5]),eS=Integer.parseInt(a[6]),entf=Integer.parseInt(a[7]);
					    if(xS<2||yS<2||zS<2){
						    new Msg(u,WGC._PREFIX_2_Area).b("These sizes are too small.").a(p);
						    return;
					    }
					    if(WgArea.get(a[6])!=null){
						    new Msg(u,WGC._PREFIX_2_Area).b("Name already in use.").a(p); return;
					    }
					    if(new File(WGC.dataFolder+"/areas/"+a[6]+".area").exists()){
						    new Msg(u,WGC._PREFIX_2_Area).b("Name already in use.").a(p); return;
					    }
					    wga=new WgArea(xS,yS,zS,aS,eS,u.loc(),u.eyeLoc().getWorld(),a[8],afS,entf);
					    if(WgArea.areas.contains(w)) new Msg(u,WGC._PREFIX_2_Area).b("Area created.").a(p);
					    else new Msg(u,WGC._PREFIX_2_Area).b("The area would've collided with another one.").a(p); }catch(NumberFormatException e){new Msg(u,WGC._PREFIX_2_Area).b("Invalid Arguments (not a number).").a(p);}
					return;

				default:
					new Msg(u,WGC._PREFIX_2_Area).b("Unknwon syntax.").a(p);
					return;
				}
			}catch(final AreaCollisionException e){new Msg(u,WGC._PREFIX_2_Area).b("Invalid (Collides or invalid arguments).").a(p); return;}

		case "floor":
			if(w==null){
				new Msg(u,WGC._PREFIX_2_Area).b("You have to be inside an area.").a(p); return;
			}
			if(w.restrictedAccess&&!p.hasPermission("wgc.wga.unrestricted")){
				new Msg(u,WGC._PREFIX_2_Area).b("Missing Permission for this area").a(p); return;
			}
			w.genBoden(u);
			return;

		case "prot":
		case "protect":
			if(w==null){
				new Msg(u,WGC._PREFIX_2_Area).b("You have to be inside an area.").a(p); return;
			}
			if(w.restrictedAccess&&!p.hasPermission("wgc.wga.unrestricted")){
				new Msg(u,WGC._PREFIX_2_Area).b("Missing Permission for this area").a(p); return;
			}
			if(w.bluProt) w.bluProtOff();
			else w.bluProtOn();
			return;

		case "frame":
		case "rahmen":
			if(w==null){
				new Msg(u,WGC._PREFIX_2_Area).b("You have to be inside an area.").a(p); return;
			}
			if(w.restrictedAccess&&!p.hasPermission("wgc.wga.unrestricted")){
				new Msg(u,WGC._PREFIX_2_Area).b("Missing Permission for this area").a(p); return;
			}
			if(a.length>1)
				switch(a[1].toLowerCase()){
				case "blu":
				case "blue":
				case "b": break;

				case "red":
				case "r":
					w.redWg.genRahmen(u,w.w,ATheme.get(w.thm,ThemeMat.OWN_DARK,true));
					new Msg(u,WGC._PREFIX_2_Area).a("Frame created.").a(p);
					return;

				default:
					new Msg(u,WGC._PREFIX_2_Area).b("only 'r' 'red' 'b' 'blu' and 'blue' are valid arguments here.").a(p);
					return;
				}
			w.bluWg.genRahmen(u,w.w,ATheme.get(w.thm,ThemeMat.OWN_DARK,false));
			new Msg(u,WGC._PREFIX_2_Area).a("Frame created.").a(p);
			return;

		case "sel":
		case "select":
			if(w==null){
				new Msg(u,WGC._PREFIX_2_Area).b("You have to be inside an area.").a(p); return;
			}
			if(w.restrictedAccess&&!p.hasPermission("wgc.wga.unrestricted")){
				new Msg(u,WGC._PREFIX_2_Area).b("Missing Permission for this area").a(p); return;
			}
			if(a.length>1)
				switch(a[1].toLowerCase()){
				case "blu":
				case "blue":
				case "b": break;

				case "red":
				case "r":
					u.getWE().setA(w.w.getBlockAt(w.redWg.low.x,w.redWg.low.y,w.redWg.low.z));
					u.getWE().setB(w.w.getBlockAt(w.redWg.high.x,w.redWg.high.y,w.redWg.high.z));
					new Msg(u,WGC._PREFIX_2_Edit).a("Selected RED side.").a(p);
					return;

				default:
					new Msg(u,WGC._PREFIX_2_Area).b("Unkown side. Allowed sides: 'blue', 'blu', 'b', 'red', 'r' (or nothing for blue)").a(p);
					return;
				}
			u.getWE().setA(w.w.getBlockAt(w.bluWg.low.x,w.bluWg.low.y,w.bluWg.low.z));
			u.getWE().setB(w.w.getBlockAt(w.bluWg.high.x,w.bluWg.high.y,w.bluWg.high.z));
			new Msg(u,WGC._PREFIX_2_Edit).a("Selected BLU side.").a(p);
			return;

		case "tp":
		case "t": {
			/** trilians */
			byte   tnt=2,freeze=2,playerthere=-1,fight=-1;
			World  world=null;
			String regex=null,iregex=null;
			if(a.length>1){
				final WgArea wga=WgArea.get(a[1]);
				if(wga==null){
					new Msg(u,WGC._PREFIX_2_Area).b("Invalid (or unloaded) area name.").a(p); return;
				}
				if(wga.restrictedAccess&&!p.hasPermission("wgc.wga.unrestricted")){
					new Msg(u,WGC._PREFIX_2_Area).b("Missing permissions.").a(p); return;
				}
				u.tp(new Location(wga.w,wga.mid.x,wga.mid.y,wga.mid.z));
				new Msg(u,WGC._PREFIX_2_Area).a("Teleportet.").a(p);
				return;
			}
			ArrayList<WgArea>as=new ArrayList<>();
			final boolean perm = p.hasPermission("wgc.wga.unrestricted");
			arealoop : for(WgArea i : WgArea.areas){
				if(i.restrictedAccess&&!perm){continue;}
				as.add(i);
			}
			if(as.isEmpty()){
				new Msg(u,WGC._PREFIX_2_Area).a("No area found.").a(p); return;
			}
			as.sort(areaComparator);
			if(as.size()>54){
				//TODO CHAT
				Msg m=new Msg(u,WGC._PREFIX_2_Area).a("Area search-result:");
				for(WgArea i:as)
					m.d().aC(i.name,Msg.RUN,"/a tp "+i.name,"tp");
				m.a(p);
			}
			else{
				//GUI
				final InvClickMenuBuilder b=new InvClickMenuBuilder(u).setTitle("Teleport to Area");
				for(final WgArea z:as)
					switch(z.bluWg.xSize()){
					case 23: b.addOption(Material.CONDUIT,z.name); continue;
					case 37: b.addOption(Material.END_STONE_BRICK_SLAB,z.name); continue;
					case 45: b.addOption(Material.END_PORTAL_FRAME,z.name); continue;
					case 67:
						switch(z.ausfahrm){
						case 20: b.addOption(Material.END_STONE_BRICKS,z.name); continue;
						case 16: b.addOption(Material.END_STONE,z.name); continue;
						}
					default: b.addOption(Material.ENDER_PEARL,z.name);
					}
				b.build(new GuiTpHandler(WgArea.areas.size()-1));
			}
			return;
		}

		case "load":
		case "laod": // common typo
			if(!p.hasPermission("wgc.wga.admin")){
				new Msg(u,WGC._PREFIX_2_Area).b("Missing WGA.admin permission.").a(p); return;
			}
			try{
				if(a.length<2){
					Msg.missArg(u,"Area",p); return;
				}
				if(WgArea.get(a[1])!=null){
					new Msg(u,WGC._PREFIX_2_Area).b("Already loaded.").a(p); return;
				}
				final WgArea wga=WgArea.load(a[1]);
				if(wga==null){
					new Msg(u,WGC._PREFIX_2_Area).b("Unknown area.").a(p); return;
				}
				if(!WgArea.areas.contains(wga)){
					new Msg(u,WGC._PREFIX_2_Area).b("It would collide with another area - please unload the other one first.").a(p); return;
				}
				new Msg(u,WGC._PREFIX_2_Area).a("loaded.").a(p);
				return;
			}catch(final Exception e){new Msg(u,WGC._PREFIX_2_Area).b("It would've collided with another area.").a(p); return;}

		case "unload": {
			if(!p.hasPermission("wgc.wga.admin")){
				new Msg(u,WGC._PREFIX_2_Area).b("Missing WGA.admin permission.").a(p); return;
			}
			if(a.length<2){
				Msg.missArg(u,"Area",p); return;
			}
			final WgArea wga=WgArea.get(a[1]);
			if(wga==null){
				new Msg(u,WGC._PREFIX_2_Area).b("Invalid area.").a(p); return;
			}
			wga.saveCfg();
			WgArea.areas.remove(wga);
			new Msg(u,WGC._PREFIX_2_Area).a("unlaoded.").a(p);
			return;
		}

		case "setspawn":
			if(!p.hasPermission("wgc.wga.admin")){
				new Msg(u,WGC._PREFIX_2_Area).b("Missing WGA.admin permission.").a(p); return;
			}
			if(u.curAr==null){
				new Msg(u).b("Youre not in a area..").a(p); return;
			}
			if(a.length<2){
				new Msg(u).b("Missing argument \"red\" or \"blue\"").a(p); return;
			}
			switch(a[1].toLowerCase()){
			case "red":
			case "r": u.curAr.redSpawn=new BigCoord(p.getLocation()); break;

			case "blue":
			case "b":
			case "blu": u.curAr.bluSpawn=new BigCoord(p.getLocation()); break;

			default: new Msg(u,WGC._PREFIX_2_Area).b("Unknwon side.."); return;
			}
			new Msg(u,WGC._PREFIX_2_Area).a("Spawnpoint set.").a(p);
			return;

		case "waterremover":
		case "wr":
			if(w==null){
				new Msg(u,WGC._PREFIX_2_Area).b("You have to be inside an area.").a(p); return;
			}
			if(w.restrictedAccess&&!p.hasPermission("wgc.wga.unrestricted")){
				new Msg(u,WGC._PREFIX_2_Area).b("Missing Permission for this area").a(p); return;
			}
			w.bc(new BcMsg(WGC._PREFIX_2_Area).a("Waterremover "+((w.waterremover=!w.waterremover)?"":"de")+"activated."));
			w.updateSb();
			return;

		case "ticketon":
			if(!p.hasPermission("wgc.wga.admin")){
				new Msg(u,WGC._PREFIX_2_Area).b("Missing WGA.admin permission.").a(p); return;
			}
			if(w==null){
				new Msg(u,WGC._PREFIX_2_Area).b("You have to be inside an area.").a(p); return;
			}
			w.ticketOn();
			p.sendMessage("ticket on");
			return;

		case "ticketoff":
			if(!p.hasPermission("wgc.wga.admin")){
				new Msg(u,WGC._PREFIX_2_Area).b("Missing WGA.admin permission.").a(p); return;
			}
			if(w==null){
				new Msg(u,WGC._PREFIX_2_Area).b("You have to be inside an area.").a(p); return;
			}
			w.ticketOff();
			p.sendMessage("ticket off");
			return;

		case "reset":
			if(!p.hasPermission("wgc.wga.admin")){
				new Msg(u,WGC._PREFIX_2_Area).b("Missing WGA.admin permission.").a(p); return;
			}
			w.bc(new BcMsg(WGC._PREFIX_2_Area).a("Backup and reset in Progress, please be patient and wait for completion."));
			w.backUp(new File(WGC.dataFolder+"/backup/"+System.currentTimeMillis()),false,WGC.mins());
			AsyncMultiEditor ame=w.tb.pLater(w,u);
			TPS.ign();
			ame.aFirst(new AsyncAir(w.w,w.area.toBigArea(w.bodenY+1,w.bodenY+w.redWg.high.y+w.ausfahrm+5),false,ame));
			w.bluWg.genRahmenLater(ame,w.w,ATheme.get(w.thm,ThemeMat.OWN_DARK,false));
			ame.run();
			return;

		case "bu":
		case "backup":
			if(!p.hasPermission("wgc.wga.admin")){
				new Msg(u,WGC._PREFIX_2_Area).b("Missing WGA.admin permission.").a(p); return;
			}
			if(w==null){
				new Msg(u).b("You need to be inside an area for this..").a(p); return;
			}
			if(a.length==1){
				//GUI
				Bukkit.getScheduler().runTaskAsynchronously(WGC.wgc,()->{
					final String nma=w.name+".jsv2i";
					final InvClickMenuBuilder icm=new InvClickMenuBuilder(u).setTitle("load backup (higher number=newer)");
					for(final File ii:new File(WGC.dataFolder+"/backup").listFiles())
						if(new File(ii+"/"+nma).exists())
							icm.addOption(Material.STONE,ii.getName());
					if(icm.options()==0) new Msg(u,WGC._PREFIX_2_Area).b("No backups found").a(p);
					else Bukkit.getScheduler().runTask(WGC.wgc,()->icm.build((e,us)->{
							e.setCancelled(true);
							if(e.getSlotType()!=SlotType.CONTAINER) return;

							final ItemStack i=e.getCurrentItem();
							if(i==null){
								e.getWhoClicked().closeInventory(); return;
							}
							if(i.getType()!=Material.STONE) return;

							p.performCommand("a bu "+i.getItemMeta().getDisplayName());
						}));
				});
				return;
			}
			switch(a[1].toLowerCase()){
			case "off": w.autobu=false; new Msg(u,WGC._PREFIX_2_Area).a("Auto Backup deactivated."); w.updateSb(); return;

			case "on": w.autobu=true; new Msg(u,WGC._PREFIX_2_Area).a("Auto Backup activated."); w.updateSb(); return;

			case "save": {
				File f=new File(WGC.dataFolder+"/backup/"+System.currentTimeMillis());
				f.mkdir();
				w.backUp(new File(f+"/"+w.name+".jsv2i"),false,WGC.mins()); w.bc(new BcMsg(WGC._PREFIX_2_Area).a("Backup.")); return;
			}
			}
			try{
				final long id=Long.parseLong(a[1]);
				final File f =new File(WGC.dataFolder+"/backup/"+id+"/"+w.name+".jsv2i");
				if(!f.exists()){
					new Msg(u).bC("Backup not found..",Msg.RUN,"/a bu","Open Backup GUI").a(p); return;
				}
				final Clipboard i=new SV2i().load(f);
				i.autoPaste(w.mid.block(w.w),u);
			}catch(final NumberFormatException e){new Msg(u).b("Thats not a valid id..").a(p);}
			return;

		case "delete": {
			if(!p.hasPermission("wgc.wga.admin")){
				new Msg(u,WGC._PREFIX_2_Area).b("Missing WGA.admin permission.").a(p); return;
			}
			if(a.length<2){
				Msg.missArg(u,WGC._PREFIX_2_Area,p); return;
			}
			final WgArea wga=WgArea.get(a[1]);
			if(wga==null){
				new Msg(u,WGC._PREFIX_2_Area).b("Invalid area.").a(p); return;
			}
			WgArea.areas.remove(wga);
			final File f=new File(WGC.dataFolder+"/areas/"+wga.name+".area");
			if(f.exists()) f.delete();
			new Msg(u,WGC._PREFIX_2_Area).a("deleted.").a(p);
			return;
		}

		default:
			new Msg(u,WGC._PREFIX_2_Area).b("Unknwon sub command.").a(p);
			return;
		}
	}

	public void gui(User u){//TODO LStr!
		final WgArea w=WgArea.inside(u.eyeLoc());

		if(w==null){
			if(WgArea.areas.size()>54){
				new Msg(u,WGC._PREFIX_2_Area).b("The teleport menu can't handle more than 54 loaded areas.").a(u); return;
			}
			final InvClickMenu.InvClickMenuBuilder b=new InvClickMenu.InvClickMenuBuilder(u)
								  .setTitle(Co.NORM,"Teleport to Area");
			for(final WgArea a:WgArea.areas)
				switch(a.bluWg.xSize()){
				case 23: b.addOption(Material.CONDUIT,a.name); continue;

				case 37: b.addOption(Material.END_STONE_BRICK_SLAB,a.name); continue;

				case 45: b.addOption(Material.END_PORTAL_FRAME,a.name); continue;

				case 67:
					switch(a.ausfahrm){
					case 20: b.addOption(Material.END_STONE_BRICKS,a.name); continue;

					case 16: b.addOption(Material.END_STONE,a.name); continue;
					}

				default: b.addOption(Material.ENDER_PEARL,a.name);
				}
			b.build(new GuiTpHandler(WgArea.areas.size()-1));
			return;
		}
		new InvClickMenuBuilder(u)
		.addOption(Material.END_STONE,Co.NORM,"Testblock")
		.addOption(Material.SCAFFOLDING,Co.NORM,"Scaffolding")
		.addOption(Material.GOLDEN_HOE,Co.NORM,"Select")
		.addOption(Material.LIGHT_GRAY_CARPET,Co.NORM,"Floor")
		.addOption(Material.BUCKET,Co.NORM,"Water Remover")
		.addOption(Material.DIAMOND_CHESTPLATE,Co.NORM,"Protection")
		.addOption(Material.TNT,Co.NORM,"Tnt")
		.setTitle(Co.NORM,"Area "+ChatColor.a(u.ct,Co.HIGH)+w.name)
		.build((e,us)->{
			e.setCancelled(true);
			if(e.getSlotType()==SlotType.OUTSIDE) return;

			if(e.getInventory() instanceof PlayerInventory) return;

			if(e.getSlot()>8||e.getSlot()<0) return;

			final ItemStack i=e.getInventory().getItem(e.getSlot());
			if(i==null){
				e.getWhoClicked().closeInventory(); return;
			}
			switch(i.getType()){
			case LIGHT_GRAY_CARPET:
				w.genBoden(u);
				return;

			case SCAFFOLDING:
				w.bluWg.genRahmen(u,w.w,ATheme.get(w.thm,ThemeMat.OWN_DARK,false));
				return;

			case GOLDEN_HOE:
				u.getWE().setA(w.w.getBlockAt(w.bluWg.low.x,w.bluWg.low.y,w.bluWg.low.z));
				u.getWE().setB(w.w.getBlockAt(w.bluWg.high.x,w.bluWg.high.y,w.bluWg.high.z));
				new Msg(u,WGC._PREFIX_2_Edit).a("Positions set.").a(u);
				return;

			case END_STONE:
				w.tb.p(w,u);
				return;

			case BUCKET:
				w.waterremover=!w.waterremover;
				new Msg(u).a("Waterremover "+(w.waterremover?"on":"off")).a(u);
				w.updateSb();
				return;

			case DIAMOND_CHESTPLATE:
				if(w.bluProt) w.bluProtOff();
				else w.bluProtOn();
				return;

			case TNT:
				if(w.isntProt()) w.prot();
				else w.unprot();
				return;

			default: return;
			}
		});
	}

	private class GuiTpHandler implements BiConsumer<InventoryClickEvent,User> {
		private final int max; public GuiTpHandler(int m){
			max=m;
		}

		@Override public void accept(InventoryClickEvent e,User u){
			if(e.getSlotType()==SlotType.OUTSIDE) return;

			if(e.getInventory() instanceof PlayerInventory) return;

			e.setCancelled(true);
			if(e.getSlot()>max) return;

			final ItemStack i=e.getInventory().getItem(e.getSlot());

			if(i==null){
				e.getWhoClicked().closeInventory(); return;
			}
			if(i.getType()==Material.GRAY_STAINED_GLASS_PANE) return;

			if(!i.hasItemMeta()){
				new Msg(u,WGC._PREFIX_2_Area).e("Menu is broken..").a(u); return;
			}
			final String s=i.getItemMeta().getDisplayName();

			if(s==null){
				new Msg(u,WGC._PREFIX_2_Area).e("Menu is broken...").a(u); return;
			}
			final WgArea w=WgArea.get(s);

			if(w==null){
				new Msg(u,WGC._PREFIX_2_Area).b("Area has been unloaded while you've been in this menu.").a(u); return;
			}
			u.tp(w.mid.getLocation(w.w));
			new Msg(u,WGC._PREFIX_2_Area).a("teleportet.").a(u);
			e.getWhoClicked().closeInventory();
			return;
		}
	}
	@Override public List<String>onTabComplete(CommandSender cs,Command c,String alias,String[] a){
		ArrayList<String>o=new ArrayList<>();

		switch(a[0]){
		case "theme":
			if(a.length==2){
				o.add("WT");
				o.add("gray");
				o.add("cs");
				o.add("winter");
				o.add("worlds");
				o.add("dpr");
			}
			return o;

		case "create":

			return o;

		case "tp":
			if(a.length==2) for(WgArea i:WgArea.areas) o.add(i.name);
			return o;

		case "load":
			if(a.length==2) o.add("<name>");
			return o;

		case "unload":
			if(a.length==2) for(WgArea i:WgArea.areas) o.add(i.name);
			return o;

		case "backup":
		case "bu":
			if(a.length==2){
				o.add("");
				o.add("save");
				o.add("on");
				o.add("off");
			}
			return o;

		case "":
			o.add("tnt");
			o.add("freeze");
			o.add("theme");
			o.add("floor");
			o.add("protect");
			o.add("frame");
			o.add("select");
			o.add("tp");
			o.add("waterremover");
			o.add("reset");
			o.add("list");
			if(cs.hasPermission("wgc.wga.admin")){
				o.add("restrict");
				o.add("unrestrict");
				o.add("spawn");
				o.add("redSpawn");
				o.add("backup");
				o.add("blueSpawn");
				o.add("load");
				o.add("unload");
				o.add("create");
			}
		}
		return o;
	}

	/**
	 * t == -1: false
	 * t ==  2: true
	 * else t == b ?
	 */
	private boolean trilian(byte t,boolean b){
		if(t<0) return false;

		if(t>1) return true;

		return b?t==1:t==0;
	}
}
