/*
 * Copyright 2021 Jan9103 (@jan9103:matrix.org Jan9103.wargear@protonmail.com)
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software,
 * and to permit third-parties to whom the Software is furnished to do so, all
 * subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR
 * ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
package de.jan9103.wargearcore.tracer;

import org.bukkit.entity.Player;

import de.jan9103.wargearcore.User;
import de.jan9103.wargearcore.WGC;
import de.jan9103.wargearcore.area.WgArea;
import de.jan9103.wargearcore.chat.BcMsg;
import de.jan9103.wargearcore.chat.Msg;
import de.jan9103.wargearcore.cmds.UserOnlyCmd;

public class TraceCmd extends UserOnlyCmd {
	@Override public void exe(String[] a,User u,Player p){
		if(a.length<1){
			Msg.missArg(u,"Core",p); return;
		}
		final WgArea z=WgArea.inside(p.getLocation());

		if(z==null){
			new Msg(u).b("Unknown Argument").a(p); return;
		}
		switch(a[0].toLowerCase()){
		case "start": z.startTrace(); return;

		case "stop": z.stopTrace(); return;

		case "show": z.trace.show(); z.bc(new BcMsg(WGC._PREFIX_2_Area).a("Trace shown.")); return;

		case "hide": z.trace.hide(); z.bc(new BcMsg(WGC._PREFIX_2_Area).a("Trace hidden.")); return;

		case "end": z.tracing=false; z.trace.hide(); z.trace.stop(); z.trace.clear(); z.updateSb(); z.bc(new BcMsg(WGC._PREFIX_2_Area).a("Trace ended.")); return;

		case "info":
			p.sendMessage("�9###### Trace STATE ########\n�2"
				      +"SIZE: �d"+z.trace.tm.size()
				      +"\n�2MODE: �d"+z.trace.tm.getClass().getSimpleName());
			return;

		case "mode":
		case "m":
			try{
				if(a.length<2){
					new Msg(u).a("###### Syntax: ###############################\n"
						     +"/trace mode -> this Overview\n"
						     +"/trace mode (mode-name) -> switch to mode\n"
						     +"/trace mode (mode) (args) -> switch w settings\n"
						     +"##### Modes (and args) ######################\n"
						     +"Viewdistance is Blockdistance squared\n"
						     +"Refresh rate is Gameticks (seconds/20)")
					.aC("\ne(xplosion)p(oint)",Msg.SUGGEST,"/trace mode ep","CLICK to prefill in chat")
					.aC("\ntrail",Msg.SUGGEST,"/trace mode trail","CLICK to prefill in chat")
					.aC("\nov(erview) view-distance refresh-rate",Msg.SUGGEST,"/trace mode ov 2000 40","CLICK to prefill in chat")
					.aC("\nnorm(al) view-distance refresh-rate",Msg.SUGGEST,"/trace mode norm 2000 40","CLICK to prefill in chat")
					.aC("\ndot view-distance refresh-rate reduction",Msg.SUGGEST,"/trace mode dot 800 60 0.2","CLICK to prefill in chat")
					.aC("\nalldot view-distance refresh-rate",Msg.SUGGEST,"/trace mode alldot 600 80","CLICK to prefill in chat")
					.aC("\nline view-distance refresh-rate line-distance reduction",Msg.SUGGEST,"/trace mode line 400 80 1 0.2","CLICK to prefill in chat")
					.aC("\nal(lline) view-distance refresh-rate line-distance",Msg.SUGGEST,"/trace mode al 100 80 1.5","CLICK to prefill in chat")
					.a(p);
					return;
				}
				z.trace.hide();
				switch(a[1].toLowerCase()){
				case "ep":
				case "explosionpoint":
					z.trace.tm=new ExplopointTrailMode(z.trace); return;

				case "trail":
					z.trace.tm=new BarrierTrailMode(z.trace); return;

				case "ov":
				case "overview": {
					int dist=2000; int rate=40;
					if(a.length>2) dist=Integer.parseInt(a[2]);
					if(a.length>3) rate=Integer.parseInt(a[3]);
					if(dist<0||rate<1){
						new Msg(u).b("At least one Argument was outside of the valid range..").a(p); return;
					}
					z.trace.tm=new SandOvMode(z.trace,dist,rate);
					return;
				}

				case "norm":
				case "normal": {
					int dist=2000; int rate=40;
					if(a.length>2) dist=Integer.parseInt(a[2]);
					if(a.length>3) rate=Integer.parseInt(a[3]);
					if(dist<0||rate<1){
						new Msg(u).b("At least one Argument was outside of the valid range..").a(p); return;
					}
					z.trace.tm=new SandNormMode(z.trace,dist,rate);
					return;
				}

				case "alldot":
				case "ad": {
					int dist=600; int rate=80;
					if(a.length>2) dist=Integer.parseInt(a[2]);
					if(a.length>3) rate=Integer.parseInt(a[3]);
					if(dist<0||rate<1){
						new Msg(u).b("At least one Argument was outside of the valid range..").a(p); return;
					}
					z.trace.tm=new SandDotNormMode(z.trace,dist,rate);
					return;
				}

				case "dot": {
					int dist=800,rate=60; float redd=0.2f;
					if(a.length>2) dist=Integer.parseInt(a[2]);
					if(a.length>3) rate=Integer.parseInt(a[3]);
					if(a.length>4) redd=Float.parseFloat(a[4]);
					if(dist<0||rate<1||redd<0){
						new Msg(u).b("At least one Argument was outside of the valid range..").a(p); return;
					}
					z.trace.tm=new SandDotReducedMode(z.trace,dist,rate,redd);
					return;
				}

				case "allline":
				case "al": {
					int dist=100,rate=80; float lineDist=1.5f;
					if(a.length>2) dist=Integer.parseInt(a[2]);
					if(a.length>3) rate=Integer.parseInt(a[3]);
					if(a.length>4) lineDist=Float.parseFloat(a[4]);
					if(dist<0||rate<1||lineDist<=0){
						new Msg(u).b("At least one Argument was outside of the valid range..").a(p); return;
					}
					z.trace.tm=new SandLineNormMode(z.trace,dist,rate,lineDist);
					return;
				}

				case "line": {
					int dist=400,rate=80; float redd=0.2f,lineDist=1f;
					if(a.length>2) dist=Integer.parseInt(a[2]);
					if(a.length>3) rate=Integer.parseInt(a[3]);
					if(a.length>4) lineDist=Float.parseFloat(a[4]);
					if(a.length>5) redd=Float.parseFloat(a[5]);
					if(dist<0||rate<1||redd<0||lineDist<=0){
						new Msg(u).b("At least one Argument was outside of the valid range..").a(p); return;
					}
					z.trace.tm=new SandLineReducedMode(z.trace,dist,rate,lineDist,redd);
					return;
				}

				default:
					new Msg(u).b("Unknwon sub command.").a(p);
				}
			}catch(NumberFormatException e){new Msg(u).b("That one was supposed to be a number, not whatever you entered..").a(p);}
			return;

		case "clear":
		case "c": z.trace.clear(); z.bc(new BcMsg(WGC._PREFIX_2_Area).a("Trace cleared."));
			return;
		}
	}
}
