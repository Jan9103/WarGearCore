/*
 * Copyright 2021 Jan9103 (@jan9103:matrix.org Jan9103.wargear@protonmail.com)
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software,
 * and to permit third-parties to whom the Software is furnished to do so, all
 * subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR
 * ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
package de.jan9103.wargearcore.tracer;

import java.util.HashSet;

import org.bukkit.Bukkit;
import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.entity.FallingBlock;

import de.jan9103.wargearcore.WGC;
import de.jan9103.wargearcore.chat.BcMsg;

public abstract class SandMode extends ShowMode {
	public static int MAX_SAND=1000;
	public SandMode(Trace t,int dista,int upd){
		super(t); dist=dista; updrate=upd;
	}

	protected final HashSet<FallingBlock>active=new HashSet<>();
	protected final HashSet<Location>allWay=new HashSet<>();
	protected final HashSet<Location>allExp=new HashSet<>();
	protected final HashSet<Location>allUpd=new HashSet<>();
	protected int dist=2500,updrate=40;
	private int shed;
	private boolean on;
	@Override public void start(){
		if(on) return;

		shed=Bukkit.getScheduler().scheduleSyncRepeatingTask(WGC.wgc,this::updateActive,1,updrate);
		on  =true;
	}

	@Override public void stop(){
		if(!on) return;

		Bukkit.getScheduler().cancelTask(shed);
		for(final FallingBlock i:active) i.remove();
		active.clear();
		on=false;
	}

	protected abstract void updateActive();

	@Override public abstract void traceAdded(TracedTnt t,Trace tr);

	@Override public void traceCleared(){
		allWay.clear(); allExp.clear(); allUpd.clear();
	}

	protected FallingBlock a(Location l,Material m){
		final FallingBlock b=l.getWorld().spawnFallingBlock(l,Bukkit.createBlockData(m));

		b.setGravity(false);
		b.setInvulnerable(true);
		b.setDropItem(false);
		b.setHurtEntities(false);
		b.setVelocity(WGC.nullVector);
		active.add(b);
		return b;
	}

	protected void gtrMaxSand(){
		t.a.bc(new BcMsg().b("Hid the trace due to sand limiter."));
		if(on) Bukkit.getScheduler().cancelTask(shed);
		on=false;
		for(final FallingBlock i:active) i.remove();
		active.clear();
	}
}
