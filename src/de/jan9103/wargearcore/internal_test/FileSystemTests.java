/*
 * Copyright 2021 Jan9103 (@jan9103:matrix.org Jan9103.wargear@protonmail.com)
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software,
 * and to permit third-parties to whom the Software is furnished to do so, all
 * subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR
 * ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
package de.jan9103.wargearcore.internal_test;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Random;

import de.jan9103.wargearcore.WGC;

public class FileSystemTests extends Test {
	@Override public void run(){
		Random r=new Random();
		File   folder;

		o+=headerLine("File System Tests",'_');
		if(WGC.dataFolder==null)
			folder=new File("W:\\null\\");
		else
			folder=new File(WGC.dataFolder);
		if(!folder.exists()){
			o+="\nUnable to test: test-folder not found";
			test_fail++;
			o+=endLine();
			return;
		}
		folder=new File(folder+"/test");
		if(folder.exists()){
			for(File i:folder.listFiles())
				i.delete();
			folder.delete();
		}
		try{
			folder.mkdir();
			test_success++;
		}catch(Exception e){
			o+=headerLine("FATAL",'=');
			o+="\nFATAL: Missing Permission to create Folders within the Plugin-Folder!";
			o+=headerLine("FATAL",'=');
			test_fail++;
			o+=endLine();
			return;
		}
		createFile(folder,".md");
		createFile(folder,".txt");
		createFile(folder,".bin");
		createFile(folder,".area");
		try{
			File i=new File(folder+"/filled.bin");
			i.createNewFile();
			FileOutputStream fos=new FileOutputStream(i);
			byte[]           ba =new byte[8000];
			r.nextBytes(ba);
			fos.write(ba);
			fos.flush();
			fos.close();
			test_success++;
			try{
				FileInputStream fis=new FileInputStream(i);
				byte[]          ba2=new byte[8000];
				fis.read(ba2);
				fis.close();
				test_success++;
				boolean k=true;
				for(int z=0; z<ba2.length; z++)
					if(ba[z]!=ba2[z]){
						o+="\nERROR: Files dont output their input!";
						o+="\n  "+arrayToString(ba);
						o+="\n  -->";
						o+="\n  "+arrayToString(ba2);
						o+="\n  @"+i+": "+ba[z]+" -> "+ba2[z];
						test_fail++;
						k=false;
						break;
					}
				if(k) test_success++;
			}catch(Exception e){
				o+=headerLine("FATAL",'=');
				o+="\nFATAL: Missing Permission to read File within the Plugin-Folder!";
				o+=headerLine("FATAL",'=');
				test_fail++;
			}
		}catch(Exception e){
			o+=headerLine("FATAL",'=');
			o+="\nFATAL: Missing Permission to write to File within the Plugin-Folder!";
			o+=headerLine("FATAL",'=');
			test_fail++;
		}


		try{
			for(File i:folder.listFiles())
				i.delete();
			test_success++;
		}catch(Exception e){
			o+=headerLine("FATAL",'=');
			o+="\nFATAL: Missing Permission delete Files within the Plugin-Folder!";
			o+=headerLine("FATAL",'=');
			test_fail++;
			o+=endLine();
			return;
		}
		try{
			folder.delete();
			test_success++;
		}catch(Exception e){
			o+=headerLine("FATAL",'=');
			o+="\nFATAL: Missing Permission delete Folders within the Plugin-Folder!";
			o+=headerLine("FATAL",'=');
			test_fail++;
			o+=endLine();
			return;
		}
		o+=endLine();
	}

	private void createFile(File folder,String extension){
		File i=new File(folder+"/test."+extension);

		try{
			i.createNewFile();
			test_success++;
		}catch(IOException e){
			o+=headerLine("FATAL",'=');
			o+="\nFATAL: Missing Permission to create File "+i.getName()+" within the Plugin-Folder!";
			o+=headerLine("FATAL",'=');
			test_fail++;
		}
	}
}
