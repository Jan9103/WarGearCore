/*
 * Copyright 2021 Jan9103 (@jan9103:matrix.org Jan9103.wargear@protonmail.com)
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software,
 * and to permit third-parties to whom the Software is furnished to do so, all
 * subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR
 * ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
package de.jan9103.wargearcore.chat;

import java.util.ArrayList;

import org.bukkit.craftbukkit.v1_15_R1.entity.CraftPlayer;
import org.bukkit.entity.Player;

import de.jan9103.wargearcore.User;
import de.jan9103.wargearcore.WGC;
import net.minecraft.server.v1_15_R1.IChatBaseComponent;
import net.minecraft.server.v1_15_R1.PacketPlayOutChat;
import net.minecraft.server.v1_15_R1.IChatBaseComponent.ChatSerializer;

/**
 * Broadcast Message.
 * This is necessary in order to display the broadcast with the
 * correct colorscheme for every player.
 */
public class BcMsg {
	private final ArrayList<Section>al=new ArrayList<>();
	private final String pn1,pn2;
	/**
	 * create a BC Msg.
	 * @param PN1: pluginname part 1
	 * @param PN2: pluginname part 2
	 */
	public BcMsg(String PN1,String PN2){
		pn1=PN1; pn2=PN2;
	}

	/**
	 * create a BC Msg.
	 * @param PN2: pluginname part 2
	 */
	public BcMsg(String PN2){
		pn1=WGC._PREFIX_1; pn2=PN2;
	}

	/**
	 * create a BC Msg.
	 * @param nm: pluginname (raw)
	 * @param tcol: ignored
	 */
	public BcMsg(String nm,char tcol){
		pn1=nm; pn2=null;
	}

	public BcMsg(){
		pn1=WGC._PREFIX_1; pn2=WGC._PREFIX_2_Core;
	}

	/** append normal text */
	public BcMsg a(String s){
		al.add(new Section(0,s)); return this;
	}

	/** append text notifiying about invalid command usage */
	public BcMsg b(String s){
		al.add(new Section(2,s)); return this;
	}

	/** append highlighted text*/
	public BcMsg c(String s){
		al.add(new Section(1,s)); return this;
	}

	/** append a newline */
	public BcMsg d(){
		al.add(new Section(6,"\n| ")); return this;
	}

	/** append something with borderchar-color */
	public BcMsg d(String s){
		al.add(new Section(1,s)); return this;
	}

	/** append atext with error colors */
	public BcMsg e(String s){
		al.add(new Section(3,s)); return this;
	}

	/** append something with warning colors */
	public BcMsg f(String s){
		al.add(new Section(5,s)); return this;
	}

	/** send it to a user (a(User, Player) is better!)*/
	public void a(User u){
		Player p=u.getPlayer(); if(p!=null) send(p,a(u.ct,u.pre16));
	}

	/** send it to a player */
	public void a(User u,Player p){
		send(p,a(u.ct,u.pre16));
	}

	private String a(ChatTheme thm,boolean pre16){
		final String[] f=ChatColor.b(thm,pre16);
		StringBuilder  o=new StringBuilder("[\"\",{\"text\":\""+ChatColor.a(thm,pn1,pn2==null?"":pn2)+"\"}");

		for(final Section i:al) o.append(i.a(thm,f));
		o.append("]");
		return o.toString();
	}

	private class Section {
		private final String str,a;
		private final byte type;
		private Section(int co,String s){
			type=(byte)co; str=s; a="";
		}

		private Section(int co,String s,String add){
			type=(byte)co; str=s; a=add;
		}

		private String a(ChatTheme thm,String[] f){
			return ",{\"text\":\""+str+"\""+f[type]+a+"}";
		}
	}
	private void send(Player p,String s){
		final IChatBaseComponent comp=ChatSerializer.a(s);
		final PacketPlayOutChat  chat=new PacketPlayOutChat(comp);

		((CraftPlayer)p).getHandle().playerConnection.sendPacket(chat);
	}
}
