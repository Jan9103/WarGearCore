/*
 * Copyright 2021 Jan9103 (@jan9103:matrix.org Jan9103.wargear@protonmail.com)
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software,
 * and to permit third-parties to whom the Software is furnished to do so, all
 * subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR
 * ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
package de.jan9103.wargearcore;

import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.logging.Filter;
import java.util.logging.Handler;
import java.util.logging.Level;
import java.util.logging.LogRecord;

import org.bukkit.Bukkit;
import org.bukkit.command.Command;
import org.bukkit.command.CommandExecutor;
import org.bukkit.command.CommandSender;

import de.jan9103.wargearcore.internal_test.WgcInternalTests;

/**
 * traceback finder and auto reporter (if enabled).
 * it also logs a few messages to allow for context of the
 * traceback.
 */
public class LogHandler extends Handler implements CommandExecutor,Filter {
	private final String[] pLog=new String[30];
	private int i=0;
	public LogHandler(){
		for(int i=0; i<30; i++) pLog[i]="";
	}

	/**
	 * if you catch an exception somewhere throw it in here.
	 */
	public static void handleException(Throwable e){
		if(!WGC.autoBugReportLog){
			Bukkit.getLogger().log(Level.SEVERE,"[WGC] A error occured: \""+e.getMessage()+"\". Since you have disable auto-bug-report it wont be reported automatically.");
			return;
		}
		Bukkit.getLogger().log(Level.WARNING,"[WGC] A error occured: \""+e.getMessage()+"\". It has been reported to me.");
		StringWriter sw=new StringWriter();
		PrintWriter  pw=new PrintWriter(sw);

		e.printStackTrace(pw);
		String o=sw.toString();

		while(o.length()>0){
			String i=o.substring(0,Integer.min(o.length(),1998));
			if(i.endsWith("\n")) i+="~";
			WGC.dcBug(i);
			if(o.length()>1998) o=o.substring(1995);
			else break;
		}
	}

	/**
	 * add a string to the internal log.
	 */
	public void add(String s){
		pLog[i++]=s;
		if(i==30) i=0;
	}

	/**
	 * an attempt to prevent logging of password, etc.
	 */
	@Override public boolean isLoggable(LogRecord record){
		if(record.getLevel()==Level.INFO){
			String[] k=record.getMessage().split(" ",6);
			if(k.length>=6)
				if(k[1]=="issued")
					switch(k[4].toLowerCase()){
					case "/login":
						//record.setMessage(k[0]+" issued server command: /login ***");
						return false;

					case "/wgcauth":
						if(k[5].toLowerCase()=="setpw")
							return false;        //record.setMessage(s=k[0]+" issued server command: /wgcauth setpw *** ***");

						break;
					}
		}
		return true;
	}

	/**
	 * the log-event listener
	 */
	@Override public void publish(LogRecord record){
		String s=record.getMessage();

		pLog[i++]=s;
		if(i==30) i=0;
		if(s.contains("de.jan9103")) try{WGC.dcBug(s);}catch(Throwable t){}
	}

	@Override public void flush(){
	}

	@Override public void close() throws SecurityException {
	}

	@Override public boolean onCommand(CommandSender arg0,Command arg1,String arg2,String[] args){
		String o="<@426317177847808000> "+arg0.getName()+":";

		for(String i:args) o+=" "+i;
		if(send(o)) arg0.sendMessage("[WGC] Failed to send Bugreport. you can report it manually on my discord: https://discord.gg/ddB2MDK");
		else{
			if(WGC.activeBugReportBugSearch){
				arg0.sendMessage("[WGC] Bugreport send - active-Bugreport is beeing generated async. If you want to support this Project or just want to stay up to date you can join my discord: https://discord.gg/ddB2MDK");
				new Thread(){
					@Override public void run(){
						WgcInternalTests wit=new WgcInternalTests();

						send(wit.output);
						arg0.sendMessage("[WGC] active Bugreport generated and send.");
					}
				}.start();
			}
			else arg0.sendMessage("[WGC] Bugreport submitted. If you want to support this Project or just want to stay up to date you can join my discord: https://discord.gg/ddB2MDK");
		}
		//debug(arg0);
		return true;
	}

	/**
	 * sends the latest log entries to the CommandSender.
	 */
	public void debug(CommandSender s){
		for(int i=0; i<30; i++) s.sendMessage(i+": "+pLog[i]);
	}

	/**
	 * send the log to me.
	 * @param msg: only used for the "/wgcbug" command
	 */
	public boolean send(String msg){
		String[] a=pLog.clone();
		int      i=this.i,end=i;
		String   o=msg;

		while(i>0&&o.length()+a[i].length()<1998){
			if(!a[i].isEmpty()) o+="\n"+a[i--]; else i--;
		}
		i=29;
		while(i>end&&o.length()+a[i].length()<1998){
			if(!a[i].isEmpty()) o+="\n"+a[i--]; else i--;
		}
		if(o.endsWith("\n")) o+="~";
		return WGC.dcBug(o);
	}
}
