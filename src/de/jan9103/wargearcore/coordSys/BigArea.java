/*
 * Copyright 2021 Jan9103 (@jan9103:matrix.org Jan9103.wargear@protonmail.com)
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software,
 * and to permit third-parties to whom the Software is furnished to do so, all
 * subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR
 * ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
package de.jan9103.wargearcore.coordSys;

import org.bukkit.Material;
import org.bukkit.World;
import org.bukkit.block.Block;
import org.bukkit.block.BlockFace;

import de.jan9103.wargearcore.worldedit.editors.AsyncMultiEditor;
import de.jan9103.wargearcore.worldedit.editors.WallCreator;
import de.jan9103.wargearcore.worldedit.editors.WeSender;
import de.jan9103.wargearcore.worldedit.editors.async.AsyncSetO;

public class BigArea {
	public final BigCoord low,high;
	public BigArea(BigCoord a,BigCoord b){
		low=a.min(b); high=a.max(b);
	}

	public BigArea(int x,int y,int z){
		low=new BigCoord(x,y,z); high=low;
	}

	public BigArea(int x1,int y1,int z1,int x2,int y2,int z2){
		low =new BigCoord(Integer.min(x1,x2),Integer.min(y1,y2),Integer.min(z1,z2));
		high=new BigCoord(Integer.max(x1,x2),Integer.max(y1,y2),Integer.max(z1,z2));
	}

	public String debugStr(){
		return "LOW: "+low.x+" "+low.y+" "+low.z+" HIGH: "+high.x+" "+high.y+" "+high.z;
	}

	public BigArea midEbene(){
		final int yMid=(high.y-low.y)/2+low.y;

		return new BigArea(new BigCoord(low.x,yMid,low.z),new BigCoord(high.x,yMid,high.z));
	}

	public BigArea yCut(int y){
		return new BigArea(low.x,y,low.z,high.x,y,high.z);
	}

	public BigArea cut(BlockFace side,int amount){
		switch(side){
		case DOWN: return new BigArea(new BigCoord(low.x,low.y+amount,low.z),high);

		case EAST: return new BigArea(low,new BigCoord(high.x-amount,high.y,high.z));

		case NORTH: return new BigArea(low,new BigCoord(high.x,high.y,high.z-amount));

		case SOUTH: return new BigArea(new BigCoord(low.x,low.y,low.z+amount),high);

		case UP: return new BigArea(low,new BigCoord(high.x,high.y-amount,high.z));

		case WEST: return new BigArea(new BigCoord(low.x+amount,low.y,low.z),high);

		default: return this;
		}
	}

	public void genRahmen(WeSender s,World w,Material m){
		final AsyncMultiEditor e=WallCreator.e(w,toSmall().toBigArea(low.y),m,false,s);

		WallCreator.add(e,w,toSmall().toBigArea(high.y),m,false);
		e.a(new AsyncSetO(w,new BigArea(low.x,low.y+1,low.z,low.x,high.y-1,low.z),m,false,e))
		.a(new AsyncSetO(w,new BigArea(high.x,low.y+1,low.z,high.x,high.y-1,low.z),m,false,e))
		.a(new AsyncSetO(w,new BigArea(low.x,low.y+1,high.z,low.x,high.y-1,high.z),m,false,e))
		.a(new AsyncSetO(w,new BigArea(high.x,low.y+1,high.z,high.x,high.y-1,high.z),m,false,e))
		.exe();
	}

	public void genRahmenLater(AsyncMultiEditor e,World w,Material m){
		WallCreator.add(e,w,toSmall().toBigArea(low.y),m,false);
		WallCreator.add(e,w,toSmall().toBigArea(high.y),m,false);
		e.a(new AsyncSetO(w,new BigArea(low.x,low.y+1,low.z,low.x,high.y-1,low.z),m,false,e))
		.a(new AsyncSetO(w,new BigArea(high.x,low.y+1,low.z,high.x,high.y-1,low.z),m,false,e))
		.a(new AsyncSetO(w,new BigArea(low.x,low.y+1,high.z,low.x,high.y-1,high.z),m,false,e))
		.a(new AsyncSetO(w,new BigArea(high.x,low.y+1,high.z,high.x,high.y-1,high.z),m,false,e));
	}

	public BigArea z(int z){
		z+=low.z; return new BigArea(low.x,low.y,z,high.x,high.y,z);
	}

	public boolean isInside(int x,int y,int z){
		return x>=low.x&&x<=high.x&&y>=low.y&&y<=high.y&&z>=low.z&&z<=high.z;
	}

	public boolean isInside(Block b){
		return b.getX()>=low.x&&b.getX()<=high.x&&b.getY()>=low.y&&b.getY()<=high.y&&b.getZ()>=low.z&&b.getZ()<=high.z;
	}

	public boolean isInside2d(Block b){
		return b.getX()>=low.x&&b.getX()<=high.x&&b.getZ()>=low.z&&b.getZ()<=high.z;
	}

	public SmallArea toSmall(){
		return new SmallArea(low,high);
	}

	public BigArea cutTb(){
		return new BigArea(new BigCoord(low.x+1,low.y,low.z+1),new BigCoord(high.x-1,high.y-1,high.z-1));
	}

	public BigArea cutOutter(){
		return new BigArea(new BigCoord(low.x+1,low.y,low.z+1),new BigCoord(high.x-1,high.y,high.z-1));
	}

	public BigArea upperPart(){
		return new BigArea(high,new BigCoord(low.x,high.y,low.z));
	}

	public int ySize(){
		return high.y-low.y+1;
	}

	public int xSize(){
		return high.x-low.x+1;
	}

	public int zSize(){
		return high.z-low.z+1;
	}

	public BigArea xCutLow(int x){
		return new BigArea(new BigCoord(low.x+x,low.y,low.z),new BigCoord(low.x+x,high.y,high.z));
	}

	public BigArea yCutLow(int y){
		return new BigArea(new BigCoord(low.x,low.y+y,low.z),new BigCoord(high.x,low.y+y,high.z));
	}

	public BigArea zCutLow(int z){
		return new BigArea(new BigCoord(low.x,low.y,low.z+z),new BigCoord(high.x,high.y,low.z+z));
	}

	public BigArea xCutHigh(int x){
		return new BigArea(new BigCoord(high.x-x,low.y,low.z),new BigCoord(high.x-x,high.y,high.z));
	}

	public BigArea yCutHigh(int y){
		return new BigArea(new BigCoord(low.x,high.y-y,low.z),new BigCoord(high.x,high.y-y,high.z));
	}

	public BigArea zCutHigh(int z){
		return new BigArea(new BigCoord(low.x,low.y,high.z-z),new BigCoord(high.x,high.y,high.z-z));
	}

	public BigArea cutOuterX(){
		return new BigArea(new BigCoord(low.x+1,low.y,low.z),new BigCoord(high.x-1,high.y,high.z));
	}

	public BigArea cutOuterY(){
		return new BigArea(new BigCoord(low.x,low.y+1,low.z),new BigCoord(high.x,high.y-1,high.z));
	}

	public BigArea cutUpperY(){
		return new BigArea(new BigCoord(low.x,low.y,low.z),new BigCoord(high.x,high.y-1,high.z));
	}

	public BigArea cutOuterZ(){
		return new BigArea(new BigCoord(low.x,low.y,low.z+1),new BigCoord(high.x,high.y,high.z-1));
	}

	public int size(){
		return xSize()*ySize()*zSize();
	}

	public boolean contains(Material m,World w){
		for(int x=low.x; x<=high.x; x++)
			for(int y=low.y; y<=high.y; y++)
				for(int z=low.z; z<=high.z; z++)
					if(w.getBlockAt(x,y,z).getType()==m)
						return true;

		return false;
	}
}
