/*
 * Copyright 2021 Jan9103 (@jan9103:matrix.org Jan9103.wargear@protonmail.com)
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software,
 * and to permit third-parties to whom the Software is furnished to do so, all
 * subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR
 * ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
package de.jan9103.wargearcore;

import java.io.File;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.List;

import org.bukkit.Material;
import org.bukkit.configuration.file.FileConfiguration;
import org.bukkit.configuration.file.YamlConfiguration;

import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonParser;
import com.google.gson.JsonSyntaxException;

/**
 * Config file helper
 */
public class C {
	private final YamlConfiguration c;
	private final File f;

	/**
	 * prevent file name errors - just run however you want
	 * to call your file through this
	 * just remember to use this when reading the file or
	 *  decodeFileName when using the filename somewhere else
	 */
	public static String encodeFileName(String n){
		try{return URLEncoder.encode(n,"UTF-8").replace(".","%2E");}catch(UnsupportedEncodingException e){return n;}
	}

	/**
	 * invert encodeFileName
	 */
	public static String decodeFileName(String n){
		try{return URLDecoder.decode(n.replace("%2E","."),"UTF-8");}catch(UnsupportedEncodingException e){return n;}
	}

	/**
	 * @param name: Filepath relative to the dataFolder
	 */
	public C(String name){
		f=new File(WGC.dataFolder+"/"+name);
		if(!f.exists()) try{f.createNewFile();}catch(final IOException e){WGC.log("Unable to create new Config File: "+f.toString());}
		c=YamlConfiguration.loadConfiguration(f);
	}

	/**
	 * @param file: the config file path
	 */
	public C(File file){
		f=file;
		if(!f.exists()) try{f.createNewFile();}catch(final IOException e){WGC.log("Unable to create new Config File: "+f.toString());}
		c=YamlConfiguration.loadConfiguration(f);
	}

	/**
	 * @param file: the save location
	 * @param y: the already loaded YamlConfiguration
	 */
	public C(File file,YamlConfiguration y){
		f=file;
		c=y;
	}

	/**
	 * ONLY USE THIS IF YOURE SURE YOULL NEVER WRITE THE CFG
	 * @param y: the already laoded YamlConfiguration
	 */
	public C(YamlConfiguration y){
		f=null; c=y;
	}

	/**
	 * directly access the config object (not recommended)
	 */
	public YamlConfiguration cy(){
		return c;
	}

	/**
	 * directly access the config object (not recommended)
	 */
	public FileConfiguration cf(){
		return c;
	}

	/**
	 * save the config to the path configured at object creation
	 */
	public void save()throws IOException {
		c.save(f);
	}

	/**
	 * delete a variable / reset it to the default
	 */
	public void del(String p){
		c.set(p,null);
	}

	/**
	 * get integer
	 * @param p: path
	 * @param d: default value
	 */
	public int gi(String p,int d){
		if(!c.isSet(p)) c.set(p,d);
		if(!c.isInt(p)) c.set(p,d);
		return c.getInt(p);
	}

	/**
	 * get long
	 * @param p: path
	 * @param d: default value
	 */
	public long gl(String p,long d){
		if(!c.isSet(p)) c.set(p,d);
		if(!c.isLong(p)) c.set(p,d);
		return c.getLong(p);
	}

	/**
	 * get byte
	 * @param p: path
	 * @param d: default value
	 */
	public byte gby(String p,byte d){
		if(!c.isSet(p)) c.set(p,d);
		if(!c.isInt(p)) c.set(p,d);
		return (byte)c.getInt(p);
	}

	/**
	 * get double
	 * @param p: path
	 * @param d: default value
	 */
	public double gd(String p,double d){
		if(!c.isSet(p)) c.set(p,d);
		if(!c.isDouble(p)) c.set(p,d);
		return c.getDouble(p);
	}

	/**
	 * get string
	 * @param p: path
	 * @param d: default value
	 */
	public String gs(String p,String d){
		if(!c.isSet(p)) c.set(p,d);
		if(!c.isString(p)) c.set(p,d);
		String s=c.getString(p);

		if(s==null) s="";
		if(s.isEmpty()) s="";
		return s;
	}

	/**
	 * get string list
	 * @param p: path
	 * @param d: default value
	 */
	public List<String>gsl(String p){
		List<String>o=new ArrayList<>();

		if(!c.isSet(p)) return o;

		o.addAll(c.getStringList(p));
		return o;
	}

	/**
	 * get boolean
	 * @param p: path
	 * @param d: default value
	 */
	public boolean gb(String p,boolean d){
		if(!c.isSet(p)) c.set(p,d);
		if(!c.isBoolean(p)) c.set(p,d);
		return c.getBoolean(p);
	}

	/**
	 * get object (raw)
	 * @param p: path
	 * @param d: default value
	 */
	public Object go(String p,Object d){
		if(!c.isSet(p)) c.set(p,d);
		return c.get(p);
	}

	/**
	 * get material (bukkit)
	 * @param p: path
	 * @param d: default value
	 */
	public Material gm(String p,Material d){
		if(!c.isSet(p)) c.set(p,d);
		if(!c.isString(p)) c.set(p,d);
		final Material m=Material.valueOf(c.getString(p));

		if(m==null){
			c.set(p,d);
			return d;
		}
		return m;
	}

	/**
	 * get material (bukkit) list
	 * @param p: path
	 * @param d: default value
	 */
	public List<Material>gml(String p,List<Material>d){
		if(!c.isSet(p)) return d;

		final List<String>a=c.getStringList(p);

		if(a==null) return d;

		final List<Material>b=new ArrayList<>();

		for(final String i:a) b.add(Material.valueOf(i));
		b.remove(null);
		return b;
	}

	/**
	 * save long list
	 * @param p: path
	 * @param d: data
	 */
	public void sll(String p,List<Long>d){
		JsonArray jsa=new JsonArray();

		for(Long i:d) jsa.add(i);
		s(p,jsa.toString());
	}

	/**
	 * save string list (as json)
	 * @param p: path
	 * @param d: data
	 */
	public void sjsl(String p,List<String>d){
		JsonArray jsa=new JsonArray();

		for(String i:d) jsa.add(i);
		s(p,jsa.toString());
	}

	/**
	 * get String List (json)
	 * @param p: path
	 */
	public List<String>gjsl(String p){
		return gjsl(p,new ArrayList<String>());
	}

	/**
	 * get String List (json)
	 * @param p: path
	 * @param d: default
	 */
	public List<String>gjsl(String p,List<String>d){
		if(!c.isSet(p)) return d;

		if(!c.isString(p)) return d;

		try {
			JsonArray   jsa=new JsonParser().parse(c.getString(p)).getAsJsonArray();
			List<String>o  =new ArrayList<>();
			for(JsonElement i:jsa)
				o.add(i.getAsString());
			return o;
		}catch(JsonSyntaxException e){}
		return d;
	}

	/**
	 * get Long List
	 * @param p: path
	 * @param d: default
	 */
	public List<Long>gll(String p,List<Long>d){
		if(!c.isSet(p)) return d;

		if(!c.isString(p)) return d;

		try {
			JsonArray jsa=new JsonParser().parse(c.getString(p)).getAsJsonArray();
			List<Long>o  =new ArrayList<>();
			for(JsonElement i:jsa)
				o.add(i.getAsLong());
			return o;
		}catch(JsonSyntaxException e){}
		return d;
	}

	/**
	 * WARNING: Overrides input
	 * get byte array
	 * @param p: path
	 * @param d: default
	 */
	public byte[] gba(String p,byte[] d){
		p+=".";
		if(!c.isSet(p+"0")){
			sba(p,d); return d;
		}
		for(int i=0; i<d.length; i++) d[i]=(byte)gi(p+i,d[i]);
		return d;
	}

	/**
	 * set byte array
	 * @param p: path
	 * @param o: byte array
	 */
	public void sba(String p,byte[] o){
		p+="."; for(int i=0; i<o.length; i++) c.set(p+i,o[i]);
	}

	/**
	 * set material list
	 * @param p: path
	 * @param o: material list
	 */
	public void sml(String p,Material[] o){
		final ArrayList<String>l=new ArrayList<>();

		for(final Material i:o) l.add(i.toString());
		s(p,l);
	}

	/**
	 * set material list
	 * @param p: path
	 * @param o: material list
	 */
	public void sml(String p,List<Material>o){
		final ArrayList<String>l=new ArrayList<>();

		for(final Material i:o) l.add(i.toString());
		s(p,l);
	}

	/**
	 * set value (for generics (int, long, boolean, etc) and raw objects only
	 *  for stuff like string-lists use the propper function)
	 * @param p: path
	 * @param o: object
	 */
	public void s(String p,Object o){
		c.set(p,o);
	}

	/**
	 * delete the config file
	 */
	public void del(){
		f.delete();
	}

	/**
	 * check if a value is set
	 */
	public boolean isSet(String p){
		return c.isSet(p);
	}
}
