/*
 * Copyright 2021 Jan9103 (@jan9103:matrix.org Jan9103.wargear@protonmail.com)
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software,
 * and to permit third-parties to whom the Software is furnished to do so, all
 * subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR
 * ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
package de.jan9103.wargearcore.fight;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.bukkit.command.Command;
import org.bukkit.command.CommandSender;
import org.bukkit.command.TabCompleter;
import org.bukkit.entity.Player;

import de.jan9103.wargearcore.User;
import de.jan9103.wargearcore.WGC;
import de.jan9103.wargearcore.api.fight.FightMod;
import de.jan9103.wargearcore.chat.Msg;
import de.jan9103.wargearcore.cmds.UserOnlyCmd;
import de.jan9103.wargearcore.fight.modifier.*;

public class FightCmd extends UserOnlyCmd implements TabCompleter {
	@Override public void exe(String[] a,User u,Player p){
		if(a.length<1){
			Msg.missArg(u,WGC._PREFIX_2_Fight,p); return;
		}
		if(u.curAr==null){
			new Msg(u,WGC._PREFIX_2_Fight).b("You're outside of an area.").a(p); return;
		}
		Fight f=u.curAr.fight;

		switch(a[0].toLowerCase()){
		//TODO random (count) -> x random mods
		case "blue":
		case "b":
			if(u.inFight){
				new Msg(u,WGC._PREFIX_2_Fight).b("You're already in a team").a(p); return;
			}
			f.blu.add(u);
			u.inFight=true;
			new Msg(u,WGC._PREFIX_2_Fight).a("Joined the blu team.").a(p);
			return;

		case "red":
		case "r":
			if(u.inFight){
				new Msg(u,WGC._PREFIX_2_Fight).b("You're already in a team").a(p); return;
			}
			f.red.add(u);
			u.inFight=true;
			new Msg(u,WGC._PREFIX_2_Fight).a("Joined the red team.").a(p);
			return;

		case "leave":
			if(!u.inFight){
				new Msg(u,WGC._PREFIX_2_Fight).b("You're not in a team").a(p); return;
			}
			f.death(u);
			f.red.remove(u);
			f.blu.remove(u);
			u.inFight=false;
			new Msg(u,WGC._PREFIX_2_Fight).a("Left all fight teams.").a(p);
			return;

		case "start":
			if(!p.hasPermission("wgc.fight.admin")){
				new Msg(u).b("Missing Permission \"wgc.fight.admin\"").a(p); return;
			}
			f.start();
			return;

		case "cancel":
			if(!p.hasPermission("wgc.fight.admin")){
				new Msg(u).b("Missing Permission \"wgc.fight.admin\"").a(p); return;
			}
			f.end();
			new Msg(u,WGC._PREFIX_2_Fight).a("Fight cancelled.").a(p);
			return;

		case "set":
			if(!p.hasPermission("wgc.fight.admin")){
				new Msg(u).b("Missing Permission \"wgc.fight.admin\"").a(p); return;
			}
			if(a.length<2){
				Msg.missArg(u,WGC._PREFIX_2_Fight,p); return;
			}
			switch(a[1].toLowerCase()){
			case "countdown":
				if(a.length<3) return;               //TODO

				try{
					f.countdownLength=Integer.max(5,Integer.parseInt(a[2]));
					new Msg(u,WGC._PREFIX_2_Fight).a("Countdown changed to "+u.curAr.fight.countdownLength+"gameticks.").a(p);
				}catch(NumberFormatException e){new Msg(u,WGC._PREFIX_2_Fight).b("That's not a valid number.").a(p);}
				return;

			case "inventory":
				f.inventory.copy(p);
				f.inventory.save(f.area.name);
				new Msg(u,WGC._PREFIX_2_Fight).a("Inventory saved.").a(p);
				return;

			case "tko":
				f.tko=!f.tko;
				new Msg(u,WGC._PREFIX_2_Fight).a("TechKo "+(f.tko?"":"de")+"activated.").a(p);
				return;

			default: new Msg(u,WGC._PREFIX_2_Fight).b("Unknown Setting.").a(p); return;
			}

		case "modifier":
		case "mod":
			if(a.length<2){
				Msg.missArg(u,"Fight",p); return;
			}
			switch(a[1].toLowerCase()){
			case "add":
				try{
					if(f.state!=FightState.WAITING){
						new Msg(u,WGC._PREFIX_2_Fight).b("Fight is running..").a(p); return;
					}
					if(a.length<3){
						Msg.missArg(u,WGC._PREFIX_2_Fight,p); return;
					}
					String o=f.addMod(a);
					if(o!=null) new Msg(u,WGC._PREFIX_2_Fight).b(o).a(p);
					else new Msg(u,WGC._PREFIX_2_Fight).a("Modifier added.").a(p);
				}catch(NumberFormatException e){new Msg(u,WGC._PREFIX_2_Fight).b("Argument should be a Number..").a(p);}catch(Exception e){new Msg(u,WGC._PREFIX_2_Edit).b("Unable to add modifier - wrong arguments?").a(p);}
				return;

			case "remove": {               //TODO
				if(f.state!=FightState.WAITING){
					new Msg(u,WGC._PREFIX_2_Fight).b("Fight is running..").a(p); return;
				}
				if(a.length<3){
					Msg.missArg(u,WGC._PREFIX_2_Fight,p); return;
				}
				Class<? extends FightMod>clazz=Fight.allMods.get(a[2].toLowerCase());
				Iterator<FightMod>       i    =f.activeMods.iterator();
				FightMod r;
				while(i.hasNext()) if((r=i.next()).getClass()==clazz){
						i.remove(); r.unload();
					}
				new Msg(u,WGC._PREFIX_2_Fight).a(a[2]+" Modifier(s) removed.").a(p);
				return;
			}

			case "list": {
				Msg m=new Msg(u,WGC._PREFIX_2_Fight).a("active Modifiers:");
				for(FightMod i:f.activeMods) m.d().a("- "+i.getClass().getName());
				m.a(p);
				return;
			}

			case "clear":
				if(f.state!=FightState.WAITING){
					new Msg(u,WGC._PREFIX_2_Fight).b("Fight is running..").a(p); return;
				}
				f.clearModifier();
				new Msg(u,WGC._PREFIX_2_Fight).a("Mods cleared").a(p); return;

			default: new Msg(u,WGC._PREFIX_2_Fight).b("Unknown subcommand.").a(p);
			}
			return;

		default:
			new Msg(u,WGC._PREFIX_2_Fight).b("Unknown subcommand.").a(p);
			return;
		}
	}

	@Override public List<String>onTabComplete(CommandSender arg0,Command arg1,String arg2,String[] a){
		ArrayList<String>o=new ArrayList<>();

		switch(a[0].toLowerCase()){
		case "set":
			o.add("countdown");
			o.add("inventory");
			o.add("tko");
			return o;

		case "modifier":
		case "mod":
			if(a.length==2){
				o.add("list");
				o.add("remove");
				o.add("add");
				o.add("clear");
				return o;
			}
			//	0/1	1/2	2/3		3/4	4/5
			//	mod	add	rising	2	water
			if(a.length>2)
				switch(a[1].toLowerCase()){
				case "add":
					o.addAll(Fight.allMods.keySet());
				}
			return o;

		case "":
			o.add("red");
			o.add("blue");
			o.add("leave");
			o.add("start");
			o.add("cancel");
			o.add("set");
			o.add("modifier");
		}
		return o;
	}
}
