/*
 * Copyright 2021 Jan9103 (@jan9103:matrix.org Jan9103.wargear@protonmail.com)
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software,
 * and to permit third-parties to whom the Software is furnished to do so, all
 * subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR
 * ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
package de.jan9103.wargearcore.fight.modifier;

import org.bukkit.Bukkit;
import org.bukkit.Material;

import de.jan9103.wargearcore.WGC;
import de.jan9103.wargearcore.api.fight.FightMod;
import de.jan9103.wargearcore.coordSys.SmallArea;
import de.jan9103.wargearcore.fight.Fight;
import de.jan9103.wargearcore.worldedit.cmds.WorldEditCmd;
import de.jan9103.wargearcore.worldedit.editors.SyncFill;
import de.jan9103.wargearcore.worldedit.editors.SyncFlood;

public class RisingMod extends FightMod {
	private final Material block;
	private final int speed;
	public RisingMod(Fight f,String[] a)throws Exception {
		super(f);
		// mod add rising 14 water
		if(a.length>3){
			speed=Integer.parseInt(a[3]); // throw exception up
			if(a.length>4)
				block=WorldEditCmd.parseM(a[4]);
			else block=Material.WATER;
		}
		else{
			block=Material.WATER; speed=120;
		}
		if(block==null) throw new Exception();
	}

	public RisingMod(Fight f,int speed,Material block){
		super(f); this.speed=speed;
		this.block          =block;
	}

	@Override public void fightStart(){
		f.area.wr_min_y=f.area.bodenY+2;
		addShedule(Bukkit.getScheduler().scheduleSyncRepeatingTask(WGC.wgc,block==Material.WATER?new WaterRising():new BlockRising(),speed,speed));
	}

	@Override public void fightEnd(){
		stop();
	}

	@Override public void unload(){
		stop();
	}

	private void stop(){
		stopAllShedules(); f.area.wr_min_y=f.area.bodenY;
	}

	private class BlockRising implements Runnable {
		private int y;
		public BlockRising(){
			y=f.area.bluWg.low.y;
		}

		@Override
		public void run(){
			for(final SmallArea i:f.area.notWg2dMask())
				SyncFill.b(f.area.w,i.toBigArea(y),block,false);
			SyncFill.b(f.area.w,f.area.redWg,block,true);
			SyncFill.b(f.area.w,f.area.bluWg,block,true);
			if(++y==f.area.redWg.high.y) stop();
			f.area.wr_min_y=y;
		}
	}
	private class WaterRising implements Runnable {
		private int y;
		public WaterRising(){
			y=f.area.redWg.low.y;
		}

		@Override
		public void run(){
			for(final SmallArea i:f.area.notWg2dMask())
				SyncFill.b(f.area.w,i.toBigArea(y),Material.WATER,false);
			SyncFlood.b(f.area.w,f.area.redWg.yCut(y));
			SyncFlood.b(f.area.w,f.area.bluWg.yCut(y));
			if(++y==f.area.redWg.high.y) stop();
			f.area.wr_min_y=y;
		}
	}
	@Override public String desc(){
		return "Rising "+(block==Material.WATER?"Tides":block.toString())+" every "+(speed/20)+"sec.";
	}

	@Override public String cfg(){
		return "rising "+speed+" "+block.toString();
	}
}
