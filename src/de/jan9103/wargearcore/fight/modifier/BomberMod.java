/*
 * Copyright 2021 Jan9103 (@jan9103:matrix.org Jan9103.wargear@protonmail.com)
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software,
 * and to permit third-parties to whom the Software is furnished to do so, all
 * subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR
 * ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
package de.jan9103.wargearcore.fight.modifier;

import java.util.Random;

import org.bukkit.Bukkit;
import org.bukkit.Location;
import org.bukkit.entity.TNTPrimed;

import de.jan9103.wargearcore.WGC;
import de.jan9103.wargearcore.api.fight.FightMod;
import de.jan9103.wargearcore.fight.Fight;

public class BomberMod extends FightMod {
	private final int tntHeight;
	private final int speed;
//	public BomberMod(Fight fyte,int speed){super(fyte);this.speed=speed;tntHeight=f.area.redWg.high.y+f.area.ausfahrm+4;}
	public BomberMod(Fight fyte,String[] a)throws FightModConstructorException {
		super(fyte);
		tntHeight=f.area.redWg.high.y+f.area.ausfahrm+4;
		int s=200;

		if(a.length>3)
			s=Integer.parseInt(a[3]); // throw number format exc up
		speed=s;
	}

	@Override public void fightStart(){
		f.area.wr_min_y=f.area.bodenY+2;
		addShedule(Bukkit.getScheduler().scheduleSyncRepeatingTask(WGC.wgc,()->rain(),speed,speed));
	}

	private void rain(){
		//TODO animation
		Random r  =new Random();
		int    zr =r.nextInt(Integer.max((f.area.redWg.high.z-f.area.redWg.low.z)<<2,1));
		int    ziz=r.nextInt((f.area.redWg.high.z-f.area.redWg.low.z)-zr);
		int    zm =f.area.redWg.low.z+ziz;
		int    y;

		for(int zi=zm+zr; zi>zm; --zi){
			y=tntHeight;
			for(int i=f.area.redWg.low.x; i<f.area.redWg.high.x; i+=3){
				y+=1;
				((TNTPrimed)f.area.w.spawn(new Location(f.area.w,i,(double)y,(double)zi),TNTPrimed.class)).setFuseTicks(80);
			}
		}
		zm=f.area.bluWg.low.z+ziz;
		for(int zi=zm+zr; zi>zm; --zi){
			y=tntHeight;
			for(int i=f.area.bluWg.low.x; i<f.area.bluWg.high.x; i+=3){
				y+=1;
				((TNTPrimed)f.area.w.spawn(new Location(f.area.w,i,(double)y,(double)zi),TNTPrimed.class)).setFuseTicks(80);
			}
		}
	}

	@Override public void fightEnd(){
		stop(); f.area.wr_min_y=f.area.bodenY;
	}

	@Override public void unload(){
		stop(); f.area.wr_min_y=f.area.bodenY;
	}

	private void stop(){
		stopAllShedules();
	}

	@Override public String desc(){
		return "Bomber every "+(speed/20)+"sec.";
	}

	@Override public String cfg(){
		return "bomber "+speed;
	}
}
