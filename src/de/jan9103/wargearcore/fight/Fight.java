/*
 * Copyright 2021 Jan9103 (@jan9103:matrix.org Jan9103.wargear@protonmail.com)
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software,
 * and to permit third-parties to whom the Software is furnished to do so, all
 * subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR
 * ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
package de.jan9103.wargearcore.fight;

import java.io.File;
import java.lang.reflect.Constructor;
import java.util.HashMap;
import java.util.HashSet;
import java.util.function.Consumer;

import org.bukkit.Bukkit;
import org.bukkit.ChatColor;
import org.bukkit.Sound;
import org.bukkit.entity.Player;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.scoreboard.DisplaySlot;
import org.bukkit.scoreboard.Objective;

import de.jan9103.wargearcore.C;
import de.jan9103.wargearcore.SoundKategory;
import de.jan9103.wargearcore.User;
import de.jan9103.wargearcore.WGC;
import de.jan9103.wargearcore.api.fight.FightMod;
import de.jan9103.wargearcore.area.WgArea;
import de.jan9103.wargearcore.chat.BcMsg;
import de.jan9103.wargearcore.fight.listener.FightListener;
import de.jan9103.wargearcore.fight.modifier.*;

/*
 * TODO save walk&flyspeed & fly & god & ect b4 -> rem .. give back
 * TODO fast-settings fight settings (saveable / last fight)
 * TODO basic bot -> testen
 */

public class Fight {
	public static void init(){
		allMods.clear();
		allMods.put("rising",RisingMod.class);
		allMods.put("bomber",BomberMod.class);
	}

	public static HashMap<String,Class<? extends FightMod> >allMods=new HashMap<>();
	public final HashSet<Listener>tmpListener=new HashSet<>();
	public final WgArea area;
	public final FightTeam red;
	public final FightTeam blu;
	public HashSet<FightMod>activeMods=new HashSet<>();
	private boolean buWR,redProt;
	public int countdownLength=60;
	public Objective pl,gm;
	public FightState state;
	public final InvSaver inventory=new InvSaver();
	public boolean playerWorldModAllowed=false,hunger=false,tko=true;
//	public FightListener fwml=null;
	public Fight(WgArea a){
		area =a;
		red  =new FightTeam(this,"Red",ChatColor.DARK_RED); //on update update in UChatMsgV3 too
		blu  =new FightTeam(this,"Blue",ChatColor.DARK_BLUE);
		state=FightState.WAITING;
//		area.info.setDisplaySlot(null);
		gm=area.sb.registerNewObjective("Fight","dummy","Fight");
		pl=area.sb.registerNewObjective("Players","dummy","Players");
//		gm.setDisplaySlot(DisplaySlot.SIDEBAR);
		//pl.setDisplaySlot(DisplaySlot.SIDEBAR);
//		area.sb.registerNewObjective("Health", "health", "Health").setDisplaySlot(DisplaySlot.BELOW_NAME);
		gm.getScore("Waiting..").setScore(0);
		if(WGC.d) Bukkit.getServer().broadcastMessage("fight created");
		//TODO load default fight-settings
	}

	//TODO fight-setting-preset loader
	public void start(){
		buWR   =area.waterremover;
		redProt=area.bluProt;
		playerWorldModAllowed=false;
		FightListener fl=new FightListener(this);

		tmpListener.add(fl);
		Bukkit.getPluginManager().registerEvents(fl,WGC.wgc);
		for(final FightMod i:activeMods) i.countdownStart();
		area.prot();
		area.freeze();
		area.waterremover=true;
		area.sb.resetScores("Waiting..");
		area.sb.clearSlot(DisplaySlot.SIDEBAR);
		gm.setDisplaySlot(DisplaySlot.SIDEBAR);
		state=FightState.COUNTDOWN;
		red.ready(area.redSpawn.getLocation(area.w));
		blu.ready(area.bluSpawn.getLocation(area.w));
		new Countdown(this,countdownLength,20);
		playSound(SoundKategory.FIGHT_BASE,Sound.BLOCK_NOTE_BLOCK_SNARE,-5);
		if(WGC.d) Bukkit.getServer().broadcastMessage("fight.start()");
		BcMsg m=new BcMsg().a("Fight Starts in "+(countdownLength/20));

		if(!activeMods.isEmpty()){
			m.d().a("Active Modifiers:");
			for(FightMod fm:activeMods)
				m.d().a(" - "+fm.desc());
		}
		bc(m);
		allUsers((u)->{
			Player p=u.getPlayer();
			if(p!=null){
				if(!hunger) p.setSaturation(10000000);
				p.setHealth(20);
				p.setFoodLevel(20);
			}
		});
	}

	public void death(Fighter f){ //TODO von irgendwo anstern...
		for(final FightMod i:activeMods) i.playerDeath(f);
		if(WGC.d) Bukkit.getServer().broadcastMessage("death!");
		playSound(SoundKategory.FIGHT_BASE,Sound.ITEM_CROSSBOW_SHOOT,5);
		if(red.alife.remove(f))
			if(red.alife.isEmpty()){
				bc("Red has no Players left. Blue has won!");
				end();
				return;
			}
		if(blu.alife.remove(f))
			if(blu.alife.isEmpty()){
				bc("Blue has no Players left. Red has won!");
				end();
			}
	}

	public void countdownEnd(){
		playerWorldModAllowed=true;
		area.bluProtOff();
		area.unprot();
		area.thaw();
		bc("Fight starts.");
		playSound(SoundKategory.FIGHT_BASE,Sound.ENTITY_FIREWORK_ROCKET_BLAST,0);
		for(final FightMod i:activeMods) i.fightStart();
		state=FightState.INGAME;
		red.start();
		blu.start();
		if(WGC.d) Bukkit.getServer().broadcastMessage("countdown ende");
	}

	public void setLevel(int level){
		red.setLevel(level);
		blu.setLevel(level);
	}

	public void end(){
		allUsers((u)->{
			Player p=u.getPlayer();
			if(p!=null) p.setSaturation(10);
		});
		state=FightState.END;
		for(Listener i:tmpListener)
			if(i!=null)
				HandlerList.unregisterAll(i);
		tmpListener.clear();
//		if(fwml!=null){HandlerList.unregisterAll(fwml);fwml=null;}
		for(final FightMod i:activeMods) i.fightEnd();
		playSound(SoundKategory.FIGHT_BASE,Sound.EVENT_RAID_HORN,-5);
		area.bluProt     =redProt;
		area.waterremover=buWR;
		area.bluProtOn();
		area.prot();
		area.freeze();
		//	pl.unregister();
		//	gm.unregister();
		area.sb.clearSlot(DisplaySlot.SIDEBAR);
		area.info.setDisplaySlot(DisplaySlot.SIDEBAR);
		//area.BauScoreboard();
		if(WGC.d) Bukkit.getServer().broadcastMessage("fight ende");
		state=FightState.WAITING;
		gm.getScore("Waiting..").setScore(0);
	}

	public void allAliveUsers(Consumer<User>f){
		for(Fighter i:red.alife)
			if(i instanceof User)
				f.accept((User)i);
		for(Fighter i:blu.alife)
			if(i instanceof User)
				f.accept((User)i);
	}

	public HashSet<User>allAliveUsers(){
		HashSet<User>o=new HashSet<>();

		for(Fighter i:red.alife)
			if(i instanceof User)
				o.add((User)i);
		for(Fighter i:blu.alife)
			if(i instanceof User)
				o.add((User)i);
		return o;
	}

	public void allUsers(Consumer<User>f){
		for(Fighter i:red.users)
			if(i instanceof User)
				f.accept((User)i);
		for(Fighter i:blu.users)
			if(i instanceof User)
				f.accept((User)i);
	}

	public void bc(String msg){
		area.bc(new BcMsg(WGC._PREFIX_2_Fight).a(msg));
	}

	public void bc(BcMsg msg){
		area.bc(msg);
	}

	public void clearModifier(){
		for(FightMod i:activeMods) i.unload(); activeMods.clear();
	}

	public void playSound(SoundKategory cat,Sound sound,int pitch){
		red.PlaySound(cat,sound,pitch);
		blu.PlaySound(cat,sound,pitch);
	}

	public void save(C c){
		c.s("fight.inv",inventory.name);
		c.s("fight.cd",countdownLength);
		c.s("fight.hunger",hunger);
		c.s("fight.tko",tko);
	}

	public void load(C c){
		countdownLength=c.gi("fight.cd",60);
		if(c.isSet("fight.inv")) inventory.load(c.gs("fight.inv",""));
		hunger=c.gb("fight.hunger",false);
		tko   =c.gb("fight.tko",true);
	}

	public void savePreset(String name){
		File          f=new File(WGC.dataFolder+"/fightpresets/"+name+".yml");
		C             c=new C(f);
		StringBuilder o=new StringBuilder();

		for(FightMod fm:activeMods){
			if(o.length()>0) o.append('\t');
			o.append(fm.cfg());
		}
		c.s("md",o.toString());
	}

	public void loadPreset(String name){
		File f=new File(WGC.dataFolder+"/fightpresets/"+name+".yml");
		C    c=new C(f);

		activeMods.clear();
		for(String i:c.gs("md","").split("\t")){
			if(i.isBlank()) continue;
			try{addMod(("  "+i).split(" "));}catch(NumberFormatException e){}
		}
	}

	public String addMod(String[] a)throws NumberFormatException {
		Class<?extends FightMod>clazz=allMods.get(a[2].toLowerCase());

		if(clazz==null) return "Unknown Mod";

		try{
			@SuppressWarnings("unchecked")
			Constructor<? extends FightMod>constr=(Constructor<FightMod>)clazz.getConstructor(Fight.class,String[].class);
			constr.setAccessible(true);
			FightMod fm=constr.newInstance(this,a);
			activeMods.add(fm);
			return null;
		}catch(ReflectiveOperationException e){
			if(e.getCause() instanceof FightModConstructorException)
				return ((FightModConstructorException)e.getCause()).m;

			if(e.getCause() instanceof NumberFormatException)
				return "Thats not a valid Number..";
		}catch(SecurityException|IllegalArgumentException e){}
		return "Mod is missing a working constructor or you used it wrong..";
	}

	public User getFighter(Player player){
		for(Fighter i:red.users)
			if(i instanceof User)
				if(((User)i).uuid==player.getUniqueId()) return (User)i;

		for(Fighter i:blu.users)
			if(i instanceof User)
				if(((User)i).uuid==player.getUniqueId()) return (User)i;

		return null;
	}

	public boolean hasPlayer(){
		return !blu.users.isEmpty()||!red.users.isEmpty();
	}
}
