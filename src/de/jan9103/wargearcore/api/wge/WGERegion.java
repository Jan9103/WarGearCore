/*
 * Copyright 2021 Jan9103 (@jan9103:matrix.org Jan9103.wargear@protonmail.com)
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software,
 * and to permit third-parties to whom the Software is furnished to do so, all
 * subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR
 * ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
package de.jan9103.wargearcore.api.wge;

import org.bukkit.Material;
import org.bukkit.World;
import org.bukkit.block.Block;

import de.jan9103.wargearcore.coordSys.BigArea;
import de.jan9103.wargearcore.worldedit.WEArea;
import de.jan9103.wargearcore.worldedit.clip.Clipboard;
import de.jan9103.wargearcore.worldedit.editors.async.*;

/**
 * A region for WGE operations.
 * The handler for all operations is nullable!
 */
public class WGERegion {
	private final BigArea a;
	private final World w;

	/**
	 * Select a Region
	 * @param a: one corner block
	 * @param b: another corner block
	 */
	public WGERegion(Block a,Block b){
		this.w=a.getWorld(); this.a=new BigArea(a.getX(),a.getY(),a.getZ(),b.getX(),b.getY(),b.getZ());
	}

	/** ONLY CALL FROM A SYNC PROCESS! */
	public void replace(Material from,Material to,WGEFinishHandler handler){
		new AsyncRepOtO(w,a,from,to,false,handler).aFromSync();
	}

	/** ONLY CALL FROM A SYNC PROCESS! */
	public void replace(Material[] from,Material to,WGEFinishHandler handler){
		new AsyncRepAtO(w,a,from,to,false,handler).aFromSync();
	}

	/** ONLY CALL FROM A SYNC PROCESS! */
	public void replace(Material from,Material[] to,WGEFinishHandler handler){
		new AsyncRepOtA(w,a,from,to,false,handler).aFromSync();
	}

	/** ONLY CALL FROM A SYNC PROCESS! */
	public void replace(Material[] from,Material[] to,WGEFinishHandler handler){
		new AsyncRepAtA(w,a,from,to,false,handler).aFromSync();
	}

	/** ONLY CALL FROM A SYNC PROCESS! */
	public void replace(Material to,WGEFinishHandler handler){
		new AsyncRepO(w,a,to,false,handler).aFromSync();
	}

	/** ONLY CALL FROM A SYNC PROCESS! */
	public void replace(Material[] to,WGEFinishHandler handler){
		new AsyncRepA(w,a,to,false,handler).aFromSync();
	}

	/** ONLY CALL FROM A SYNC PROCESS! */
	public void fill(Material material,WGEFinishHandler handler){
		new AsyncFillO(w,a,material,false,handler).aFromSync();
	}

	/** ONLY CALL FROM A SYNC PROCESS! */
	public void fill(Material[] material,WGEFinishHandler handler){
		new AsyncFillA(w,a,material,false,handler).aFromSync();
	}

	/** ONLY CALL FROM A SYNC PROCESS! */
	public void air(WGEFinishHandler handler){
		new AsyncAir(w,a,false,handler).aFromSync();
	}

	/** ONLY CALL FROM A SYNC PROCESS! */
	public void fix(WGEFinishHandler handler){
		new AsyncFixStuff(w,a,false,handler).aFromSync();
	}

	/** ONLY CALL FROM A SYNC PROCESS! */
	public void set(Material material,WGEFinishHandler handler){
		new AsyncSetO(w,a,material,false,handler).aFromSync();
	}

	/** ONLY CALL FROM A SYNC PROCESS! */
	public void set(Material[] material,WGEFinishHandler handler){
		new AsyncSetA(w,a,material,false,handler).aFromSync();
	}

	/** ONLY CALL FROM A SYNC PROCESS! */
	public void xray(Material air,Material other,WGEFinishHandler handler){
		new AsyncInvOaO(w,a,air,other,false,handler).aFromSync();
	}

	/** ONLY CALL FROM A SYNC PROCESS! */
	public void techhide(WGEFinishHandler handler){
		new AsyncTechHidePlus(w,a,false,handler,new Material[0]).aFromSync();
	}

	/** ONLY CALL FROM A SYNC PROCESS! */
	public WGEClipboard copy(Block copyPosition){
		return new WGEClipboard(new Clipboard(new WEArea(a,w),copyPosition));
	}
}
