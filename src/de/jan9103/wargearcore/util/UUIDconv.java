/*
 * Copyright 2021 Jan9103 (@jan9103:matrix.org Jan9103.wargear@protonmail.com)
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software,
 * and to permit third-parties to whom the Software is furnished to do so, all
 * subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR
 * ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
package de.jan9103.wargearcore.util;

import java.util.UUID;

import de.jan9103.java.utils.Curl;
import de.jan9103.java.utils.SimpJson;
import org.apache.logging.log4j.core.config.plugins.convert.TypeConverters.UuidConverter;

import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.mojang.authlib.GameProfile;
import com.mojang.authlib.properties.Property;

public class UUIDconv {
	public static UUID id(String n){
		return toUUID(idSc(n));
	}

	public static UUID toUUID(String n){
		if(n==null) return null;

		try {return new UuidConverter().convert(n);}catch(final Exception e){}
		return null;
	}

	public static String idS(String n){
		try{
			return new SimpJson(Curl.getHttps("https://api.mojang.com/users/profiles/minecraft/"+n)).get("id",null);
			//return SimpJson.parse(Curl.getHttps("https://api.mojang.com/users/profiles/minecraft/"+n)).getOrDefault("id",null);
			//final Scanner s=new Scanner(new URL("https://api.mojang.com/users/profiles/minecraft/"+n).openStream(), "UTF-8");
			//final String js=s.useDelimiter("\\A").next();
			//s.close();
			//if(js.isEmpty()) return null;
			//final JSONObject jso=(JSONObject)JSONValue.parseWithException(js);
			//return jso.get("id").toString();
		}catch(final Exception e){}
		return null;
	}

	public static String idSc(String n){
		return cutId(idS(n));
//		final String t=idS(n);
//		if(t==null)return null;
//		return t.substring(0, 8)+"-"+t.substring(8, 12)+"-"+t.substring(12, 16)+"-"+t.substring(16, 20)+"-"+t.substring(20);
	}

	public static String cutId(String t){
		if(t==null) return null; return t.substring(0,8)+"-"+t.substring(8,12)+"-"+t.substring(12,16)+"-"+t.substring(16,20)+"-"+t.substring(20);
	}

	public static String addDash(String t){
		return t.substring(0,8)+"-"+t.substring(8,12)+"-"+t.substring(12,16)+"-"+t.substring(16,20)+"-"+t.substring(20);
	}

	public static UUID rawToUUID(String t){
		return toUUID(t.substring(0,8)+"-"+t.substring(8,12)+"-"+t.substring(12,16)+"-"+t.substring(16,20)+"-"+t.substring(20));
	}

	public static GameProfile gp(UUID id){
		return new GameProfile(id,null);
	}

	public static GameProfile gp(String n){
		final UUID id=id(n); if(id==null) return null; return gp(id);
	}

	public static GameProfile genGp(String n){
		String id =idS(n);
		UUID   uid=toUUID(cutId(id));

		if(uid==null) return null;

		String profile=profile(id+"?unsigned=false");

		if(profile==null) return null;

		JsonObject jso      =new JsonParser().parse(profile).getAsJsonObject().get("properties").getAsJsonArray().get(0).getAsJsonObject();
		String     texture  =jso.get("value").getAsString();
		String     signature=jso.get("signature").getAsString();

		if(texture==null||texture.isEmpty()) return null;

		GameProfile gp=new GameProfile(uid,n);

		gp.getProperties().put("textures",new Property("textures",texture,signature));
		return gp;
	}

	public static String profile(String uuid){
		try{
			return Curl.getHttps("https://sessionserver.mojang.com/session/minecraft/profile/"+uuid);
			//final Scanner s=new Scanner(new URL("https://sessionserver.mojang.com/session/minecraft/profile/"+uuid).openStream(), "UTF-8");
			//final String str=s.useDelimiter("\\A").next();
			//s.close();
			//return str;
		}catch(final Exception e){}
		return null;
	}

	public static String getTextureByName(String name){
		String id=idS(name);

		if(id==null) return null;

		String profile=profile(id);

		if(profile==null) return null;

		JsonArray jsa=new JsonParser().parse(profile).getAsJsonObject().get("properties").getAsJsonArray();

		for(JsonElement i:jsa)
			if(i.getAsJsonObject().get("name").getAsString().equalsIgnoreCase("textures"))
				return i.getAsJsonObject().get("value").getAsString();

		return null;
	}

	public static String getTextureById(String id){
		String profile=profile(id);

		if(profile==null) return null;

		JsonArray jsa=new JsonParser().parse(profile).getAsJsonObject().get("properties").getAsJsonArray();

		for(JsonElement i:jsa)
			if(i.getAsJsonObject().get("name").getAsString().equalsIgnoreCase("textures"))
				return i.getAsJsonObject().get("value").getAsString();

		return null;
	}
}
