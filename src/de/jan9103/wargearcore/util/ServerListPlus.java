/*
 * Copyright 2021 Jan9103 (@jan9103:matrix.org Jan9103.wargear@protonmail.com)
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software,
 * and to permit third-parties to whom the Software is furnished to do so, all
 * subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR
 * ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
package de.jan9103.wargearcore.util;

import java.awt.image.BufferedImage;
import java.io.File;
import java.util.ArrayList;
import java.util.HashSet;

import javax.imageio.ImageIO;

import org.bukkit.Bukkit;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.server.ServerListPingEvent;
import org.bukkit.util.CachedServerIcon;

import de.jan9103.wargearcore.C;
import de.jan9103.wargearcore.LogHandler;
import de.jan9103.wargearcore.WGC;

public class ServerListPlus implements Listener {
	private final CachedServerIcon[] csi;
	public static String motd=null;
	@Deprecated public static HashSet<String>knownIps=new HashSet<>();
	public static HashSet<Long>olIps=new HashSet<>();
	public ServerListPlus(C c){
		//TODO load discoveryTracker knownIps
		olIps.addAll(c.gll("defence.knownIps",new ArrayList<>()));
		File f=new File(WGC.dataFolder+"/servericons");
		HashSet<CachedServerIcon>tmp=new HashSet<>();

		for(File i:f.listFiles()){
			try{
				BufferedImage bi=ImageIO.read(i);
				if(bi.getWidth()!=64||bi.getHeight()!=64){
					Bukkit.getLogger().warning("Servericon "+i.getName()+" is not 64x64 pixel in size.. please resize it.");
					continue;
				}
				tmp.add(Bukkit.loadServerIcon(bi));
			}catch(Exception e){LogHandler.handleException(e);}
		}
		csi=tmp.size()>0?new CachedServerIcon[tmp.size()]:null;
		int i=0;

		for(CachedServerIcon z:tmp) csi[i++]=z;
	}

	public void save(C c){
		ArrayList<Long>al=new ArrayList<>();

		al.addAll(olIps);
		c.sll("defence.knownIps",al);
	}

	private int csii=0;
	@EventHandler public void a(ServerListPingEvent e){
		if(WGC.discoverytracker&&!e.getAddress().isAnyLocalAddress()){
			long ip=byteArrToLong(e.getAddress().getAddress());
			if(!olIps.contains(ip)){
				olIps.add(ip);
				//knownIps.add(e.getAddress().getHostAddress());
				WGC.dcLog("New Ip discovered the server. Check the Console for further information");
				Bukkit.getLogger().info("[WGCDefence] New Ip discovered the Server: "+e.getAddress().getHostAddress());
			}
		}
		if(csi!=null){
			e.setServerIcon(csi[csii++]);
			if(csii>=csi.length) csii=0;
		}
		if(motd!=null) e.setMotd(motd);
	}

	private long byteArrToLong(byte[] a){
		long o=0L;

		for(byte i:a){
			o<<=8;
			o +=i;
		}
		return o;
	}
}
