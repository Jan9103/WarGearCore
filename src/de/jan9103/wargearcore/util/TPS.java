/*
 * Copyright 2021 Jan9103 (@jan9103:matrix.org Jan9103.wargear@protonmail.com)
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software,
 * and to permit third-parties to whom the Software is furnished to do so, all
 * subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR
 * ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
package de.jan9103.wargearcore.util;

import java.util.function.LongSupplier;

import org.bukkit.Bukkit;
import org.bukkit.World;
import org.bukkit.entity.Entity;

import de.jan9103.wargearcore.UserManager;
import de.jan9103.wargearcore.WGC;
import de.jan9103.wargearcore.area.WgArea;
import de.jan9103.wargearcore.chat.BcMsg;
import net.minecraft.server.v1_15_R1.SystemUtils;

public class TPS {
	// TPS change ############################################################################################################
	public static long nO  =0;
	public static long d0  =0;
	private static int skip=0;
	public static Long nt(){
		return SystemUtils.a.getAsLong();
	}                                                          // better (?): return nO+System.nanoTime();

	private static void startTpsChanger(){
		Bukkit.getScheduler().scheduleSyncRepeatingTask(WGC.wgc,()->{nO+=d0+skip; skip=0;},1,1);
		nO           =SystemUtils.a.getAsLong()-System.nanoTime();
		SystemUtils.a=()->(System.nanoTime()+((LongSupplier)()->nO).getAsLong());
	}

	public static void b(Float tps){
		if(tps<=0) return;

		ovLpC=tps/overloadProt;
		d0   =Math.round(-(100000000/(double)tps)+5000000);
	}

	// TPS info ##############################################################################################################
	public static long lastTick;
	public static double tps=20;
	private static int shedule;
	public static int overloadProt=4;
	private static float ovLpC; //TODO
	private static long protDone=0;
	private static int slowdown =0;
	public static void ign(){
		ign(15000);
	}

	public static void ign(int time){
		protDone=System.currentTimeMillis()+time;
	}

	public static void a(int a){
		if(slowdown==0) skip=-995000000; slowdown+=a;
	}

	public static void d(){
		ovLpC=20F/overloadProt;
		startTpsChanger();
		lastTick=System.currentTimeMillis();
		shedule =Bukkit.getScheduler().scheduleSyncRepeatingTask(WGC.wgc,()->{
			final double i=20/Long.max((System.currentTimeMillis()-lastTick)/1000,1);
			if(Double.isFinite(i)) tps=i;
			lastTick=System.currentTimeMillis();
			switch(slowdown){
			case 0:
				if(tps<ovLpC&&protDone<System.currentTimeMillis()){        //TODO remove deactivation
					UserManager.bc(new BcMsg().f("Server overload detected - Starting countermeasures."));
					protDone=System.currentTimeMillis()+15000;
					for(final WgArea a:WgArea.areas){
						a.prot();
						a.trace.stop();
						a.trace.hide();
					}
					for(final World w:Bukkit.getWorlds())
						for(final Entity z:w.getEntities())
							switch(z.getType()){
							case DROPPED_ITEM:
							case FIREBALL:
							case SMALL_FIREBALL:
							case ARROW:
							case FIREWORK:
							case PRIMED_TNT: z.remove();

							default:
							}
				}
				return;

			case 1: skip=0;

			default: slowdown--;
			}
		},20,20);
	}

	public static String a(){
		switch((byte)Math.round(TPS.tps)<<1){
		case 1: return "§8[§4#---------§8] (§4"+b()+"TPS§8)";

		case 2: return "§8[§4##--------§8] (§4"+b()+"TPS§8)";

		case 3: return "§8[§c###-------§8] (§c"+b()+"TPS§8)";

		case 4: return "§8[§c####------§8] (§c"+b()+"TPS§8)";

		case 5: return "§8[§6#####-----§8] (§6"+b()+"TPS§8)";

		case 6: return "§8[§6######----§8] (§6"+b()+"TPS§8)";

		case 7: return "§8[§e#######---§8] (§e"+b()+"TPS§8)";

		case 8: return "§8[§e########--§8] (§e"+b()+"TPS§8)";

		case 9: return "§8[§a#########-§8] (§a"+b()+"TPS§8)";

		default:
			if((byte)TPS.tps>10) return "§8[§2##########§8] (§2"+b()+"TPS§8)";

			return "§8[§4----------§8] (§4"+b()+"TPS§8)";
		}
	}

	public static String b(){
		return String.format("%.2f",tps);
	}

	public static void e(){
		if(shedule!=0) Bukkit.getScheduler().cancelTask(shedule); shedule=0;
	}
}
