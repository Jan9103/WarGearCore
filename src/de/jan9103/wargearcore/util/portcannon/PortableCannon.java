/*
 * Copyright 2021 Jan9103 (@jan9103:matrix.org Jan9103.wargear@protonmail.com)
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software,
 * and to permit third-parties to whom the Software is furnished to do so, all
 * subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR
 * ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
package de.jan9103.wargearcore.util.portcannon;

import java.util.Random;

import org.bukkit.Location;
import org.bukkit.entity.EntityType;
import org.bukkit.entity.Player;
import org.bukkit.entity.TNTPrimed;
import org.bukkit.util.Vector;

import de.jan9103.wargearcore.util.Parser;

public abstract class PortableCannon {
	private long next=0;
	public void onClick(Player p){
		if(System.currentTimeMillis()<next) return;

		shoot(p);
		next=System.currentTimeMillis()+1000;
	}

	public abstract void shoot(Player p);

	public Vector dir6(Player p,int speed){
		switch(Parser.smallDir(p.getEyeLocation().getDirection())){
		case DOWN: return new Vector(0,-speed,0);

		case EAST: return new Vector(speed,0,0);

		case NORTH: return new Vector(0,0,-speed);

		case SOUTH: return new Vector(0,0,speed);

		case UP: return new Vector(0,speed,0);

		case WEST: return new Vector(-speed,0,0);

		default: return new Vector(0,0,0);
		}
	}

	public Vector spread(Vector v,float s){
		final Random r=new Random();

		return v.add(new Vector(10-r.nextInt(20),10-r.nextInt(20),10-r.nextInt(20)).normalize().multiply(s));
	}

	public Vector spread(Vector v,float s,Random r){
		return v.add(new Vector(10-r.nextInt(20),10-r.nextInt(20),10-r.nextInt(20)).normalize().multiply(s));
	}

	public void spawn(Location l,Vector d,int t){
		final TNTPrimed tn=(TNTPrimed)l.getWorld().spawnEntity(l,EntityType.PRIMED_TNT);

		try{
			tn.setVelocity(d);
			tn.setFuseTicks(t);
		}catch(final IllegalArgumentException e){tn.remove();}
	}
}
