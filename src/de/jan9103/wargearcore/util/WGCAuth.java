/*
 * Copyright 2021 Jan9103 (@jan9103:matrix.org Jan9103.wargear@protonmail.com)
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software,
 * and to permit third-parties to whom the Software is furnished to do so, all
 * subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR
 * ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
package de.jan9103.wargearcore.util;

import java.net.InetAddress;
import java.util.HashMap;
import java.util.List;

import org.bukkit.Bukkit;
import org.bukkit.Location;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerCommandPreprocessEvent;
import org.bukkit.event.player.PlayerTeleportEvent.TeleportCause;

import de.jan9103.wargearcore.User;
import de.jan9103.wargearcore.WGC;
import de.jan9103.wargearcore.chat.Msg;

public class WGCAuth implements Listener {
	public static HashMap<Player,String>locked=new HashMap<>();
	public static WGCAuth wgcauth=null;
	public WGCAuth(){
		wgcauth=this;
	}

	/**
	 * @param p
	 * @param u
	 * @param ips authed ips
	 * @param pw password
	 * @param mode {
	 * 	0: never
	 *  1: new ip
	 *  2: always
	 * }
	 */
	public static void check(Player p,User u,List<String>ips,String pw,byte mode){
		if(mode==0) return;

		InetAddress ia=p.getAddress().getAddress();

		if(mode!=2){
			if(ips==null){
				System.out.println("ERROR: WGCAuth IPs null"); return;
			}
			if(ia==null){
				WGC.logHandler.add("[WGCDefence] Unable to get Ip address "+p.getName()+" "+p.getAddress().toString());
				return;
			}
			if(ips.contains(ia.getHostAddress())){
				if(pw.equalsIgnoreCase("ยง"))
					Bukkit.getScheduler().scheduleSyncDelayedTask(WGC.wgc,()->{
						new Msg(u,WGC._PREFIX_2_Defence).b("You haven't set up a Password yet").d().b("please set it in order to enable WGCDefence-Authme.").d().cI("/wgcauth setpw (password) (repeat password)[space-character as confirm]","/wgcauth setpw ","Prefill Command").d().a("(do not send the command - filling it in (and appending an space) is enough and prevents logs)").a(p);
					},5);
				return;
			}
		}
		if(pw.equalsIgnoreCase("ยง"))
			Bukkit.getScheduler().scheduleSyncDelayedTask(WGC.wgc,()->{
				new Msg(u,WGC._PREFIX_2_Defence).b("You haven't set up a Password yet").d().b("please set it in order to enable WGCDefence-Authme.").d().cI("/wgcauth setpw (password) (repeat password)[space-character as confirm]","/wgcauth setpw ","Prefill Command").d().a("(do not send the command - filling it in (and appending an space) is enough and prevents logs)").a(p);
			},5);
		else{
			locked.put(p,pw);
			Bukkit.getScheduler().scheduleSyncDelayedTask(WGC.wgc,()->{
				new Msg(u,WGC._PREFIX_2_Defence).c("Please verify your identity with your password.").d().cI("/wgcauth (password)","/wgcauth ","prefill cmd").d().a("Instead of sending the command append an space-character and delete it afterwards").d().a("in order to prevent logging").a(p);
				final Location back=u.back=p.getLocation();
				p.teleport(new Location(p.getWorld(),p.getLocation().getX(),1000000d,p.getLocation().getZ()),TeleportCause.PLUGIN);
				u.back=back;
				Bukkit.getScheduler().scheduleSyncDelayedTask(WGC.wgc,()->{
					if(locked.containsKey(p)){
						p.setFallDistance(0);
						p.setNoDamageTicks(100);
						p.teleport(back);
						p.kickPlayer("[WGCDefence] Authentication failed.");
						WGC.dcLog("[WGCDefence] Login fail: "+p.getName()+" -- please check if this is an security breach!");
						WGC.logHandler.add("[WGCDefence] Loginfail: "+p.getName()+" "+ia.getHostAddress());
						locked.remove(p);
					}
				},800);
			},10);
		}
	}

	@EventHandler(priority=EventPriority.HIGHEST)
	public void a(final PlayerCommandPreprocessEvent e){
		if(locked.containsKey(e.getPlayer()))
			e.setCancelled(true);
	}
}
