/*
 * Copyright 2021 Jan9103 (@jan9103:matrix.org Jan9103.wargear@protonmail.com)
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software,
 * and to permit third-parties to whom the Software is furnished to do so, all
 * subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR
 * ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
package de.jan9103.wargearcore.util;

import java.io.File;
import java.io.IOException;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;

import org.bukkit.Material;
import org.bukkit.entity.Player;
import org.bukkit.event.inventory.InventoryType.SlotType;
import org.bukkit.inventory.ItemStack;

import de.jan9103.wargearcore.C;
import de.jan9103.wargearcore.LogHandler;
import de.jan9103.wargearcore.User;
import de.jan9103.wargearcore.WGC;
import de.jan9103.wargearcore.chat.Co;
import de.jan9103.wargearcore.chat.Msg;
import de.jan9103.wargearcore.cmds.UserOnlyCmd;
import de.jan9103.wargearcore.util.gui.InvClickMenu;

public final class ToDo extends UserOnlyCmd {
	public static HashMap<String,ToDoSubList>lists=new HashMap<>();

	public static void add(String name){
		lists.put(name,new ToDoSubList());
	}

	public static void load(String name,Collection<String>c){
		ToDoSubList sl=new ToDoSubList(); sl.a.addAll(c); lists.put(name,sl);
	}

	public static void soon(User u,Long til,boolean auto){
		Msg m=new Msg(u).c("ToDo until "+WGC.sdfHour.format(new Date(til)));

		lists.forEach((a,b)->{
			boolean list=false;
			for(String i:b.soon(til)){
				if(!list) m.d().a(a);
				int z=i.indexOf(' ');
				if(z>0)
					try{i+="\n"+WGC.sdfHour.format(new Date(Long.parseLong(i.substring(0,z))));}catch(NumberFormatException e){}
					i=i.substring(0,z);
				m.d().a(" \u25a2 "+z);
			}
		});
		if(m.hasNewLine()) m.a(u);
		else if(!auto) m.d().a("(nothing)").a(u);
	}

	public static void save(){
		final File dir=new File(WGC.dataFolder+"/todo");

		if(!dir.exists()) dir.mkdir();
		lists.forEach((a,b)->{
			try{b.save(new File(dir+"/"+C.encodeFileName(a)));}catch(IOException e){LogHandler.handleException(e);}
		});
	}

	public static void load(){
		File dir=new File(WGC.dataFolder+"/todo");

		if(!dir.exists()) return; //if not even a folder no files

		for(File f:dir.listFiles()){
			try{
				ToDoSubList sl=new ToDoSubList(f);
				lists.put(C.decodeFileName(f.getName()),sl);
			}catch(IOException e){LogHandler.handleException(e);}
		}
	}

	@Override public void exe(String[] a,final User u,Player p){
		if(a==null||a.length<1){//menu
			InvClickMenu.InvClickMenuBuilder b=new InvClickMenu.InvClickMenuBuilder(u)
							    .setTitle(Co.NORM,"ToDo-Lists");
			for(String i:lists.keySet()) b.addOption(Material.BOOK,i);
			b.build((e,us)->{
				e.setCancelled(true);
				if(e.getSlotType()!=SlotType.CONTAINER) return;

				final ItemStack i=e.getCurrentItem();
				if(i==null){
					e.getWhoClicked().closeInventory(); return;
				}
				if(i.getType()==Material.GRAY_STAINED_GLASS_PANE) return;

				String nm     =i.getItemMeta().getDisplayName();
				ToDoSubList sl=lists.get(nm);
				if(sl==null){
					new Msg(u).c("ERROR: ToDo-List not found").a((Player)e.getWhoClicked()); return;
				}
				if(e.isShiftClick()&&e.isRightClick()){
					lists.remove(nm);
					File dir=new File(WGC.dataFolder+"/todo/"+nm);
					if(dir.exists()) dir.delete();
				}
				e.getWhoClicked().closeInventory();
				sl.open(u,nm);
			});
			return;
		}
		if(a.length==1){//add new list
			ToDoSubList sl=lists.get(a[0]);
			if(sl!=null){
				sl.open(u,a[0]); return;
			}
			add(a[0]);
			new Msg(u).a("ToDo-List created").a(p);
			return;
		}
		//add to list
		ToDoSubList sl=lists.get(a[0]);

		if(sl==null){
			new Msg(u).b("List not found"); return;
		}
		String txt=String.join(" ",a).substring(a[0].length()+1);

		sl.add(txt);
		new Msg(u).a("ToDo-Item saved.").a(p);
	}
}
