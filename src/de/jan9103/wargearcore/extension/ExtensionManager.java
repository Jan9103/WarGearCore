/*
 * Copyright 2021 Jan9103 (@jan9103:matrix.org Jan9103.wargear@protonmail.com)
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software,
 * and to permit third-parties to whom the Software is furnished to do so, all
 * subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR
 * ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
package de.jan9103.wargearcore.extension;

import java.io.File;
import java.io.IOException;
import java.lang.reflect.Field;
import java.util.HashMap;

import org.bukkit.Bukkit;
import org.bukkit.command.Command;
import org.bukkit.command.CommandMap;

import com.google.gson.JsonIOException;
import com.google.gson.JsonSyntaxException;

import de.jan9103.wargearcore.LogHandler;
import de.jan9103.wargearcore.WGC;

public class ExtensionManager {
	private CommandMap cmdMap=null;
	public final HashMap<String,Extension>loaded=new HashMap<>();
	public ExtensionManager()throws IllegalArgumentException,IllegalAccessException {
		Field field;

		try{
			field=Bukkit.getServer().getClass().getDeclaredField("commandMap");
			field.setAccessible(true);
			cmdMap=(CommandMap)field.get(Bukkit.getServer());
		}catch(NoSuchFieldException|SecurityException e){e.printStackTrace();}
	}

	public void loadAll(){
		File folder=new File(WGC.dataFolder+"/extensions");

		for(File i:folder.listFiles()){
			if(!i.isDirectory()) continue;
			if(!new File(i+"/manifest.json").isFile()) continue;
			try{ExtensionLoader el=new ExtensionLoader(i);
			    Extension       e =el.build(this);
			    load(e);}catch(JsonIOException|JsonSyntaxException|IOException e){LogHandler.handleException(e);}
		}
	}

	public void loadDebugExtension()throws IOException {
		load(new ExtensionLoader().build(this));
	}

	public void add(String name,Extension e){
		loaded.put(name,e);
	}

	public void load(Extension e){
		if(e==null){
			System.out.println("Cant register null as an extension"); return;
		}
		System.out.println("Registering "+e.name+" extension..");
		if(loaded.containsKey(e.name))
			unload(e.name); //TODO duplicate error
		loaded.put(e.name,e);
		//TODO register commands
		System.out.println("Registered "+e.name+" extension.");
	}

	public void unload(String name){
		Extension e=loaded.remove(name);

		if(e==null) return;

		System.out.println("Unloading "+name+" extension..");
		for(String i:e.commands) unRegisterCommand(i); //TODO error handling of return value
		System.out.println("Unloaded "+name+" extension.");
	}

	public boolean registerCommand(String name,Script s,Extension e){
		if(cmdMap==null){
			System.out.println("Extension Command-Registry: no Command-Map..");
			return false;
		}
		if(cmdMap.getCommand(name)!=null){
			System.out.println("Extension Command-Registry: /"+name+" is already in use..");
			return false;
		}
		cmdMap.register(name,new ECommand(name,s,e));
		System.out.println("Extension Command-Registry: registered /"+name+"");
		return true;
	}

	public boolean unRegisterCommand(String name){
		if(cmdMap==null) return false;

		Command c=cmdMap.getCommand(name);

		c.unregister(cmdMap);
		return true;
	}
}
