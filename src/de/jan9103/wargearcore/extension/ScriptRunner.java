/*
 * Copyright 2021 Jan9103 (@jan9103:matrix.org Jan9103.wargear@protonmail.com)
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software,
 * and to permit third-parties to whom the Software is furnished to do so, all
 * subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR
 * ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
package de.jan9103.wargearcore.extension;

import java.util.ArrayDeque;

import org.bukkit.Bukkit;

import de.jan9103.wargearcore.WGC;
import de.jan9103.wargearcore.extension.vars.CBasicOp;
import de.jan9103.wargearcore.extension.vars.CEnum;
import de.jan9103.wargearcore.extension.vars.CPP;
import de.jan9103.wargearcore.extension.vars.CSetOp;
import de.jan9103.wargearcore.extension.vars.CVar;
import de.jan9103.wargearcore.extension.vars.CVarLink;
import de.jan9103.wargearcore.extension.vars.IntVar;

public class ScriptRunner {
	/**used for jump-point-locations, etc*/
	private final Script s;
	public final VarSet vars;
	/**Command-Sets (each stack item = 1 block)*/
	public final ArrayDeque<CPPArr>cpp=new ArrayDeque<>();
	private CPPArr a;
	/**accumulator*/
	public CVar acc=new IntVar();
	public ScriptRunner(Script script,Extension e){
		s=script;
//		CPP[]code=script.code.clone();
		vars=new VarSet(e);
//		HashMap<String,LiveCVarLink>links=new HashMap<>();
//		for(int i=0;i<code.length;i++){
//			if(code[i] instanceof CVarLink){
//				String nm=((CVarLink)code[i]).name;
//				LiveCVarLink lcvl=links.get(nm);
//				if(lcvl!=null){
//					code[i]=lcvl;
//				}else{
//					links.put(nm,code[i]=new LiveCVarLink(nm,vars.get(nm),false));
//				}
//			}
//		}
		cpp.push(script.scppa.workCopy());
	}

	public void jump(Integer[] to){
		CPPArr c=cpp.peekLast();

		cpp.clear();
		for(int i:to){
			cpp.push(c);
			if(c.cd.code.length<i) return;

			CPP a=c.cd.code[i];
			if(a instanceof CPPArr) c=(CPPArr)a;
			else{
				c.i=i; return;
			}
		}
	}

	public void run(){
		CPP i;

		/**
		 * this (re-)starts the execution of the top most CPPArr in the cpp-stack
		 *
		 * you'll have to pop manually (in CPPArr.onEnd)
		 *
		 * break to create an traceback
		 */
		blockLooper : while(true){
			if(cpp.isEmpty()) return;

			a=cpp.peek();
			System.out.println("bbbbbbbbbbbbb");
			while(true){
				i=a.auto();
//FIXME:				if(i==null){a.onEnd(this);continue blockLooper;}
				if(i instanceof CVar){
					acc=(CVar)i; continue;
				}
				if(i instanceof CVarLink){
					acc=vars.get(((CVarLink)i).name); acc.link=((CVarLink)i).name; continue;
				}
				if(i instanceof CBasicOp){
					CVar cv=getCVar();
					if(cv==null){
						System.out.println("Extension Error: "+s.name+": CVar basic op not set");
						break blockLooper;
					}
					try{acc=((CBasicOp)i).f.apply(acc,cv); continue;}catch(ArrayIndexOutOfBoundsException e){
						//TODO ERROR
						System.out.println("Extension Error: "+s.name+": AIOOBE");
						break blockLooper;
					}catch(ClassCastException e){
						//TODO ERROR
						System.out.println("Extension Error: "+s.name+": next value shouldve been an value");
						break blockLooper;
					}
				}
				if(i instanceof CEnum){
					if(i==CEnum.SLEEP){
						CVar cv=getCVar();
						if(cv==null){
							System.out.println("Extension Error: "+s.name+": CVar set op not set");
							break blockLooper;
						}
						Bukkit.getScheduler().scheduleSyncDelayedTask(WGC.wgc,()->{System.out.println("continue"); this.run();},cv.toInt());
						System.out.println("Sleeping for "+cv.toInt()+"\n  "+cv.debug());
						return;
					}
					if(i==CEnum.WHILE){
						CPP cond=a.get(),whileContent=a.get();

						return;
					}
					break; //TODO DEBUG ONLY
				}
				System.out.println("aaaaaaa-1");
				if(i instanceof CSetOp){ //FIXME
					System.out.println("aaaaaaa");
					CVar cv=getCVar();
					System.out.println("aaaaaaa2");
					if(cv==null){
						System.out.println("aaaaaaa3");
						System.out.println("Extension Error: "+s.name+": CVar set op not set");
						break blockLooper;
					}
					System.out.println("aaaaaaa4");
					String to=acc.link;
					System.out.println("aaaaaaa5");
					acc=cv;
					System.out.println("aaaaaaa6");
					if(to!=null) vars.set(to,cv);
					System.out.println("aaaaaaa7");
					continue; //TODO DEBUG ONLY
				}
				System.out.println("aaaaaaa8");
				cpp.pop();
				break; //TODO DEBUG ONLY
			}
		}
		//ERROR !
		StringBuilder o=new StringBuilder("Extension-Script-Execution failed: "+s.name+"\n A: "+acc.getClass().getName()+" = "+acc.toString());

		if(i!=null) o.append("\n D: "+i.getClass()+" = "+i.debug());
		else o.append("\n D: null");
		if(a!=null){
			o.append("\n C: "+a.i+"/"+(a.cd.code.length-1));
			if(a.i>0&&(a.i<=a.cd.code.length)) o.append("\n    "+(a.i-1)+"/"+(a.cd.code.length-1)+(a.i>0?(" "+a.cd.code[(a.i-1)].getClass().getName()+" = "+a.cd.code[(a.i-1)].debug()):""));
			if(a.i>=0&&(a.i<a.cd.code.length)) o.append("\n    "+a.i+"/"+(a.cd.code.length-1)+" "+a.cd.code[a.i].getClass().getName()+" = "+a.cd.code[a.i].debug());
		}
		else o.append("\n C: null");
		while(!cpp.isEmpty()){
			CPPArr a=cpp.pop();
			if(a!=null){
				o.append("\n B: "+a.i+"/"+(a.cd.code.length-1));
				if(a.i>0&&(a.i<=a.cd.code.length)) o.append("\n    "+(a.i-1)+"/"+(a.cd.code.length-1)+" "+a.cd.code[(a.i-1)].getClass().getName()+" = "+a.cd.code[(a.i-1)].debug());
				if(a.i>=0&&(a.i<a.cd.code.length)) o.append("\n    "+a.i+"/"+(a.cd.code.length-1)+" "+a.cd.code[a.i].getClass().getName()+" = "+a.cd.code[a.i].debug());
			}
			else o.append("\n B: null");
		}
		Bukkit.getLogger().warning(o.toString());
	}

	private CVar getCVar(){
		CPP nt=a.auto();

		if(nt instanceof CVar) return (CVar)nt;

		if(nt instanceof CVarLink) return vars.get(((CVarLink)nt).name);

		return null;
	}
}
