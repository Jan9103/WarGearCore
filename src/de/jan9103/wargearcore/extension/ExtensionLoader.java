/*
 * Copyright 2021 Jan9103 (@jan9103:matrix.org Jan9103.wargear@protonmail.com)
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software,
 * and to permit third-parties to whom the Software is furnished to do so, all
 * subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR
 * ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
package de.jan9103.wargearcore.extension;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonIOException;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.google.gson.JsonSyntaxException;

import de.jan9103.wargearcore.WGC;
import de.jan9103.wargearcore.extension.ScriptLoader.ScriptParseException;
import de.jan9103.wargearcore.extension.vars.CVarFunction;
import de.jan9103.wargearcore.extension.vars.SIntVar;

public class ExtensionLoader {
	public final HashMap<Integer,SIntVar>ints=new HashMap<>();
	public final HashMap<String,CVarFunction>funcs=new HashMap<>();
	public final HashMap<String,ScriptLoader>scripts=new HashMap<>();
	public final HashMap<String,String>commands=new HashMap<>();
	private final String name,version,author,description;
	public ExtensionLoader(File folder)throws JsonIOException,JsonSyntaxException,IOException {
		ints.put(0,new SIntVar(0));
		File       manifest=new File(folder+"/manifest.json");
		JsonObject j       =new JsonParser().parse(new InputStreamReader(new FileInputStream(manifest))).getAsJsonObject();

		name=j.get("name").getAsString();
		if(name==null||name.isEmpty()) throw new JsonIOException("Missing Extension Name");
		version    =j.get("version").isJsonNull()?"1":j.get("version").getAsString();
		author     =j.get("author").isJsonNull()?"":j.get("author").getAsString();
		description=j.get("description").isJsonNull()?"":j.get("description").getAsString();
		JsonArray jsa=j.get("scripts").getAsJsonArray();

		if(!jsa.isJsonNull())
			for(JsonElement i:jsa){
				JsonObject jf     =i.getAsJsonObject();
				String     name   =jf.get("name").getAsString();
				String     cmdJump="";
				if(jf.has("command")){
					JsonObject cmd=jf.get("command").getAsJsonObject();
					if(cmd.has("call")) cmdJump=cmd.get("call").getAsString();
					String cname=cmd.get("name").getAsString();
					commands.put(cname,name);
					System.out.println("Extension cmds + "+cname+" "+name);
				}
//				JsonArray cmds=jf.get("command").getAsJsonArray();
//				String cmdJump="";
//				if(!cmds.isJsonNull()){
//					for(JsonElement k:cmds){
//						JsonObject cmd=k.getAsJsonObject();
//						String cname=cmd.get("name").getAsString();
//						cmdJump=cmd.get("label").getAsString();
//						commands.put(cname,name);
//						sl.cmds.put(cname,cmdJump);
//					}
//				}
				System.out.println(" ############### Parsing "+name);
				ScriptLoader sl=new ScriptLoader(new File(folder+"/"+name+".wgce"),this,cmdJump);
				scripts.put(name,sl);
				try{sl.parse();}catch(ScriptParseException e1){
					System.out.println("Extension not loaded - invalid script: "+name
							   +"\n  "+e1.msg);
				}
			}
	}

	/**
	 * load debug script
	 */
	public ExtensionLoader()throws IOException {
		name="TestExt"; version="v1"; author="author"; description="DEBUG";
		ints.put(0,new SIntVar(0));
		ScriptLoader sl=new ScriptLoader(new File(WGC.dataFolder+"/extensions/testscript.wgce"),this,"");

		try{sl.parse();}catch(ScriptParseException e1){
			System.out.println("Extension not loaded - invalid script: "+name
					   +"\n  "+e1.msg);
		}
		scripts.put("testscript",sl);
		commands.put("test","testscript");
	}

	public Extension build(ExtensionManager em){
		//TODO finish compiling scripts
		//TODO register commands w bukkit AFTER BUILDING ALL SCRIPTS
		String[] cmds=new String[commands.size()];
		int      i   =0;

		for(String z:commands.keySet()) cmds[i++]=z;
		final Extension o=new Extension(name,em,cmds);//TODO

		scripts.forEach((nm,scr)->o.scripts.put(nm,scr.build(o,em)));
		commands.forEach((a,b)->{
			Script s=o.scripts.get(b);
			//Script s=getScript(b,o);
			System.out.println("!! "+s);
			if(s!=null) em.registerCommand(a,s,o);
			else System.out.println("Extensions: ERROR: Command Script==null (B: "+b.toString()+"; A: "+a.toString()+" "+o.scripts.size());
		});
		return o;
	}

	private Script getScript(String name,Extension e){
		for(Map.Entry<String,Script>i:e.scripts.entrySet())
			if(i.getKey().equalsIgnoreCase(name))
				return i.getValue();

		return null;
	}
}
