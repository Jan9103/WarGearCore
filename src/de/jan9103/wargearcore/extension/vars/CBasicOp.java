/*
 * Copyright 2021 Jan9103 (@jan9103:matrix.org Jan9103.wargear@protonmail.com)
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software,
 * and to permit third-parties to whom the Software is furnished to do so, all
 * subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR
 * ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
package de.jan9103.wargearcore.extension.vars;

import java.util.function.BiFunction;

public class CBasicOp extends CPP {
	public static final CBasicOp ADD=new CBasicOp((a,b)->a.add(b)),SUB=new CBasicOp((a,b)->a.sub(b)),MUL=new CBasicOp((a,b)->a.mul(b)),DIV=new CBasicOp((a,b)->a.div(b)),
			      MOD=new CBasicOp((a,b)->a.mod(b)),ADDEQ=new CBasicOp((a,b)->a.addEq(b)),SUBEQ=new CBasicOp((a,b)->a.subEq(b)),MULEQ=new CBasicOp((a,b)->a.mulEq(b)),
			      DIVEQ=new CBasicOp((a,b)->a.divEq(b)),MODEQ=new CBasicOp((a,b)->a.modEq(b)),DUALEQUAL=new CBasicOp((a,b)->new IntVar(a.equals(b)?1:0)),
			      UNEQUAL=new CBasicOp((a,b)->new IntVar(a.equals(b)?0:1)),
			      COMMA  =new CBasicOp((a,b)->{if(!(a instanceof ArrVar)) a=new ArrVar(a); a.add(b); return a;});
	public final BiFunction<CVar,CVar,CVar>f;
	public CBasicOp(BiFunction<CVar,CVar,CVar>func){
		f=func;
	}

	@Override public String debug(){
		return "CBasicOp "+f.toString();
	}
}
