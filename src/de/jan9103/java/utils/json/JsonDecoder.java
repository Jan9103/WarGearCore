/*
 * Copyright 2021 Jan9103 (@jan9103:matrix.org Jan9103.wargear@protonmail.com)
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software,
 * and to permit third-parties to whom the Software is furnished to do so, all
 * subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR
 * ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
package de.jan9103.java.utils.json;

import de.jan9103.java.utils.StringEscape;

/**
 * TODO:
 * - jq like array results
 * - .g(Object) in json interface
 * - easier option instead of .value (?)
 * - support more datatypes
 * - HashMap .asStrHm , etc (vgl arr)
 */
public class JsonDecoder{
	private final String in;
	private int ind=0;
	public Json json;
	/**
	 * @param path a list of int (array index) and str (dict key)
	 * @return the value of a JsonValue Object
	 */
	public Object getPath(Object...path)throws JsonParseException,IndexOutOfBoundsException{
		Json j=json;
		for(Object i:path){
			if(i instanceof String){
				if(!(j instanceof JsonDict))throw new JsonParseException("Not a dictionary - can't path \""+i+"\"",0);
				j=((JsonDict)j).get((String)i);
				if(j==null)throw new JsonParseException("Key \""+i+"\" not found in dictionary",0);
			}else if(i instanceof Integer){
				if(!(j instanceof JsonArray))throw new JsonParseException("Not a array - can't path \""+i+"\"",0);
				j=((JsonArray)j).get((Integer)i);
			}
		}
		return((JsonValue)j).value;
	}
	public JsonDecoder(String s)throws JsonParseException{in=s;json=parseElement();}
	private char skipSpace()throws IndexOutOfBoundsException{char c;while(Character.isWhitespace(c=in.charAt(ind)))ind++;return c;}
	private char n()throws IndexOutOfBoundsException{return in.charAt(++ind);}
	private Json parseElement()throws JsonParseException{
		char c=skipSpace();
		try{
			switch(c){
				//////// SINGLE VALUES /////////
				case '0':case '1': case'2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':{
					StringBuilder n=new StringBuilder(""+c);
					while(true){
						ind++;
						if(ind>=in.length())break;
						c=in.charAt(ind);
						if(!Character.isDigit(c)&&c!='.')break;
						n.append(c);
					}
					String na=n.toString();
					if(na.indexOf('.')!=-1) return new JsonValue(Double.parseDouble(na));
					if(na.length()>9) return new JsonValue(Long.parseLong(na));
					return new JsonValue(Integer.parseInt(na));
				}
				case'"':return new JsonValue(parseString());
				case't':if(n()=='r'&&n()=='u'&&n()=='e'){ind++;return new JsonValue(true);}throw new JsonParseException("Missspelled true at "+ind,ind);
				case'f':if(n()=='a'&&n()=='l'&&n()=='s'&&n()=='e'){ind++;return new JsonValue(false);}throw new JsonParseException("Missspelled false at "+ind,ind);
				case'n':if(n()=='u'&&n()=='l'&&n()=='l'){ind++;return new JsonValue(null);}throw new JsonParseException("Missspelled null at "+ind,ind);
				/////////// LISTS ////////////
				case'{':return parseDict();
				case'[':return parseArray();
			}
		}catch(IndexOutOfBoundsException e){throw new JsonParseException("Missing end of json",ind);
		}catch(StringEscape.StringEscapeException e){throw new JsonParseException("String decode exception: "+e.getMessage(),ind);}
		throw new JsonParseException("Unknown Json Element \""+c+"\" at index "+ind,ind);
	}
	private JsonArray parseArray()throws JsonParseException,IndexOutOfBoundsException{
		JsonArray a=new JsonArray();
		ind++;
		while(true){
			char c=skipSpace();
			if(c==']'){ind++;return a;}
			a.add(parseElement());
			c=skipSpace();
			ind++;
			if(c==',')continue;
			if(c==']')return a;
			throw new JsonParseException("Invalid array end \""+c+"\" at index "+ind,ind);
		}
	}
	private JsonDict parseDict() throws JsonParseException,IndexOutOfBoundsException,StringEscape.StringEscapeException{
		JsonDict a=new JsonDict();
		ind++;
		while(true){
			char c=skipSpace();
			if(c=='}'){ind++;return a;}
			String nm=parseString();
			c=skipSpace();
			if(c!=':')throw new JsonParseException("Invalid Dictionary: expected \":\", got \""+c+"\" at index "+ind,ind);
			ind++;
			a.put(nm,parseElement());
			c=skipSpace();
			ind++;
			if(c==',')continue;
			if(c=='}')return a;
			throw new JsonParseException("Invalid dictionary end \""+c+"\" at index "+ind,ind);
		}
	}
	private String parseString()throws JsonParseException,IndexOutOfBoundsException,StringEscape.StringEscapeException{
		if(in.charAt(ind)!='"')throw new JsonParseException("Invalid String: expected starting double-quotes at index"+ind,ind);
		ind++;
		StringBuilder b=new StringBuilder();
		while(true){
			char c=in.charAt(ind);
			ind++;
			if(c=='\\'){b.append('\\').append(in.charAt(ind));ind++;continue;}
			if(c=='"')return StringEscape.unescape(b.toString());
			b.append(c);
		}
	}
}
