/*
 * Copyright 2021 Jan9103 (@jan9103:matrix.org Jan9103.wargear@protonmail.com)
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software,
 * and to permit third-parties to whom the Software is furnished to do so, all
 * subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR
 * ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
package de.jan9103.java.utils.browser;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.net.ssl.HttpsURLConnection;

public class HttpsWebConnection extends WebConnection{
	public HttpsWebConnection(Browser browser,URL url,String method,boolean report){super(browser,url,method,report);connect();}
	private BufferedReader br=null;
	private HttpsURLConnection c=null;
	public void connect(){
		status=-1;
		try{
			// prepare request
			String requestCookies=b.cookies();
			c=(HttpsURLConnection)u.openConnection();
			c.setConnectTimeout(15000);
			c.setReadTimeout(15000);
			c.setInstanceFollowRedirects(follow);
			if(params!=null)
				for(String[]i:params)
					c.addRequestProperty(i[0],i[1]);
			if(referer!=null)
				c.addRequestProperty("Referer",referer);
			c.setRequestProperty("user-agent",Browser.USERAGENT);
			c.setRequestProperty("DNT","1");
			if(!requestCookies.isEmpty())c.setRequestProperty("Cookie",requestCookies);
			c.setRequestMethod(method);
			// request
			c.connect();
			responseCode=c.getResponseCode();
			Map<String,List<String>>responseHeaderFields=c.getHeaderFields();
			// parse cookies
			b.setCookie(responseHeaderFields.get(Browser.COOKIE_HEADER));
			// report to stuff
			if(report){
				List<String>r=new ArrayList<>();
				List<String>il=responseHeaderFields.get("report-to");
				if(il!=null)r.addAll(il);
				il=responseHeaderFields.get("Report-To");
				if(il!=null)r.addAll(il);
				for(String k:r){
					k=k.replace(" ","").replace("\\/","/");
					int z,zl=0;
					while((z=k.indexOf("\"url\":",zl))>zl){
						z+=7;
						zl=k.indexOf('\"',z);
						if(zl<z)break;
						//TODO report
					}
				}
				il=responseHeaderFields.get("Expect-CT");
				if(il!=null){
					for(String k:il){
						k=k.replace(" ","").replace("\\/","/");
						int z,zl=0;
						while((z=k.indexOf("report-uri=",zl))>zl){
							z=k.indexOf('\"',z)+1;
							zl=k.indexOf('\"',z);
							if(zl<z)break;
							//TODO report
						}
					}
				}
			}
			// read input
			br=new BufferedReader(new InputStreamReader(c.getInputStream()));
			status=0;
		}catch(IOException e){status=1;
		}catch(ArrayIndexOutOfBoundsException e){status=2;} // for params
	}
	@Override public String readLine()throws IOException{return br.readLine();}
	@Override public void disconnect(){
		try{br.close();
		}catch(IOException e){}
		c.disconnect();
	}
}
