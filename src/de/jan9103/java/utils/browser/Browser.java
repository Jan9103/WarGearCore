/*
 * Copyright 2021 Jan9103 (@jan9103:matrix.org Jan9103.wargear@protonmail.com)
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software,
 * and to permit third-parties to whom the Software is furnished to do so, all
 * subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR
 * ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
package de.jan9103.java.utils.browser;

import java.net.MalformedURLException;
import java.net.ProtocolException;
import java.net.URL;
import java.util.HashMap;
import java.util.List;

public class Browser{
	public static final String USERAGENT="Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:15.0) Gecko/20100101 Firefox/15.0.1"//Linux + Firefox
			,COOKIE_HEADER="Set-Cookie";
	public HashMap<String,String>cook=new HashMap<>();
	/** get the result of a get request */
	public WebRequest get(String url)throws MalformedURLException,ProtocolException{return get(new URL(url));}
	/** get the result of a get request */
	public WebRequest get(URL u)throws ProtocolException{WebRequest r=getRequest(u);r.run();return r;}
	/** prepare a get request without sending it */
	public WebRequest getRequest(String url)throws MalformedURLException,ProtocolException{return getRequest(new URL(url));}
	/** prepare a get request without sending it */
	public WebRequest getRequest(URL u)throws ProtocolException{
		switch(u.getProtocol()){
			//case"http":return new HttpWebRequest(this,u,"GET",false);
			case"https":return new HttpsWebRequest(this,u,"GET",false);
			default:throw new ProtocolException("Protocol not (yet) supported");
		}
	}
	/** get a active connection */
	public WebConnection getConnection(URL u)throws ProtocolException{
		switch(u.getProtocol()){
			//case"http":return new HttpWebRequest(this,u,"GET",false);
			case"https":return new HttpsWebConnection(this,u,"GET",false);
			default:throw new ProtocolException("Protocol not (yet) supported");
		}
	}
	/** get the last url of a redirect chain */
	public String followRedirects(String start)throws MalformedURLException,ProtocolException{
		URL next=new URL(start);
		WebRequest con;
		while(true){
			con=get(next);
			switch(con.responseCode){
				case 301://HTTP_MOVED_PERM:
				case 302://HTTP_MOVED_TEMP:
				case 307:
					//next=new URL(new URL(start),con.getHeaderField("location"));
					next=new URL(next,con.responseHeaderFields.get("location").get(0));
					start=next.toExternalForm();
					continue;
			}
			return con.u.toString();
		}
	}
	/** build a string with all cookies */
	public String cookies(){
		final StringBuilder ck=new StringBuilder();
		cook.forEach((a,b)->{
			if(ck.length()>1)ck.append("; ");
			ck.append(a).append("=").append(b);
		});
		return ck.toString();
	}
	/** save a cookie */
	public void setCookie(String a,String b){cook.put(a,b);}
	/** save a cookie from a http header */
	public void setCookie(String header){
		if(header==null)return;
		int z=header.indexOf('=');
		if(z<1)return;
		String term=header.substring(0,z);
		int w=header.indexOf(';',z+1);
		if(w<1)return;
		cook.put(term,header.substring(z+1,w));
	}
	public void setCookie(List<String>cookies){if(cookies!=null)for(String i:cookies)setCookie(i);}
}
